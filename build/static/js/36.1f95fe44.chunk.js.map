{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","localStorage","getItem","name","role","className","size","color","icon","style","Login","props","useSkin","skin","dispatch","useContext","AbilityContext","useDispatch","history","useHistory","useState","phone","setPhone","password","setPassword","mobileexist","setExistMobile","setLoginData","useForm","register","errors","handleSubmit","illustration","source","require","default","console","log","data","axios","post","mobile_number","toString","then","r","toast","message","transition","Slide","hideProgressBar","autoClose","push","pathname","state","id","_id","mobile","useEffect","to","onClick","e","preventDefault","lg","sm","src","alt","md","textShadow","fontSize","fontWeight","onSubmit","handleLogin","getHomeRouteForLoggedInUser","for","autoFocus","type","value","placeholder","maxLength","onChange","target","handlePhone","innerRef","required","pattern","login_phone","login_password","Ripple","block","InputPasswordToggle","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","classnames","addonType","renderIcon","defaultProps"],"mappings":"2aAoCMA,GAFcC,aAAaC,QAAQ,WAEpB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,EAASC,KAAT,OACnB,cAAC,WAAD,UACE,qBAAKC,UAAU,kBAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,IAAD,CAAQC,KAAK,KAAKC,MAAM,UAAUC,KAAM,cAAC,IAAD,CAAQF,KAAM,OACtD,qBAAID,UAAU,+BAA+BI,MAAO,CAACF,MAAM,WAA3D,cAAyEJ,cA+QlEO,UAtQD,SAAAC,GACZ,MAAwBC,cAAxB,mBAAOC,EAAP,KAEMC,GAFN,KACgBC,qBAAWC,KACVC,eACXC,EAAUC,cAChB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAsCJ,qBAAtC,mBAAOK,EAAP,KAAoBC,EAApB,KACF,EAAkCN,qBAAlC,mBAAkBO,GAAlB,WACE,EAA2CC,cAAnCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAAQC,EAA1B,EAA0BA,aACpBC,EAAwB,SAATnB,EAAkB,oBAAsB,eAC3DoB,EAASC,OAAQ,YAA4BF,IAAgBG,QAKjE,GAHAC,QAAQC,IAAIhB,GACZe,QAAQC,IAAIZ,GAERA,GAAeA,EAAYa,MAAQb,EAAYa,KAAKA,MAA2C,OAAnCb,EAAYa,KAAKA,KAAKf,SAAmB,CAEvGgB,IAAMC,KADU,8CACI,CAClBC,cAAepB,EAAMqB,aAEtBC,MAAK,SAAAC,GACJR,QAAQC,IAAIO,GACZC,YACE,cAAC7C,EAAD,CAAcG,KAAMyC,EAAEN,KAAKQ,QAAS1C,KAAM,KACxC,CAAE2C,WAAYC,IAAOC,iBAAiB,EAAMC,UAAW,MAE3DvC,EAAMO,QAAQiC,KAAK,CAACC,SAAS,aAC/BC,MAAM,CACJC,GAAK7B,EAAYa,KAAKA,KAAKiB,IAC3BC,OAASnC,QAYXoC,qBAAU,WACRlB,IAAMC,KAFa,+DAEM,CACvBC,cAAepB,EAAMqB,aAEtBC,MAAK,SAAAC,GACJR,QAAQC,IAAIO,GACZlB,EAAekB,QAEhB,CAACvB,IAmCJ,OACE,qBAAKhB,UAAU,uBAAf,SACE,eAAC,IAAD,CAAKA,UAAU,iBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,aAAaqD,GAAG,IAAIC,QAAS,SAAAC,GAAC,OAAIA,EAAEC,oBAmDpD,cAAC,IAAD,CAAKxD,UAAU,0CAA0CyD,GAAG,IAAIC,GAAG,KAAnE,SACE,qBAAK1D,UAAU,iEAAf,SACE,qBAAKA,UAAU,YAAY2D,IAAK/B,EAAQgC,IAAI,iBAGhD,cAAC,IAAD,CAAK5D,UAAU,gDAAgDyD,GAAG,IAAIC,GAAG,KAAzE,SACE,eAAC,IAAD,CAAK1D,UAAU,kBAAkB0D,GAAG,IAAIG,GAAG,IAAIJ,GAAG,KAAlD,UAIE,oBAAIrD,MAAO,CAAC0D,WAAW,UAAW5D,MAAM,iBAAkB6D,SAAS,OAAQC,WAAW,KAAtF,6BACA,cAAC,IAAD,CAAUhE,UAAU,OAApB,oEAwBA,eAAC,IAAD,CAAMA,UAAU,uBAAuBiE,SAAUvC,GAvH1C,SAACO,GAChBX,EAAaW,GACTb,GAAeA,EAAYa,MAAQb,EAAYa,KAAKA,MAA2C,OAAnCb,EAAYa,KAAKA,KAAKf,UACtFT,EAASyD,YAAYjC,EAAM3B,IAE3B2B,EAAO,CAAClC,KAAO,SACfc,EAAQiC,KAAKqB,YAA4BlC,EAAKlC,UAiHtC,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,UAAU,aAAaoE,IAAI,cAAlC,2BAGA,cAAC,IAAD,CACEC,WAAS,EACTC,KAAK,OACLC,MAAOvD,EACPiC,GAAG,cACHnD,KAAK,cACL0E,YAAY,sBACZC,UAAU,KACVC,SAAU,SAAAnB,GAAC,OAvJT,SAACA,GACnBtC,EAASsC,EAAEoB,OAAOJ,OAClBhB,EAAEC,iBAqJ6BoB,CAAYrB,IAE3BsB,SAAUrD,EAAS,CACjBsD,UAAU,EACVC,QAAQ,CAACR,MAAM,mBACf9B,QAAQ,gDAIVhB,EAAOuD,aAA2C,aAA5BvD,EAAOuD,YAAYV,MAAuB,mBAAGlE,MAAO,CAACF,MAAM,OAAjB,yCAIlEkB,GAAeA,EAAYa,MAAQb,EAAYa,KAAKA,MAA2C,OAAnCb,EAAYa,KAAKA,KAAKf,SAAoB,eAAC,IAAD,WACtG,qBAAKlB,UAAU,iCAAf,SACE,cAAC,IAAD,CAAOA,UAAU,aAAaoE,IAAI,iBAAlC,wBAOF,cAAC,IAAD,CACEG,MAAOrD,EACP+B,GAAG,iBACHnD,KAAK,iBACLE,UAAU,oBACV0E,SAAU,SAAAnB,GAAC,OAAIpC,EAAYoC,EAAEoB,OAAOJ,QAEpCM,SAAUrD,EAAS,CACjBsD,UAAU,EACVrC,QAAQ,uCAGThB,EAAOwD,gBAAkB,mBAAG7E,MAAO,CAACF,MAAM,OAAjB,SAA0BuB,EAAOwD,eAAexC,aAC/D,IAKf,cAAC,IAAOyC,OAAR,CAAeZ,KAAK,SAASpE,MAAM,UAAUiF,OAAK,EAAlD,wBAIF,mBAAGnF,UAAU,kBAAb,SAGE,cAAC,IAAD,CAAMqD,GAAG,mBAAT,SACE,qE,kRCpRV+B,EAAsB,SAAA9E,GAE1B,IACE+E,EAUE/E,EAVF+E,MACAC,EASEhF,EATFgF,SACAC,EAQEjF,EARFiF,SACAC,EAOElF,EAPFkF,QACAxF,EAMEM,EANFN,UACAyF,EAKEnF,EALFmF,QACAjB,EAIElE,EAJFkE,YACAkB,EAGEpF,EAHFoF,SACAC,EAEErF,EAFFqF,eACGC,EAVL,YAWItF,EAXJ,GAcA,EAA8CS,mBAASyE,GAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KAaA,OACE,eAAC,WAAD,WACGT,EAAQ,cAAC,IAAD,CAAOjB,IAAKqB,EAAZ,SAAsBJ,IAAiB,KAChD,eAAC,IAAD,CACErF,UAAW+F,IAAW,eACnB/F,EAAYA,IAFjB,UAKE,cAAC,IAAD,yBACEsE,MAA0B,IAApBuB,EAA4B,WAAa,OAC/CrB,YAAaA,GAA4B,mDACzCxE,UAAW+F,IAAW,eACnBJ,EAAiBA,KAGfN,GAASI,EACV,CACExC,GAAIwC,GAEN,IACAG,IAGN,cAAC,IAAD,CAAiBI,UAAU,SAAS1C,QAAS,kBAAMwC,GAAoBD,IAAvE,SACE,cAAC,IAAD,CAAgB7F,UAAU,iBAA1B,SAlCW,WACjB,IAAMC,EAAOyF,GAAsB,GAEnC,OAAwB,IAApBG,EACKP,GAAsB,cAAC,IAAD,CAAKrF,KAAMA,IAEjCsF,GAAsB,cAAC,IAAD,CAAQtF,KAAMA,IA4BKgG,cAOvCb,MA0BfA,EAAoBc,aAAe,CACjCV,SAAS,I","file":"static/js/36.1f95fe44.chunk.js","sourcesContent":["import { useState, useContext, Fragment, useEffect } from 'react'\r\nimport classnames from 'classnames'\r\nimport Avatar from '@components/avatar'\r\nimport { useSkin } from '@hooks/useSkin'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport { toast, Slide } from 'react-toastify'\r\nimport { handleLogin } from '@store/actions/auth'\r\nimport { AbilityContext } from '@src/utility/context/Can'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\nimport { getHomeRouteForLoggedInUser, isObjEmpty } from '@utils'\r\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee } from 'react-feather'\r\nimport {\r\n  Alert,\r\n  Row,\r\n  Col,\r\n  CardTitle,\r\n  CardText,\r\n  Form,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  CustomInput,\r\n  Button,\r\n  UncontrolledTooltip\r\n} from 'reactstrap'\r\nimport axios from 'axios'\r\nimport '@styles/base/pages/page-auth.scss'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport app from '../../../base'\r\nimport { getAuth, signInWithCustomToken } from \"firebase/auth\"\r\n// import { AuthContext } from '../../../Auth'\r\nconst loginAuthID = localStorage.getItem('loginId')\r\n\r\nconst ToastContent = ({ name, role }) => (\r\n  <Fragment>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='warning' icon={<Coffee size={12} />} />\r\n        <h6 className='toast-title font-weight-bold' style={{color:\"#ffffff\"}}> {name}</h6>\r\n      </div>\r\n    </div>\r\n    {/* <div className='toastify-body'>\r\n      <span>You have successfully logged in as an {role}. Now you can start to explore. Enjoy!</span>\r\n    </div> */}\r\n  </Fragment>\r\n)\r\n\r\nconst Login = props => {\r\n  const [skin, setSkin] = useSkin()\r\n  const ability = useContext(AbilityContext)\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const [phone, setPhone] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [mobileexist, setExistMobile] = useState()\r\nconst [logindata, setLoginData] = useState()\r\n  const { register, errors, handleSubmit } = useForm()\r\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\r\n    source = require(`@src/assets/images/pages/${illustration}`).default\r\n\r\nconsole.log(phone)\r\nconsole.log(mobileexist)\r\n\r\nif (mobileexist && mobileexist.data && mobileexist.data.data && mobileexist.data.data.password === null) {\r\n  const sendotp = 'http://172.105.49.15:3030/api/user/send_otp'\r\n  axios.post(sendotp, {\r\n    mobile_number: phone.toString()\r\n  })\r\n  .then(r => {\r\n    console.log(r)\r\n    toast(\r\n      <ToastContent name={r.data.message} role={''} />,\r\n        { transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n    )\r\n    props.history.push({pathname:'/login-otp',\r\n  state:{\r\n    id : mobileexist.data.data._id,\r\n    mobile : phone\r\n  }\r\n})\r\n    // setExistMobile(r)\r\n  })\r\n } \r\nconst handlePhone = (e) => {\r\n  setPhone(e.target.value)\r\n  e.preventDefault()\r\n}\r\n\r\n  const checkmobiurl = 'http://172.105.49.15:3030/api/user/check_mobile_number_exist'\r\n  useEffect(() => {\r\n    axios.post(checkmobiurl, {\r\n      mobile_number: phone.toString()\r\n    })\r\n    .then(r => {\r\n      console.log(r)\r\n      setExistMobile(r)\r\n    })\r\n  }, [phone])\r\n\r\n    // localStorage.setItem('loginId', mobileexist && mobileexist.data && mobileexist.data._id)\r\n\r\nconst authIdToken = \"\"\r\n  const onSubmit = (data) => {\r\n    setLoginData(data)\r\n    if (mobileexist && mobileexist.data && mobileexist.data.data && mobileexist.data.data.password !== null) {\r\n    dispatch(handleLogin(data, props))\r\n    }\r\n    data = {role : \"admin\"}\r\n    history.push(getHomeRouteForLoggedInUser(data.role))\r\n    // dispatch(handleLogin(data, props))\r\n    // if (isObjEmpty(errors)) {\r\n    //   useJwt\r\n    //     .login({ phone, password })\r\n    //     .then(res => {\r\n    //       const data = { ...res.data.userData, accessToken: res.data.accessToken, refreshToken: res.data.refreshToken }\r\n    //       // dispatch(handleLogin(data))\r\n    //       ability.update(res.data.userData.ability)\r\n    //       // toast.success(\r\n    //       //   <ToastContent name={data.fullName || data.username || 'John Doe'} role={data.role || 'admin'} />,\r\n    //       //   { transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n    //       // )\r\n    //     })\r\n    //     .catch(err => {\r\n    //       console.log(err.message)\r\n    //       toast.error(\r\n    //         <ToastContent name={\"Incorrect user number or password\"} role={''} />,\r\n    //           { transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n    //       )\r\n    //     })\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <div className='auth-wrapper auth-v2'>\r\n      <Row className='auth-inner m-0'>\r\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\r\n          {/* <svg viewBox='0 0 139 95' version='1.1' height='28'>\r\n            <defs>\r\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\r\n                <stop stopColor='#000000' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\r\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n            </defs>\r\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\r\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\r\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\r\n                  <path\r\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\r\n                    id='Path'\r\n                    className='text-primary'\r\n                    style={{ fill: 'currentColor' }}\r\n                  ></path>\r\n                  <path\r\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\r\n                    id='Path'\r\n                    fill='url(#linearGradient-1)'\r\n                    opacity='0.2'\r\n                  ></path>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.049999997'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.099999994'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-3'\r\n                    fill='url(#linearGradient-2)'\r\n                    opacity='0.099999994'\r\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\r\n                  ></polygon>\r\n                </g>\r\n              </g>\r\n            </g>\r\n          </svg>\r\n          <h2 className='brand-text text-primary ml-1'>Vuexy</h2> */}\r\n        </Link>\r\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n            <img className='img-fluid' src={source} alt='Login V2' />\r\n          </div>\r\n        </Col>\r\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n            {/* <CardTitle tag='h2' className='font-weight-bold mb-1'>\r\n              Welcome to Vuexy! 👋\r\n            </CardTitle> */}\r\n            <h1 style={{textShadow:\"2px 1px\", color:\"rgb(230,46,45)\", fontSize:\"35px\", fontWeight:300}}> Star Engineers</h1>\r\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\r\n            {/* <Alert color='primary'>\r\n              <div className='alert-body font-small-2'>\r\n                <p>\r\n                  <small className='mr-50'>\r\n                    <span className='font-weight-bold'>Admin:</span> admin@demo.com | admin\r\n                  </small>\r\n                </p>\r\n                <p>\r\n                  <small className='mr-50'>\r\n                    <span className='font-weight-bold'>Client:</span> client@demo.com | client\r\n                  </small>\r\n                </p>\r\n              </div>\r\n              <HelpCircle\r\n                id='login-tip'\r\n                className='position-absolute'\r\n                size={18}\r\n                style={{ top: '10px', right: '10px' }}\r\n              />\r\n              <UncontrolledTooltip target='login-tip' placement='left'>\r\n                This is just for ACL demo purpose.\r\n              </UncontrolledTooltip>\r\n            </Alert> */}\r\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n              <FormGroup>\r\n                <Label className='form-label' for='login-phone'>\r\n                Mobile Number\r\n                </Label>\r\n                <Input\r\n                  autoFocus\r\n                  type='text'\r\n                  value={phone}\r\n                  id='login_phone'\r\n                  name='login_phone'\r\n                  placeholder='Enter Mobile Number'\r\n                  maxLength=\"10\"\r\n                  onChange={e => handlePhone(e)}\r\n                  // className={classnames({ 'is-invalid': errors['login_phone'] })}\r\n                  innerRef={register({ \r\n                    required: true,\r\n                    pattern:{value:/[1-9]{1}[0-9]{9}/,\r\n                    message:\"please enter your 10 digit mobile number\"}\r\n                 })}\r\n                />\r\n                 {/* {errors.login_phone && <p style={{color:\"red\"}}>{errors.login_phone.message}</p>} */}\r\n                 {errors.login_phone && errors.login_phone.type === 'required' && <p style={{color:\"red\"}}>Mobile Number is require</p>}\r\n                 {/* {  phone ? mobileexist && mobileexist.data && mobileexist.data.data === null ? <p style={{color:\"red\"}}>Mobile Number Not Exist</p> : \"\" : \"\"} */}\r\n              </FormGroup> \r\n\r\n              { mobileexist && mobileexist.data && mobileexist.data.data && mobileexist.data.data.password !== null ? <FormGroup>\r\n                <div className='d-flex justify-content-between'>\r\n                  <Label className='form-label' for='login-password'>\r\n                    Password\r\n                  </Label>\r\n                  {/* <Link to='/forgot-password'>\r\n                    <small>Forgot Password?</small>\r\n                  </Link> */}\r\n                </div>\r\n                <InputPasswordToggle\r\n                  value={password}\r\n                  id='login_password'\r\n                  name='login_password'\r\n                  className='input-group-merge'\r\n                  onChange={e => setPassword(e.target.value)}\r\n                  // className={classnames({ 'is-invalid': errors['login_password'] })}\r\n                  innerRef={register({ \r\n                    required: true,\r\n                    message:\"please enter your valid password\"\r\n                  })}\r\n                />\r\n                  {errors.login_password && <p style={{color:\"red\"}}>{errors.login_password.message}</p>}\r\n              </FormGroup> : \" \"\r\n              }\r\n              {/* <FormGroup>\r\n                <CustomInput type='checkbox' className='custom-control-Primary' id='remember-me' label='Remember Me' />\r\n              </FormGroup> */}\r\n              <Button.Ripple type='submit' color='primary' block>\r\n                Sign in\r\n              </Button.Ripple>\r\n            </Form>\r\n            <p className='text-right mt-2'>\r\n              {/* <span className='mr-25'>New on our platform?</span> */}\r\n              {/* <Link to='/register'> */}\r\n              <Link to='/forgot-password'>\r\n                <span>Forgot Password ?</span>\r\n              </Link>\r\n            </p>\r\n            {/* <div className='divider my-2'>\r\n              <div className='divider-text'>or</div>\r\n            </div>\r\n            <div className='auth-footer-btn d-flex justify-content-center'>\r\n              <Button.Ripple color='facebook'>\r\n                <Facebook size={14} />\r\n              </Button.Ripple>\r\n              <Button.Ripple color='twitter'>\r\n                <Twitter size={14} />\r\n              </Button.Ripple>\r\n              <Button.Ripple color='google'>\r\n                <Mail size={14} />\r\n              </Button.Ripple>\r\n              <Button.Ripple className='mr-0' color='github'>\r\n                <GitHub size={14} />\r\n              </Button.Ripple>\r\n            </div> */}\r\n          </Col>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"],"sourceRoot":""}