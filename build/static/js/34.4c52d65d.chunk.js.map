{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js"],"names":["LoginV1","props","useForm","register","errors","handleSubmit","useState","password","setPassword","dispatch","useDispatch","className","to","onClick","e","preventDefault","src","logo","height","onSubmit","data","console","log","handleLogin","for","autoFocus","type","id","name","placeholder","innerRef","required","pattern","value","message","email_id","style","color","onChange","target","label","remember_me","Ripple","block","InputPasswordToggle","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","classnames","addonType","size","renderIcon","defaultProps","propTypes","tag","tagPropType","inverse","PropTypes","bool","string","body","outline","cssModule","object","oneOfType","func","Card","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","ref","CardBody"],"mappings":"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","file":"static/js/34.4c52d65d.chunk.js","sourcesContent":["// import { useState, useContext, Fragment, useEffect } from 'react'\r\n// import classnames from 'classnames'\r\n// import Avatar from '@components/avatar'\r\n// import { useSkin } from '@hooks/useSkin'\r\n// import useJwt from '@src/auth/jwt/useJwt'\r\n// import { useDispatch } from 'react-redux'\r\n// import { useForm } from 'react-hook-form'\r\n// import { toast, Slide } from 'react-toastify'\r\n// import { handleLogin } from '@store/actions/auth'\r\n// import { AbilityContext } from '@src/utility/context/Can'\r\n// import { Link, useHistory } from 'react-router-dom'\r\n// import InputPasswordToggle from '@components/input-password-toggle'\r\n// import { getHomeRouteForLoggedInUser, isObjEmpty } from '@utils'\r\n// import { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee } from 'react-feather'\r\n// import {\r\n//   Alert,\r\n//   Row,\r\n//   Col,\r\n//   CardTitle,\r\n//   CardText,\r\n//   Form,\r\n//   Input,\r\n//   FormGroup,\r\n//   Label,\r\n//   CustomInput,\r\n//   Button,\r\n//   UncontrolledTooltip\r\n// } from 'reactstrap'\r\n// import axios from 'axios'\r\n// import '@styles/base/pages/page-auth.scss'\r\n// import 'react-toastify/dist/ReactToastify.css'\r\n// import app from '../../../base'\r\n// import { getAuth, signInWithCustomToken } from \"firebase/auth\"\r\n// // import { AuthContext } from '../../../Auth'\r\n// const loginAuthID = localStorage.getItem('loginId')\r\n\r\n// const ToastContent = ({ name, role }) => (\r\n//   <Fragment>\r\n//     <div className='toastify-header'>\r\n//       <div className='title-wrapper'>\r\n//         <Avatar size='sm' color='warning' icon={<Coffee size={12} />} />\r\n//         <h6 className='toast-title font-weight-bold' style={{color:\"#ffffff\"}}> {name}</h6>\r\n//       </div>\r\n//     </div>\r\n//     {/* <div className='toastify-body'>\r\n//       <span>You have successfully logged in as an {role}. Now you can start to explore. Enjoy!</span>\r\n//     </div> */}\r\n//   </Fragment>\r\n// )\r\n\r\n// const Login = props => {\r\n//   const [skin, setSkin] = useSkin()\r\n//   const ability = useContext(AbilityContext)\r\n//   const dispatch = useDispatch()\r\n//   const history = useHistory()\r\n//   const [phone, setPhone] = useState('')\r\n//   const [password, setPassword] = useState('')\r\n//   const [mobileexist, setExistMobile] = useState()\r\n// const [logindata, setLoginData] = useState()\r\n//   const { register, errors, handleSubmit } = useForm()\r\n//   const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\r\n//     source = require(`@src/assets/images/pages/${illustration}`).default\r\n\r\n// console.log(phone)\r\n// console.log(mobileexist)\r\n\r\n// if (mobileexist && mobileexist.data && mobileexist.data.data && mobileexist.data.data.password === null) {\r\n//   const sendotp = 'http://172.105.49.15:3030/api/user/send_otp'\r\n//   axios.post(sendotp, {\r\n//     mobile_number: phone.toString()\r\n//   })\r\n//   .then(r => {\r\n//     console.log(r)\r\n//     toast(\r\n//       <ToastContent name={r.data.message} role={''} />,\r\n//         { transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n//     )\r\n//     props.history.push({pathname:'/login-otp',\r\n//   state:{\r\n//     id : mobileexist.data.data._id,\r\n//     mobile : phone\r\n//   }\r\n// })\r\n//     // setExistMobile(r)\r\n//   })\r\n//  } \r\n// const handlePhone = (e) => {\r\n//   setPhone(e.target.value)\r\n//   e.preventDefault()\r\n// }\r\n\r\n//   const checkmobiurl = 'http://172.105.49.15:3030/api/user/check_mobile_number_exist'\r\n//   useEffect(() => {\r\n//     axios.post(checkmobiurl, {\r\n//       mobile_number: phone.toString()\r\n//     })\r\n//     .then(r => {\r\n//       console.log(r)\r\n//       setExistMobile(r)\r\n//     })\r\n//   }, [phone])\r\n\r\n//     // localStorage.setItem('loginId', mobileexist && mobileexist.data && mobileexist.data._id)\r\n\r\n// const authIdToken = \"\"\r\n//   const onSubmit = (data) => {\r\n//     setLoginData(data)\r\n//     if (mobileexist && mobileexist.data && mobileexist.data.data && mobileexist.data.data.password !== null) {\r\n//     dispatch(handleLogin(data, props))\r\n//     }\r\n//     data = {role : \"admin\"}\r\n//     history.push(getHomeRouteForLoggedInUser(data.role))\r\n//     // dispatch(handleLogin(data, props))\r\n//     // if (isObjEmpty(errors)) {\r\n//     //   useJwt\r\n//     //     .login({ phone, password })\r\n//     //     .then(res => {\r\n//     //       const data = { ...res.data.userData, accessToken: res.data.accessToken, refreshToken: res.data.refreshToken }\r\n//     //       // dispatch(handleLogin(data))\r\n//     //       ability.update(res.data.userData.ability)\r\n//     //       // toast.success(\r\n//     //       //   <ToastContent name={data.fullName || data.username || 'John Doe'} role={data.role || 'admin'} />,\r\n//     //       //   { transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n//     //       // )\r\n//     //     })\r\n//     //     .catch(err => {\r\n//     //       console.log(err.message)\r\n//     //       toast.error(\r\n//     //         <ToastContent name={\"Incorrect user number or password\"} role={''} />,\r\n//     //           { transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n//     //       )\r\n//     //     })\r\n//     // }\r\n//   }\r\n\r\n//   return (\r\n//     <div className='auth-wrapper auth-v2'>\r\n//       <Row className='auth-inner m-0'>\r\n//         <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\r\n//         </Link>\r\n//         <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n//           <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n//             <img className='img-fluid' src={source} alt='Login V2' />\r\n//           </div>\r\n//         </Col>\r\n//         <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n//           <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n//             <h1 style={{textShadow:\"2px 1px\", color:\"rgb(230,46,45)\", fontSize:\"35px\", fontWeight:300}}> Star Engineers</h1>\r\n//             <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\r\n          \r\n//             <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n//               <FormGroup>\r\n//                 <Label className='form-label' for='login-phone'>\r\n//                 Mobile Number\r\n//                 </Label>\r\n//                 <Input\r\n//                   autoFocus\r\n//                   type='text'\r\n//                   value={phone}\r\n//                   id='login_phone'\r\n//                   name='login_phone'\r\n//                   placeholder='Enter Mobile Number'\r\n//                   maxLength=\"10\"\r\n//                   onChange={e => handlePhone(e)}\r\n//                   // className={classnames({ 'is-invalid': errors['login_phone'] })}\r\n//                   innerRef={register({ \r\n//                     required: true,\r\n//                     pattern:{value:/[1-9]{1}[0-9]{9}/,\r\n//                     message:\"please enter your 10 digit mobile number\"}\r\n//                  })}\r\n//                 />\r\n//                  {/* {errors.login_phone && <p style={{color:\"red\"}}>{errors.login_phone.message}</p>} */}\r\n//                  {errors.login_phone && errors.login_phone.type === 'required' && <p style={{color:\"red\"}}>Mobile Number is require</p>}\r\n//                  {/* {  phone ? mobileexist && mobileexist.data && mobileexist.data.data === null ? <p style={{color:\"red\"}}>Mobile Number Not Exist</p> : \"\" : \"\"} */}\r\n//               </FormGroup> \r\n\r\n//               { mobileexist && mobileexist.data && mobileexist.data.data && mobileexist.data.data.password !== null ? <FormGroup>\r\n//                 <div className='d-flex justify-content-between'>\r\n//                   <Label className='form-label' for='login-password'>\r\n//                     Password\r\n//                   </Label>\r\n                 \r\n//                 </div>\r\n//                 <InputPasswordToggle\r\n//                   value={password}\r\n//                   id='login_password'\r\n//                   name='login_password'\r\n//                   className='input-group-merge'\r\n//                   onChange={e => setPassword(e.target.value)}\r\n//                   // className={classnames({ 'is-invalid': errors['login_password'] })}\r\n//                   innerRef={register({ \r\n//                     required: true,\r\n//                     message:\"please enter your valid password\"\r\n//                   })}\r\n//                 />\r\n//                   {errors.login_password && <p style={{color:\"red\"}}>{errors.login_password.message}</p>}\r\n//               </FormGroup> : \" \"\r\n//               }\r\n             \r\n//               <Button.Ripple type='submit' color='primary' block>\r\n//                 Sign in\r\n//               </Button.Ripple>\r\n//             </Form>\r\n//             <p className='text-right mt-2'>\r\n       \r\n//               <Link to='/forgot-password'>\r\n//                 <span>Forgot Password ?</span>\r\n//               </Link>\r\n//             </p>\r\n          \r\n//           </Col>\r\n//         </Col>\r\n//       </Row>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default Login\r\n\r\nimport { useState, useContext, Fragment, useEffect } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { Facebook, Twitter, Mail, GitHub } from 'react-feather'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\nimport { Card, CardBody, CardTitle, CardText, Form, FormGroup, Label, Input, CustomInput, Button } from 'reactstrap'\r\nimport '@styles/base/pages/page-auth.scss'\r\nimport logo  from '../../../Images/logo.svg'\r\nimport { useForm } from 'react-hook-form'\r\nimport { handleLogin } from '@store/actions/auth'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getHomeRouteForLoggedInUser, isObjEmpty } from '@utils'\r\n\r\nconst LoginV1 = props => {\r\n  const { register, errors, handleSubmit } = useForm()\r\n    const [password, setPassword] = useState('')\r\n  const dispatch = useDispatch()\r\n\r\n  const onSubmit = (data) => {\r\n    console.log(data)\r\n    // setLoginData(data)\r\n    // if (mobileexist && mobileexist.data && mobileexist.data.data && mobileexist.data.data.password !== null) {\r\n    dispatch(handleLogin(data, props))\r\n    // }\r\n\r\n    // data = {role : \"admin\"}\r\n    // history.push(getHomeRouteForLoggedInUser(data.role))\r\n\r\n  }\r\n\r\n  return (\r\n    <div className='auth-wrapper auth-v1 px-2'>\r\n      <div className='auth-inner py-2'>\r\n        <Card className='mb-0' >\r\n          <CardBody>\r\n            <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\r\n              <img src={logo}  height=\"40px\" ></img>\r\n            {/* {logo} */}\r\n              {/* <h2 className='brand-text text-primary ml-1'>Vuexy</h2> */}\r\n            </Link>\r\n            {/* <CardTitle tag='h4' className='mb-1'>\r\n              Welcome to Vuexy! 👋\r\n            </CardTitle> */}\r\n            {/* <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText> */}\r\n\r\n            <Form className='auth-login-form mt-2'  onSubmit={handleSubmit(onSubmit)}>\r\n              <FormGroup>\r\n                <Label className='form-label' for='email-id'> Email </Label>\r\n                <Input\r\n                  autoFocus\r\n                  type='text'\r\n                  id='email_id'\r\n                  name='email_id'\r\n                  placeholder='Enter register email-id'\r\n                  innerRef={register({ \r\n                    required: true,\r\n                    pattern: {\r\n                      value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n                      message: 'Please enter a valid email'\r\n                  }\r\n                 })} />\r\n                  {errors.email_id && <p style={{color:\"red\"}}>{errors.email_id.message}</p>}  \r\n\r\n                 {/* {errors.email_id && errors.email_id.type === 'required' && <p style={{color:\"red\"}}>Please Enter email-id</p>} */}\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <div className='d-flex justify-content-between'>\r\n                  <Label className='form-label' for='login-password'>\r\n                    Password\r\n                  </Label>\r\n                </div>\r\n                <InputPasswordToggle\r\n                  value={password}\r\n                  id='password'\r\n                  name='password'\r\n                  // className='input-group-merge'\r\n                  onChange={e => setPassword(e.target.value)}\r\n                  // className={classnames({ 'is-invalid': errors['password'] })}\r\n                  innerRef={register({ required: true, message:\"please enter your valid password\" })}\r\n                />\r\n               \r\n                  {errors.password && <p style={{color:\"red\"}}>Please enter your valid password</p>}  \r\n                </FormGroup>\r\n              <FormGroup >\r\n                <div>\r\n                  <span className=\"d-flex\">\r\n                <CustomInput type='checkbox' className='custom-control-Primary' id='remember_me' name=\"remember_me\"\r\n                innerRef={register({ required: true, message:\"please select\" })}\r\n                 label='' /><label >By continuing you agree to <Link to='/' style={{color:\"#ed1d25\" }}>\r\n                <span>Terms & Conditions</span> </Link></label>\r\n                </span>\r\n                {errors.remember_me && <p style={{color:\"red\"}}>Are you agree terms and condition ? </p>}  \r\n\r\n                </div>\r\n                \r\n\r\n              </FormGroup>\r\n\r\n              <Button.Ripple   type='submit' className=\"sign_in_btn\" block>\r\n                Sign in\r\n              </Button.Ripple>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginV1\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { mapToCssModules, tagPropType } from './utils';\r\nvar propTypes = {\r\n  tag: tagPropType,\r\n  inverse: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  body: PropTypes.bool,\r\n  outline: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\r\n};\r\nvar defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nvar Card = function Card(props) {\r\n  var className = props.className,\r\n      cssModule = props.cssModule,\r\n      color = props.color,\r\n      body = props.body,\r\n      inverse = props.inverse,\r\n      outline = props.outline,\r\n      Tag = props.tag,\r\n      innerRef = props.innerRef,\r\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\r\n\r\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\r\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\r\n    className: classes,\r\n    ref: innerRef\r\n  }));\r\n};\r\n\r\nCard.propTypes = propTypes;\r\nCard.defaultProps = defaultProps;\r\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { mapToCssModules, tagPropType } from './utils';\r\nvar propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\r\n};\r\nvar defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nvar CardBody = function CardBody(props) {\r\n  var className = props.className,\r\n      cssModule = props.cssModule,\r\n      innerRef = props.innerRef,\r\n      Tag = props.tag,\r\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\r\n\r\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\r\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\r\n    className: classes,\r\n    ref: innerRef\r\n  }));\r\n};\r\n\r\nCardBody.propTypes = propTypes;\r\nCardBody.defaultProps = defaultProps;\r\nexport default CardBody;"],"sourceRoot":""}