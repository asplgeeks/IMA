{"version":3,"sources":["views/pages/authentication/SetPassword.js","@core/components/input-password-toggle/index.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/CardBody.js","../node_modules/reactstrap/es/CardTitle.js"],"names":["ResetPassword","props","useSkin","skin","dispatch","useDispatch","useForm","register","errors","handleSubmit","watch","illustration","source","require","default","password","useRef","current","console","log","className","lg","sm","src","alt","md","tag","onSubmit","data","CreatePassword","for","name","innerRef","required","minLength","value","message","id","autoFocus","style","color","validate","password_repeat","Ripple","type","block","InputPasswordToggle","label","hideIcon","showIcon","visible","htmlFor","placeholder","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","classnames","addonType","onClick","size","renderIcon","defaultProps","propTypes","tagPropType","inverse","PropTypes","bool","string","body","outline","cssModule","object","oneOfType","func","Card","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","ref","CardBody","CardTitle"],"mappings":"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","file":"static/js/33.3ccb3fd4.chunk.js","sourcesContent":["import React, { useRef } from \"react\"\r\nimport { Link } from 'react-router-dom'\r\nimport { ChevronLeft } from 'react-feather'\r\nimport { useSkin } from '@hooks/useSkin'\r\nimport classnames from 'classnames'\r\nimport { CreatePassword } from '@store/actions/auth'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport InputPassword from '@components/input-password-toggle'\r\nimport { Card, CardBody, Row, Col, CardTitle, CardText, Form, FormGroup, Label, Button } from 'reactstrap'\r\nimport '@styles/base/pages/page-auth.scss'\r\n\r\n\r\nconst ResetPassword = (props) => {\r\n    const [skin, setSkin] = useSkin()\r\n    const dispatch = useDispatch()\r\n    const { register, errors, handleSubmit, watch } = useForm({})\r\n    const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\r\nsource = require(`@src/assets/images/pages/${illustration}`).default\r\nconst password = useRef({})\r\npassword.current = watch(\"password\", \"\")\r\nconst onSubmit = data => {\r\n    console.log(data)\r\n    dispatch(CreatePassword(data, props))\r\n// history.push('/forgot-password')\r\n  }\r\nconsole.log(props)\r\n  return (\r\n    <div className='auth-wrapper auth-v2 '>\r\n      <Row className='auth-inner mb-0'>\r\n      <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n            <img className='img-fluid' src={source} alt='Login V2' />\r\n          </div>\r\n        </Col>\r\n      <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n        <Card className='mb-0'>\r\n          <CardBody>\r\n            <CardTitle tag='h4' className='mb-1'>\r\n              Reset Password ðŸ”’\r\n            </CardTitle>\r\n            <CardText className='mb-2'>Your new password must be different from previously used passwords</CardText>\r\n            <Form className='auth-reset-password-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n              <FormGroup>\r\n                <Label className='form-label' for='new-password'>\r\n                  New Password\r\n                </Label>\r\n                <InputPassword \r\n                // className='input-group-merge'\r\n                name=\"password\"\r\n                    //  className={classnames({ 'is-invalid': errors['login_password'] })}\r\n                     innerRef={register({\r\n                        required: \"You must specify a password\",\r\n                        minLength: {\r\n                          value: 8,\r\n                          message: \"Password must have at least 8 characters\"\r\n                        }\r\n                      })}\r\n                id='new-password' \r\n                autoFocus />\r\n                      {errors.password && <p style={{color : \"red\"}}>{errors.password.message}</p>}\r\n\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label className='form-label' for='confirm-password'>\r\n                  Confirm Password\r\n                </Label>\r\n                <InputPassword\r\n                //  className='input-group-merge'\r\n                 name=\"password_repeat\"\r\n                //  className={classnames({ 'is-invalid': errors['login_password'] })}\r\n                innerRef={register({\r\n                    validate: value => value === password.current || \"The passwords does not match\"\r\n                  })}\r\n                  id='confirm-password' />\r\n                        {errors.password_repeat && <p style={{color : \"red\"}}>{errors.password_repeat.message}</p>}\r\n\r\n              </FormGroup>\r\n              <Button.Ripple color='primary' type=\"submit\" block>\r\n                Set New Password\r\n              </Button.Ripple>\r\n            </Form>\r\n            {/* <p className='text-center mt-2'>\r\n              <Link to='/pages/login-v1'>\r\n                <ChevronLeft className='mr-25' size={14} />\r\n                <span className='align-middle'>Back to login</span>\r\n              </Link>\r\n            </p> */}\r\n          </CardBody>\r\n        </Card>\r\n        </Col>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPassword","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : 'Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·Â·'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { mapToCssModules, tagPropType } from './utils';\r\nvar propTypes = {\r\n  tag: tagPropType,\r\n  inverse: PropTypes.bool,\r\n  color: PropTypes.string,\r\n  body: PropTypes.bool,\r\n  outline: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\r\n};\r\nvar defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nvar Card = function Card(props) {\r\n  var className = props.className,\r\n      cssModule = props.cssModule,\r\n      color = props.color,\r\n      body = props.body,\r\n      inverse = props.inverse,\r\n      outline = props.outline,\r\n      Tag = props.tag,\r\n      innerRef = props.innerRef,\r\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\r\n\r\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\r\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\r\n    className: classes,\r\n    ref: innerRef\r\n  }));\r\n};\r\n\r\nCard.propTypes = propTypes;\r\nCard.defaultProps = defaultProps;\r\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { mapToCssModules, tagPropType } from './utils';\r\nvar propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\r\n};\r\nvar defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nvar CardBody = function CardBody(props) {\r\n  var className = props.className,\r\n      cssModule = props.cssModule,\r\n      innerRef = props.innerRef,\r\n      Tag = props.tag,\r\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"innerRef\", \"tag\"]);\r\n\r\n  var classes = mapToCssModules(classNames(className, 'card-body'), cssModule);\r\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\r\n    className: classes,\r\n    ref: innerRef\r\n  }));\r\n};\r\n\r\nCardBody.propTypes = propTypes;\r\nCardBody.defaultProps = defaultProps;\r\nexport default CardBody;","import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { mapToCssModules, tagPropType } from './utils';\r\nvar propTypes = {\r\n  tag: tagPropType,\r\n  className: PropTypes.string,\r\n  cssModule: PropTypes.object\r\n};\r\nvar defaultProps = {\r\n  tag: 'div'\r\n};\r\n\r\nvar CardTitle = function CardTitle(props) {\r\n  var className = props.className,\r\n      cssModule = props.cssModule,\r\n      Tag = props.tag,\r\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\r\n\r\n  var classes = mapToCssModules(classNames(className, 'card-title'), cssModule);\r\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\r\n    className: classes\r\n  }));\r\n};\r\n\r\nCardTitle.propTypes = propTypes;\r\nCardTitle.defaultProps = defaultProps;\r\nexport default CardTitle;"],"sourceRoot":""}