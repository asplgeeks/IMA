{"version":3,"sources":["views/pages/authentication/Otp.js","@core/components/input-password-toggle/index.js"],"names":["withRouter","props","useSkin","skin","dispatch","useContext","AbilityContext","useDispatch","history","useHistory","useState","location","state","login_phone","count","setCount","password","setOtp","setExistMobile","console","log","intervalId","useForm","register","errors","handleSubmit","illustration","source","require","default","useEffect","setInterval","counter","className","lg","sm","src","alt","md","onSubmit","data","SendOtp","for","value","id","name","maxLength","placeholder","onChange","e","target","classnames","required","pattern","message","style","display","onClick","clearInterval","push","axios","post","mobile_number","mobile","then","r","color","Ripple","type","block","InputPasswordToggle","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","addonType","size","renderIcon","defaultProps"],"mappings":"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","file":"static/js/39.d86e0ac0.chunk.js","sourcesContent":["import { useState, useContext, Fragment, useEffect } from 'react'\r\nimport classnames from 'classnames'\r\nimport Avatar from '@components/avatar'\r\nimport { useSkin } from '@hooks/useSkin'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm } from 'react-hook-form'\r\nimport { toast, Slide } from 'react-toastify'\r\nimport { SendOtp } from '@store/actions/auth'\r\nimport { AbilityContext } from '@src/utility/context/Can'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\nimport { withRouter } from 'react-router'\r\nimport { getHomeRouteForLoggedInUser, isObjEmpty } from '@utils'\r\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee } from 'react-feather'\r\nimport {\r\n  Alert,\r\n  Row,\r\n  Col,\r\n  CardTitle,\r\n  CardText,\r\n  Form,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  CustomInput,\r\n  Button,\r\n  UncontrolledTooltip\r\n} from 'reactstrap'\r\nimport axios from 'axios'\r\nimport '@styles/base/pages/page-auth.scss'\r\n\r\nconst ToastContent = ({ name, role }) => (\r\n  <Fragment>\r\n    <div className='toastify-header'>\r\n      <div className='title-wrapper'>\r\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\r\n        <h6 className='toast-title font-weight-bold'>Welcome, {name}</h6>\r\n      </div>\r\n    </div>\r\n    {/* <div className='toastify-body'>\r\n      <span>You have successfully logged in as an {role}. Now you can start to explore. Enjoy!</span>\r\n    </div> */}\r\n  </Fragment>\r\n)\r\n\r\nconst OtpCreator = props => {\r\n  const [skin, setSkin] = useSkin()\r\n  const ability = useContext(AbilityContext)\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n  const [phone, setPhone] = useState(props && props.location && props.location.state && props.location.state.login_phone)\r\n  const [count, setCount] = useState(50)\r\n  const [password, setOtp] = useState('')\r\n  const [existmobile, setExistMobile] = useState('')\r\nconsole.log(props)\r\n  const { register, errors, handleSubmit } = useForm()\r\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\r\n    source = require(`@src/assets/images/pages/${illustration}`).default\r\n    let intervalId\r\n\r\n// console.log(props.location.state.login_phone)\r\n    const resend = () => {\r\n      clearInterval(intervalId)\r\n      setCount(30)\r\n    history.push('/otp')\r\n    axios.post(`http://172.105.49.15:3030/api/user/check_mobile_number_exist`, {\r\n    mobile_number:props.location.state.mobile\r\n    // password:data.password\r\n})\r\n.then(r => { \r\n  console.log(r)\r\n  setExistMobile(r)\r\n   if (r.data !== null) {\r\n    axios.post(`http://172.105.49.15:3030/api/user/send_otp`, {\r\n      mobile_number:props.location.state.mobile\r\n      // password:data.password\r\n  })\r\n  .then(r => {\r\n    console.log(r)\r\n  })\r\n  // props.history.push('/otp')\r\n  // alert(\"We will send you a OTP to verify user\")\r\n  // toast.success(\r\n  //   <ToastContent name={ 'We will send you a OTP to verify user'}  />,\r\n  //   { transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n  // )\r\n\r\n  } else {\r\n    // alert(\"Mobile number not exist\")\r\n  }\r\n  })\r\n    }\r\n  \r\n// useEffect(() => {\r\n\r\n// axios.post(`http://172.105.49.15:3030/api/user/check_mobile_number_exist`, {\r\n//     mobile_number:phone\r\n//     // password:data.password\r\n// })\r\n// .then(r => { \r\n//   console.log(r)\r\n//   setExistMobile(r)\r\n//    if (r.data !== null) {\r\n//     axios.post(`http://172.105.49.15:3030/api/user/send_otp`, {\r\n//       mobile_number:phone\r\n//       // password:data.password\r\n//   })\r\n//   .then(r => {\r\n//     console.log(r)\r\n//   })\r\n//   props.history.push('/otp')\r\n//   toast.success(\r\n//     <ToastContent name={ 'We will send you a OTP to verify user'} role={ 'admin'} />,\r\n//     { transition: Slide, hideProgressBar: true, autoClose: 2000 }\r\n//   )\r\n\r\n//   } else {\r\n//     // alert(\"Mobile number not exist\")\r\n//   }\r\n//   })\r\n// }, [phone])\r\nuseEffect(() => {\r\n  intervalId = setInterval(() => setCount(counter => counter - 1), 1000)\r\n}, [setCount])\r\n// console.log(count, intervalId)\r\nif (count === -1) {\r\n  // resend()\r\n  setCount(0)\r\n}\r\n  const onSubmit = data => {\r\n    dispatch(SendOtp(data, props))\r\n// history.push('/forgot-password')\r\n  }\r\n\r\n  return (\r\n    <div className='auth-wrapper auth-v2'>\r\n      <Row className='auth-inner m-0'>\r\n      <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n            <img className='img-fluid' src={source} alt='Login V2' />\r\n          </div>\r\n        </Col>\r\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n            <CardText className='mb-2'>We will send you a OTP to verify user.</CardText>\r\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n            {/* <FormGroup>\r\n                  <Label className='form-label' for='login-email'>\r\n                   Mobile Number\r\n                  </Label>\r\n                  <Input\r\n                  autoFocus\r\n                  type='phone'\r\n                  value={phone}\r\n                  id='login_phone'\r\n                  name='login_phone'\r\n                  placeholder='Your Phone'\r\n                  onChange={e => setPhone(e.target.value)}\r\n                  className={classnames({ 'is-invalid': errors['login_phone'] })}\r\n                  innerRef={register({ \r\n                    required: true,\r\n                     validate: value => value !== '',\r\n                     pattern:{value:/^\\d{10}$/,\r\n                                message:\"please enter your 10 digit phone number\"}\r\n                               })}\r\n                />\r\n                </FormGroup> */}\r\n     <FormGroup>\r\n                <div className='d-flex justify-content-between'>\r\n                  <Label className='form-label' for='login-password'>\r\n                    OTP\r\n                  </Label>\r\n                  {/* <Link to='/forgot-password'>\r\n                    <small>Forgot Password?</small>\r\n                  </Link> */}\r\n                </div>\r\n                <Input\r\n                  value={password}\r\n                  id='login_otp'\r\n                  name='login_otp'\r\n                  maxLength={6}\r\n                  className='input-group-merge'\r\n                  placeholder=\"Enter Your OTP\"\r\n                  onChange={e => setOtp(e.target.value)}\r\n                  className={classnames({ 'is-invalid': errors['login_otp'] })}\r\n                  innerRef={register({ \r\n                    required: true,\r\n                          pattern:{value:/^\\d{6}$/,\r\n                                message:\"please enter your 6 digit otp\"}})}\r\n                />\r\n              </FormGroup> \r\n              {/* <FormGroup>\r\n                <CustomInput type='checkbox' className='custom-control-Primary' id='remember-me' label='Remember Me' />\r\n              </FormGroup> */}\r\n            \r\n              {count === 0 ?  <div style={{display:\"flex\"}}>\r\n             <h5> Didn't receive the otp ?</h5><h4 onClick={resend} style={{color:\"red\"}}>Resend OTP</h4>\r\n             </div> : <Button.Ripple type='submit' color='primary' block>\r\n               Enter OTP\r\n              </Button.Ripple>}\r\n            </Form>\r\n            <h5 className='text-right mt-2'>00:{count}</h5>\r\n            <p >\r\n              {/* <span className='mr-25'>New on our platform?</span> */}\r\n              {/* <Link to='/register'> */}\r\n              {/* <Link to='/forgot-password'>\r\n                <span>Forgot Password ?</span>\r\n              </Link> */}\r\n            \r\n            </p>\r\n\r\n          </Col>\r\n        </Col>\r\n\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(OtpCreator)","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"],"sourceRoot":""}