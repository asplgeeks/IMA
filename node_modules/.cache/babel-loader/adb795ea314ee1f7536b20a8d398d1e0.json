{"ast":null,"code":"import _classCallCheck from \"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/*\r\n * Copyright 2015, Yahoo Inc.\r\n * Copyrights licensed under the New BSD License.\r\n * See the accompanying LICENSE file for terms.\r\n */\nimport * as React from 'react';\nimport { Provider } from './injectIntl';\nimport { createError, DEFAULT_INTL_CONFIG, createFormatters, invariantIntlContext, createIntlCache } from '../utils';\nimport areIntlLocalesSupported from 'intl-locales-supported';\nimport { formatNumber, formatNumberToParts } from '../formatters/number';\nimport { formatRelativeTime } from '../formatters/relativeTime';\nimport { formatDate, formatTime, formatDateToParts, formatTimeToParts } from '../formatters/dateTime';\nimport { formatPlural } from '../formatters/plural';\nimport { formatMessage, formatHTMLMessage } from '../formatters/message';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nimport { formatList } from '../formatters/list';\nvar shallowEquals = shallowEquals_.default || shallowEquals_;\n\nfunction processIntlConfig(config) {\n  return {\n    locale: config.locale,\n    timeZone: config.timeZone,\n    formats: config.formats,\n    textComponent: config.textComponent,\n    messages: config.messages,\n    defaultLocale: config.defaultLocale,\n    defaultFormats: config.defaultFormats,\n    onError: config.onError\n  };\n}\n/**\r\n * Create intl object\r\n * @param config intl config\r\n * @param cache cache for formatter instances to prevent memory leak\r\n */\n\n\nexport function createIntl(config, cache) {\n  var formatters = createFormatters(cache);\n  var resolvedConfig = Object.assign(Object.assign({}, DEFAULT_INTL_CONFIG), config);\n\n  if (!resolvedConfig.locale || !areIntlLocalesSupported(resolvedConfig.locale)) {\n    var locale = resolvedConfig.locale,\n        defaultLocale = resolvedConfig.defaultLocale,\n        onError = resolvedConfig.onError;\n\n    if (typeof onError === 'function') {\n      onError(createError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\". \") + \"Using default locale: \\\"\".concat(defaultLocale, \"\\\" as fallback.\")));\n    } // Since there's no registered locale data for `locale`, this will\n    // fallback to the `defaultLocale` to make sure things can render.\n    // The `messages` are overridden to the `defaultProps` empty object\n    // to maintain referential equality across re-renders. It's assumed\n    // each <FormattedMessage> contains a `defaultMessage` prop.\n\n\n    resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n  }\n\n  return Object.assign(Object.assign({}, resolvedConfig), {\n    formatters: formatters,\n    formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat),\n    formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat),\n    formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat),\n    formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules),\n    formatMessage: formatMessage.bind(null, resolvedConfig, formatters),\n    formatHTMLMessage: formatHTMLMessage.bind(null, resolvedConfig, formatters),\n    formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat)\n  });\n}\n\nvar IntlProvider = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(IntlProvider, _React$PureComponent);\n\n  var _super = _createSuper(IntlProvider);\n\n  function IntlProvider() {\n    var _this;\n\n    _classCallCheck(this, IntlProvider);\n\n    _this = _super.apply(this, arguments);\n    _this.cache = createIntlCache();\n    _this.state = {\n      cache: _this.cache,\n      intl: createIntl(processIntlConfig(_this.props), _this.cache),\n      prevConfig: processIntlConfig(_this.props)\n    };\n    return _this;\n  }\n\n  _createClass(IntlProvider, [{\n    key: \"render\",\n    value: function render() {\n      invariantIntlContext(this.state.intl);\n      return React.createElement(Provider, {\n        value: this.state.intl\n      }, this.props.children);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, _ref) {\n      var prevConfig = _ref.prevConfig,\n          cache = _ref.cache;\n      var config = processIntlConfig(props);\n\n      if (!shallowEquals(prevConfig, config)) {\n        return {\n          intl: createIntl(config, cache),\n          prevConfig: config\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return IntlProvider;\n}(React.PureComponent);\n\nexport { IntlProvider as default };\nIntlProvider.displayName = 'IntlProvider';\nIntlProvider.defaultProps = DEFAULT_INTL_CONFIG;","map":{"version":3,"sources":["D:/nodejs/IMA/node_modules/react-intl/lib/components/provider.js"],"names":["React","Provider","createError","DEFAULT_INTL_CONFIG","createFormatters","invariantIntlContext","createIntlCache","areIntlLocalesSupported","formatNumber","formatNumberToParts","formatRelativeTime","formatDate","formatTime","formatDateToParts","formatTimeToParts","formatPlural","formatMessage","formatHTMLMessage","shallowEquals_","formatList","shallowEquals","default","processIntlConfig","config","locale","timeZone","formats","textComponent","messages","defaultLocale","defaultFormats","onError","createIntl","cache","formatters","resolvedConfig","Object","assign","bind","getNumberFormat","getRelativeTimeFormat","getDateTimeFormat","getPluralRules","getListFormat","IntlProvider","arguments","state","intl","props","prevConfig","createElement","value","children","PureComponent","displayName","defaultProps"],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2015, Yahoo Inc.\r\n * Copyrights licensed under the New BSD License.\r\n * See the accompanying LICENSE file for terms.\r\n */\r\nimport * as React from 'react';\r\nimport { Provider } from './injectIntl';\r\nimport { createError, DEFAULT_INTL_CONFIG, createFormatters, invariantIntlContext, createIntlCache, } from '../utils';\r\nimport areIntlLocalesSupported from 'intl-locales-supported';\r\nimport { formatNumber, formatNumberToParts } from '../formatters/number';\r\nimport { formatRelativeTime } from '../formatters/relativeTime';\r\nimport { formatDate, formatTime, formatDateToParts, formatTimeToParts, } from '../formatters/dateTime';\r\nimport { formatPlural } from '../formatters/plural';\r\nimport { formatMessage, formatHTMLMessage } from '../formatters/message';\r\nimport * as shallowEquals_ from 'shallow-equal/objects';\r\nimport { formatList } from '../formatters/list';\r\nconst shallowEquals = shallowEquals_.default || shallowEquals_;\r\nfunction processIntlConfig(config) {\r\n    return {\r\n        locale: config.locale,\r\n        timeZone: config.timeZone,\r\n        formats: config.formats,\r\n        textComponent: config.textComponent,\r\n        messages: config.messages,\r\n        defaultLocale: config.defaultLocale,\r\n        defaultFormats: config.defaultFormats,\r\n        onError: config.onError,\r\n    };\r\n}\r\n/**\r\n * Create intl object\r\n * @param config intl config\r\n * @param cache cache for formatter instances to prevent memory leak\r\n */\r\nexport function createIntl(config, cache) {\r\n    const formatters = createFormatters(cache);\r\n    const resolvedConfig = Object.assign(Object.assign({}, DEFAULT_INTL_CONFIG), config);\r\n    if (!resolvedConfig.locale ||\r\n        !areIntlLocalesSupported(resolvedConfig.locale)) {\r\n        const { locale, defaultLocale, onError } = resolvedConfig;\r\n        if (typeof onError === 'function') {\r\n            onError(createError(`Missing locale data for locale: \"${locale}\". ` +\r\n                `Using default locale: \"${defaultLocale}\" as fallback.`));\r\n        }\r\n        // Since there's no registered locale data for `locale`, this will\r\n        // fallback to the `defaultLocale` to make sure things can render.\r\n        // The `messages` are overridden to the `defaultProps` empty object\r\n        // to maintain referential equality across re-renders. It's assumed\r\n        // each <FormattedMessage> contains a `defaultMessage` prop.\r\n        resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\r\n    }\r\n    return Object.assign(Object.assign({}, resolvedConfig), { formatters, formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), formatMessage: formatMessage.bind(null, resolvedConfig, formatters), formatHTMLMessage: formatHTMLMessage.bind(null, resolvedConfig, formatters), formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat) });\r\n}\r\nexport default class IntlProvider extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.cache = createIntlCache();\r\n        this.state = {\r\n            cache: this.cache,\r\n            intl: createIntl(processIntlConfig(this.props), this.cache),\r\n            prevConfig: processIntlConfig(this.props),\r\n        };\r\n    }\r\n    static getDerivedStateFromProps(props, { prevConfig, cache }) {\r\n        const config = processIntlConfig(props);\r\n        if (!shallowEquals(prevConfig, config)) {\r\n            return {\r\n                intl: createIntl(config, cache),\r\n                prevConfig: config,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n        invariantIntlContext(this.state.intl);\r\n        return React.createElement(Provider, { value: this.state.intl }, this.props.children);\r\n    }\r\n}\r\nIntlProvider.displayName = 'IntlProvider';\r\nIntlProvider.defaultProps = DEFAULT_INTL_CONFIG;\r\n"]},"metadata":{},"sourceType":"module"}