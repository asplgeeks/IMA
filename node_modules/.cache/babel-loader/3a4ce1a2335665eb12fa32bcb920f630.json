{"ast":null,"code":"import _toConsumableArray from \"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\n//** React Imports\nimport { useState, useEffect } from 'react'; // ** Configs\n\nimport themeConfig from '@configs/themeConfig';\nexport var useSkin = function useSkin() {\n  _s();\n\n  // ** State\n  var _useState = useState(function () {\n    try {\n      // ** Get from local storage by key\n      var item = window.localStorage.getItem('skin'); // ** Parse stored json or if none return initialValue\n\n      // ** Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : themeConfig.layout.skin;\n    } catch (error) {\n      // ** If error also return initialValue\n      console.log(error);\n      return themeConfig.layout.skin;\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      skin = _useState2[0],\n      setSkin = _useState2[1]; // ** Return a wrapped version of useState's setter function\n\n\n  var setValue = function setValue(value) {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(skin) : value; // ** Set state\n\n      setSkin(valueToStore); // ** Save to local storage\n\n      window.localStorage.setItem('skin', JSON.stringify(valueToStore));\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  useEffect(function () {\n    var _element$classList;\n\n    // ** Get Body Tag\n    var element = window.document.body; // ** Define classnames for skins\n\n    var classNames = {\n      dark: 'dark-layout',\n      bordered: 'bordered-layout',\n      'semi-dark': 'semi-dark-layout'\n    }; // ** Remove all classes from Body on mount\n\n    (_element$classList = element.classList).remove.apply(_element$classList, _toConsumableArray(element.classList)); // ** If skin is not light add skin class\n\n\n    if (skin !== 'light') {\n      element.classList.add(classNames[skin]);\n    }\n  }, [skin]);\n  return [skin, setValue];\n};\n\n_s(useSkin, \"VhOxD9KlpKZGBg1lpPDF2eGz+YU=\");","map":{"version":3,"sources":["D:/nodejs/IMA/src/utility/hooks/useSkin.js"],"names":["useState","useEffect","themeConfig","useSkin","item","window","localStorage","getItem","JSON","parse","layout","skin","error","console","log","setSkin","setValue","value","valueToStore","Function","setItem","stringify","element","document","body","classNames","dark","bordered","classList","remove","add"],"mappings":";;;;;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAC3B;AACA,kBAAwBH,QAAQ,CAAC,YAAM;AACrC,QAAI;AACF;AACA,UAAMI,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAb,CAFE,CAGF;;AAAA;AACA,aAAOH,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBF,WAAW,CAACQ,MAAZ,CAAmBC,IAApD;AACD,KALD,CAKE,OAAOC,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOV,WAAW,CAACQ,MAAZ,CAAmBC,IAA1B;AACD;AACF,GAX+B,CAAhC;AAAA;AAAA,MAAOA,IAAP;AAAA,MAAaI,OAAb,iBAF2B,CAe3B;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxB,QAAI;AACF;AACA,UAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACN,IAAD,CAAjC,GAA0CM,KAA/D,CAFE,CAGF;;AACAF,MAAAA,OAAO,CAACG,YAAD,CAAP,CAJE,CAKF;;AACAb,MAAAA,MAAM,CAACC,YAAP,CAAoBc,OAApB,CAA4B,MAA5B,EAAoCZ,IAAI,CAACa,SAAL,CAAeH,YAAf,CAApC;AACD,KAPD,CAOE,OAAON,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAZD;;AAcAX,EAAAA,SAAS,CAAC,YAAM;AAAA;;AACd;AACA,QAAMqB,OAAO,GAAGjB,MAAM,CAACkB,QAAP,CAAgBC,IAAhC,CAFc,CAId;;AACA,QAAMC,UAAU,GAAG;AACjBC,MAAAA,IAAI,EAAE,aADW;AAEjBC,MAAAA,QAAQ,EAAE,iBAFO;AAGjB,mBAAa;AAHI,KAAnB,CALc,CAWd;;AACA,0BAAAL,OAAO,CAACM,SAAR,EAAkBC,MAAlB,8CAA4BP,OAAO,CAACM,SAApC,GAZc,CAcd;;;AACA,QAAIjB,IAAI,KAAK,OAAb,EAAsB;AACpBW,MAAAA,OAAO,CAACM,SAAR,CAAkBE,GAAlB,CAAsBL,UAAU,CAACd,IAAD,CAAhC;AACD;AACF,GAlBQ,EAkBN,CAACA,IAAD,CAlBM,CAAT;AAoBA,SAAO,CAACA,IAAD,EAAOK,QAAP,CAAP;AACD,CAnDM;;GAAMb,O","sourcesContent":["//** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** Configs\r\nimport themeConfig from '@configs/themeConfig'\r\n\r\nexport const useSkin = () => {\r\n  // ** State\r\n  const [skin, setSkin] = useState(() => {\r\n    try {\r\n      // ** Get from local storage by key\r\n      const item = window.localStorage.getItem('skin')\r\n      // ** Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : themeConfig.layout.skin\r\n    } catch (error) {\r\n      // ** If error also return initialValue\r\n      console.log(error)\r\n      return themeConfig.layout.skin\r\n    }\r\n  })\r\n\r\n  // ** Return a wrapped version of useState's setter function\r\n  const setValue = value => {\r\n    try {\r\n      // ** Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(skin) : value\r\n      // ** Set state\r\n      setSkin(valueToStore)\r\n      // ** Save to local storage\r\n      window.localStorage.setItem('skin', JSON.stringify(valueToStore))\r\n    } catch (error) {\r\n      // ** A more advanced implementation would handle the error case\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // ** Get Body Tag\r\n    const element = window.document.body\r\n\r\n    // ** Define classnames for skins\r\n    const classNames = {\r\n      dark: 'dark-layout',\r\n      bordered: 'bordered-layout',\r\n      'semi-dark': 'semi-dark-layout'\r\n    }\r\n\r\n    // ** Remove all classes from Body on mount\r\n    element.classList.remove(...element.classList)\r\n\r\n    // ** If skin is not light add skin class\r\n    if (skin !== 'light') {\r\n      element.classList.add(classNames[skin])\r\n    }\r\n  }, [skin])\r\n\r\n  return [skin, setValue]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}