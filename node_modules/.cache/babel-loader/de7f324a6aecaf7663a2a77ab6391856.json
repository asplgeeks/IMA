{"ast":null,"code":"import _objectSpread from\"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import mock from'../mock';import jwt from'jsonwebtoken';var data={users:[{id:1,fullName:'John Doe',username:'johndoe',password:'123123',avatar:require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,phone:\"9623568023\",role:'123123',ability:[{action:'manage',subject:'all'}],extras:{eCommerceCartItemsCount:5}},{id:2,fullName:'Jane Doe',username:'janedoe',password:'client',avatar:require('@src/assets/images/avatars/1-small.png').default,email:'client@demo.com',role:'client',ability:[{action:'read',subject:'ACL'},{action:'read',subject:'Auth'}],extras:{eCommerceCartItemsCount:5}}]};// ! These two secrets shall be in .env file and not in any other file\nvar jwtConfig={secret:'dd5f3089-40c3-403d-af14-d0c228b05cb4',refreshTokenSecret:'7c4c1c50-3230-45bf-9eae-c9b2e401c767',expireTime:'10m',refreshTokenExpireTime:'10m'};mock.onPost('/jwt/login').reply(function(request){var _JSON$parse=JSON.parse(request.data),email=_JSON$parse.email,password=_JSON$parse.password;var error={email:['Something went wrong']};var user=data.users.find(function(u){return u.email===email&&u.password===password;});if(user){try{var accessToken=jwt.sign({id:user.id},jwtConfig.secret,{expiresIn:jwtConfig.expireTime});var refreshToken=jwt.sign({id:user.id},jwtConfig.refreshTokenSecret,{expiresIn:jwtConfig.refreshTokenExpireTime});var userData=_objectSpread({},user);delete userData.password;var response={userData:userData,accessToken:accessToken,refreshToken:refreshToken};return[200,response];}catch(e){error=e;}}else{error={email:['Email or Password is Invalid']};}return[400,{error:error}];});mock.onPost('/jwt/register').reply(function(request){if(request.data.length>0){var _JSON$parse2=JSON.parse(request.data),email=_JSON$parse2.email,password=_JSON$parse2.password,username=_JSON$parse2.username;var isEmailAlreadyInUse=data.users.find(function(user){return user.email===email;});var isUsernameAlreadyInUse=data.users.find(function(user){return user.username===username;});var error={email:isEmailAlreadyInUse?'This email is already in use.':null,username:isUsernameAlreadyInUse?'This username is already in use.':null};if(!error.username&&!error.email){var userData={email:email,password:password,username:username,fullName:'',avatar:null,role:'admin',ability:[{action:'manage',subject:'all'}]};// Add user id\nvar length=data.users.length;var lastIndex=0;if(length){lastIndex=data.users[length-1].id;}userData.id=lastIndex+1;data.users.push(userData);var accessToken=jwt.sign({id:userData.id},jwtConfig.secret,{expiresIn:jwtConfig.expireTime});var user=Object.assign({},userData);delete user['password'];var response={user:user,accessToken:accessToken};return[200,response];}else{return[200,{error:error}];}}});mock.onPost('/jwt/refresh-token').reply(function(request){var _JSON$parse3=JSON.parse(request.data),refreshToken=_JSON$parse3.refreshToken;try{var _jwt$verify=jwt.verify(refreshToken,jwtConfig.refreshTokenSecret),id=_jwt$verify.id;var userData=_objectSpread({},data.users.find(function(user){return user.id===id;}));var newAccessToken=jwt.sign({id:userData.id},jwtConfig.secret,{expiresIn:jwtConfig.expiresIn});var newRefreshToken=jwt.sign({id:userData.id},jwtConfig.refreshTokenSecret,{expiresIn:jwtConfig.refreshTokenExpireTime});delete userData.password;var response={userData:userData,accessToken:newAccessToken,refreshToken:newRefreshToken};return[200,response];}catch(e){var error='Invalid refresh token';return[401,{error:error}];}});","map":{"version":3,"sources":["D:/nodejs/IMA/src/@fake-db/jwt/index.js"],"names":["mock","jwt","data","users","id","fullName","username","password","avatar","require","default","phone","role","ability","action","subject","extras","eCommerceCartItemsCount","email","jwtConfig","secret","refreshTokenSecret","expireTime","refreshTokenExpireTime","onPost","reply","request","JSON","parse","error","user","find","u","accessToken","sign","expiresIn","refreshToken","userData","response","e","length","isEmailAlreadyInUse","isUsernameAlreadyInUse","lastIndex","push","Object","assign","verify","newAccessToken","newRefreshToken"],"mappings":"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","sourcesContent":["import mock from '../mock'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nconst data = {\r\n  users: [\r\n    {\r\n      id: 1,\r\n      fullName: 'John Doe',\r\n      username: 'johndoe',\r\n      password: '123123',\r\n      avatar: require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,\r\n      phone: \"9623568023\",\r\n      role: '123123',\r\n      ability: [\r\n        {\r\n          action: 'manage',\r\n          subject: 'all'\r\n        }\r\n      ],\r\n      extras: {\r\n        eCommerceCartItemsCount: 5\r\n      }\r\n    },\r\n    {\r\n      id: 2,\r\n      fullName: 'Jane Doe',\r\n      username: 'janedoe',\r\n      password: 'client',\r\n      avatar: require('@src/assets/images/avatars/1-small.png').default,\r\n      email: 'client@demo.com',\r\n      role: 'client',\r\n      ability: [\r\n        {\r\n          action: 'read',\r\n          subject: 'ACL'\r\n        },\r\n        {\r\n          action: 'read',\r\n          subject: 'Auth'\r\n        }\r\n      ],\r\n      extras: {\r\n        eCommerceCartItemsCount: 5\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\n// ! These two secrets shall be in .env file and not in any other file\r\nconst jwtConfig = {\r\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\r\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\r\n  expireTime: '10m',\r\n  refreshTokenExpireTime: '10m'\r\n}\r\n\r\nmock.onPost('/jwt/login').reply(request => {\r\n  const { email, password } = JSON.parse(request.data)\r\n\r\n  let error = {\r\n    email: ['Something went wrong']\r\n  }\r\n\r\n  const user = data.users.find(u => u.email === email && u.password === password)\r\n\r\n  if (user) {\r\n    try {\r\n      const accessToken = jwt.sign({ id: user.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\r\n      const refreshToken = jwt.sign({ id: user.id }, jwtConfig.refreshTokenSecret, {\r\n        expiresIn: jwtConfig.refreshTokenExpireTime\r\n      })\r\n\r\n      const userData = { ...user }\r\n\r\n      delete userData.password\r\n\r\n      const response = {\r\n        userData,\r\n        accessToken,\r\n        refreshToken\r\n      }\r\n\r\n      return [200, response]\r\n    } catch (e) {\r\n      error = e\r\n    }\r\n  } else {\r\n    error = {\r\n      email: ['Email or Password is Invalid']\r\n    }\r\n  }\r\n\r\n  return [400, { error }]\r\n})\r\n\r\nmock.onPost('/jwt/register').reply(request => {\r\n  if (request.data.length > 0) {\r\n    const { email, password, username } = JSON.parse(request.data)\r\n    const isEmailAlreadyInUse = data.users.find(user => user.email === email)\r\n    const isUsernameAlreadyInUse = data.users.find(user => user.username === username)\r\n    const error = {\r\n      email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\r\n      username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\r\n    }\r\n\r\n    if (!error.username && !error.email) {\r\n      const userData = {\r\n        email,\r\n        password,\r\n        username,\r\n        fullName: '',\r\n        avatar: null,\r\n        role: 'admin',\r\n        ability: [\r\n          {\r\n            action: 'manage',\r\n            subject: 'all'\r\n          }\r\n        ]\r\n      }\r\n\r\n      // Add user id\r\n      const length = data.users.length\r\n      let lastIndex = 0\r\n      if (length) {\r\n        lastIndex = data.users[length - 1].id\r\n      }\r\n      userData.id = lastIndex + 1\r\n\r\n      data.users.push(userData)\r\n\r\n      const accessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\r\n\r\n      const user = Object.assign({}, userData)\r\n      delete user['password']\r\n      const response = { user, accessToken }\r\n\r\n      return [200, response]\r\n    } else {\r\n      return [200, { error }]\r\n    }\r\n  }\r\n})\r\n\r\nmock.onPost('/jwt/refresh-token').reply(request => {\r\n  const { refreshToken } = JSON.parse(request.data)\r\n\r\n  try {\r\n    const { id } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret)\r\n\r\n    const userData = { ...data.users.find(user => user.id === id) }\r\n\r\n    const newAccessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn })\r\n    const newRefreshToken = jwt.sign({ id: userData.id }, jwtConfig.refreshTokenSecret, {\r\n      expiresIn: jwtConfig.refreshTokenExpireTime\r\n    })\r\n\r\n    delete userData.password\r\n    const response = {\r\n      userData,\r\n      accessToken: newAccessToken,\r\n      refreshToken: newRefreshToken\r\n    }\r\n\r\n    return [200, response]\r\n  } catch (e) {\r\n    const error = 'Invalid refresh token'\r\n    return [401, { error }]\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}