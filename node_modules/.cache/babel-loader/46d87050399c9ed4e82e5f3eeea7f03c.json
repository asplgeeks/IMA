{"ast":null,"code":"var _class, _temp;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar _require = require('@uppy/core'),\n    Plugin = _require.Plugin;\n\nvar Translator = require('@uppy/utils/lib/Translator');\n\nvar StatusBarUI = require('./StatusBar');\n\nvar statusBarStates = require('./StatusBarStates');\n\nvar getSpeed = require('@uppy/utils/lib/getSpeed');\n\nvar getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining');\n\nvar getTextDirection = require('@uppy/utils/lib/getTextDirection');\n/**\r\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\r\n * progress percentage and time remaining.\r\n */\n\n\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\n  _inheritsLoose(StatusBar, _Plugin);\n\n  function StatusBar(uppy, opts) {\n    var _this;\n\n    _this = _Plugin.call(this, uppy, opts) || this;\n\n    _this.startUpload = function () {\n      var _this$uppy$getState = _this.uppy.getState(),\n          recoveredState = _this$uppy$getState.recoveredState;\n\n      if (recoveredState) {\n        _this.uppy.emit('restore-confirmed');\n\n        return;\n      }\n\n      return _this.uppy.upload().catch(function () {// Error logged in Core\n      });\n    };\n\n    _this.id = _this.opts.id || 'StatusBar';\n    _this.title = 'StatusBar';\n    _this.type = 'progressindicator';\n    _this.defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        upload: 'Upload',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        paused: 'Paused',\n        retry: 'Retry',\n        retryUpload: 'Retry upload',\n        cancel: 'Cancel',\n        pause: 'Pause',\n        resume: 'Resume',\n        done: 'Done',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded'\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files'\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files'\n        },\n        xMoreFilesAdded: {\n          0: '%{smart_count} more file added',\n          1: '%{smart_count} more files added'\n        }\n      }\n    }; // set default options\n\n    var defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeButton: false,\n      hideCancelButton: false,\n      showProgressDetails: false,\n      hideAfterFinish: true,\n      doneButtonHandler: null\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n\n    _this.i18nInit();\n\n    _this.render = _this.render.bind(_assertThisInitialized(_this));\n    _this.install = _this.install.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = StatusBar.prototype;\n\n  _proto.setOptions = function setOptions(newOpts) {\n    _Plugin.prototype.setOptions.call(this, newOpts);\n\n    this.i18nInit();\n  };\n\n  _proto.i18nInit = function i18nInit() {\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\n    this.i18n = this.translator.translate.bind(this.translator);\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\n  };\n\n  _proto.getTotalSpeed = function getTotalSpeed(files) {\n    var totalSpeed = 0;\n    files.forEach(function (file) {\n      totalSpeed += getSpeed(file.progress);\n    });\n    return totalSpeed;\n  };\n\n  _proto.getTotalETA = function getTotalETA(files) {\n    var totalSpeed = this.getTotalSpeed(files);\n\n    if (totalSpeed === 0) {\n      return 0;\n    }\n\n    var totalBytesRemaining = files.reduce(function (total, file) {\n      return total + getBytesRemaining(file.progress);\n    }, 0);\n    return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;\n  };\n\n  _proto.getUploadingState = function getUploadingState(isAllErrored, isAllComplete, recoveredState, files) {\n    if (isAllErrored) {\n      return statusBarStates.STATE_ERROR;\n    }\n\n    if (isAllComplete) {\n      return statusBarStates.STATE_COMPLETE;\n    }\n\n    if (recoveredState) {\n      return statusBarStates.STATE_WAITING;\n    }\n\n    var state = statusBarStates.STATE_WAITING;\n    var fileIDs = Object.keys(files);\n\n    for (var i = 0; i < fileIDs.length; i++) {\n      var progress = files[fileIDs[i]].progress; // If ANY files are being uploaded right now, show the uploading state.\n\n      if (progress.uploadStarted && !progress.uploadComplete) {\n        return statusBarStates.STATE_UPLOADING;\n      } // If files are being preprocessed AND postprocessed at this time, we show the\n      // preprocess state. If any files are being uploaded we show uploading.\n\n\n      if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n        state = statusBarStates.STATE_PREPROCESSING;\n      } // If NO files are being preprocessed or uploaded right now, but some files are\n      // being postprocessed, show the postprocess state.\n\n\n      if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n        state = statusBarStates.STATE_POSTPROCESSING;\n      }\n    }\n\n    return state;\n  };\n\n  _proto.render = function render(state) {\n    var capabilities = state.capabilities,\n        files = state.files,\n        allowNewUpload = state.allowNewUpload,\n        totalProgress = state.totalProgress,\n        error = state.error,\n        recoveredState = state.recoveredState; // TODO: move this to Core, to share between Status Bar and Dashboard\n    // (and any other plugin that might need it, too)\n\n    var filesArray = Object.keys(files).map(function (file) {\n      return files[file];\n    });\n    var newFiles = filesArray.filter(function (file) {\n      return !file.progress.uploadStarted && !file.progress.preprocess && !file.progress.postprocess;\n    }); // If some state was recovered, we want to show Upload button/counter\n    // for all the files, because in this case it’s not an Upload button,\n    // but “Confirm Restore Button”\n\n    if (recoveredState) {\n      newFiles = filesArray;\n    }\n\n    var uploadStartedFiles = filesArray.filter(function (file) {\n      return file.progress.uploadStarted;\n    });\n    var pausedFiles = uploadStartedFiles.filter(function (file) {\n      return file.isPaused;\n    });\n    var completeFiles = filesArray.filter(function (file) {\n      return file.progress.uploadComplete;\n    });\n    var erroredFiles = filesArray.filter(function (file) {\n      return file.error;\n    });\n    var inProgressFiles = filesArray.filter(function (file) {\n      return !file.progress.uploadComplete && file.progress.uploadStarted;\n    });\n    var inProgressNotPausedFiles = inProgressFiles.filter(function (file) {\n      return !file.isPaused;\n    });\n    var startedFiles = filesArray.filter(function (file) {\n      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\n    });\n    var processingFiles = filesArray.filter(function (file) {\n      return file.progress.preprocess || file.progress.postprocess;\n    });\n    var totalETA = this.getTotalETA(inProgressNotPausedFiles);\n    var totalSize = 0;\n    var totalUploadedSize = 0;\n    startedFiles.forEach(function (file) {\n      totalSize += file.progress.bytesTotal || 0;\n      totalUploadedSize += file.progress.bytesUploaded || 0;\n    });\n    var isUploadStarted = startedFiles.length > 0;\n    var isAllComplete = totalProgress === 100 && completeFiles.length === Object.keys(files).length && processingFiles.length === 0;\n    var isAllErrored = error && erroredFiles.length === filesArray.length;\n    var isAllPaused = inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length;\n    var isUploadInProgress = inProgressFiles.length > 0;\n    var resumableUploads = capabilities.resumableUploads || false;\n    var supportsUploadProgress = capabilities.uploadProgress !== false;\n    var isSomeGhost = filesArray.some(function (file) {\n      return file.isGhost;\n    });\n    return StatusBarUI({\n      error: error,\n      uploadState: this.getUploadingState(isAllErrored, isAllComplete, recoveredState, state.files || {}),\n      allowNewUpload: allowNewUpload,\n      totalProgress: totalProgress,\n      totalSize: totalSize,\n      totalUploadedSize: totalUploadedSize,\n      isAllComplete: isAllComplete,\n      isAllPaused: isAllPaused,\n      isAllErrored: isAllErrored,\n      isUploadStarted: isUploadStarted,\n      isUploadInProgress: isUploadInProgress,\n      isSomeGhost: isSomeGhost,\n      recoveredState: recoveredState,\n      complete: completeFiles.length,\n      newFiles: newFiles.length,\n      numUploads: startedFiles.length,\n      totalETA: totalETA,\n      files: files,\n      i18n: this.i18n,\n      pauseAll: this.uppy.pauseAll,\n      resumeAll: this.uppy.resumeAll,\n      retryAll: this.uppy.retryAll,\n      cancelAll: this.uppy.cancelAll,\n      startUpload: this.startUpload,\n      doneButtonHandler: this.opts.doneButtonHandler,\n      resumableUploads: resumableUploads,\n      supportsUploadProgress: supportsUploadProgress,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideRetryButton: this.opts.hideRetryButton,\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\n      hideCancelButton: this.opts.hideCancelButton,\n      hideAfterFinish: this.opts.hideAfterFinish,\n      isTargetDOMEl: this.isTargetDOMEl\n    });\n  };\n\n  _proto.onMount = function onMount() {\n    // Set the text direction if the page has not defined one.\n    var element = this.el;\n    var direction = getTextDirection(element);\n\n    if (!direction) {\n      element.dir = 'ltr';\n    }\n  };\n\n  _proto.install = function install() {\n    var target = this.opts.target;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  };\n\n  _proto.uninstall = function uninstall() {\n    this.unmount();\n  };\n\n  return StatusBar;\n}(Plugin), _class.VERSION = \"1.9.5\", _temp);","map":{"version":3,"sources":["D:/nodejs/star/erpfrontend/node_modules/@uppy/status-bar/lib/index.js"],"names":["_class","_temp","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_assertThisInitialized","self","ReferenceError","_inheritsLoose","subClass","superClass","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_require","require","Plugin","Translator","StatusBarUI","statusBarStates","getSpeed","getBytesRemaining","getTextDirection","module","exports","_Plugin","StatusBar","uppy","opts","_this","startUpload","_this$uppy$getState","getState","recoveredState","emit","upload","catch","id","title","type","defaultLocale","strings","uploading","complete","uploadFailed","paused","retry","retryUpload","cancel","pause","resume","done","filesUploadedOfTotal","dataUploadedOfTotal","xTimeLeft","uploadXFiles","uploadXNewFiles","xMoreFilesAdded","defaultOptions","hideUploadButton","hideRetryButton","hidePauseResumeButton","hideCancelButton","showProgressDetails","hideAfterFinish","doneButtonHandler","i18nInit","render","bind","install","_proto","setOptions","newOpts","translator","locale","i18n","translate","setPluginState","getTotalSpeed","files","totalSpeed","forEach","file","progress","getTotalETA","totalBytesRemaining","reduce","total","Math","round","getUploadingState","isAllErrored","isAllComplete","STATE_ERROR","STATE_COMPLETE","STATE_WAITING","state","fileIDs","keys","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING","capabilities","allowNewUpload","totalProgress","error","filesArray","map","newFiles","filter","uploadStartedFiles","pausedFiles","isPaused","completeFiles","erroredFiles","inProgressFiles","inProgressNotPausedFiles","startedFiles","processingFiles","totalETA","totalSize","totalUploadedSize","bytesTotal","bytesUploaded","isUploadStarted","isAllPaused","isUploadInProgress","resumableUploads","supportsUploadProgress","uploadProgress","isSomeGhost","some","isGhost","uploadState","numUploads","pauseAll","resumeAll","retryAll","cancelAll","isTargetDOMEl","onMount","element","el","direction","dir","mount","uninstall","unmount","VERSION"],"mappings":"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","sourcesContent":["var _class, _temp;\r\n\r\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\r\n\r\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\r\n\r\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\r\n\r\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\r\n\r\nvar _require = require('@uppy/core'),\r\n    Plugin = _require.Plugin;\r\n\r\nvar Translator = require('@uppy/utils/lib/Translator');\r\n\r\nvar StatusBarUI = require('./StatusBar');\r\n\r\nvar statusBarStates = require('./StatusBarStates');\r\n\r\nvar getSpeed = require('@uppy/utils/lib/getSpeed');\r\n\r\nvar getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining');\r\n\r\nvar getTextDirection = require('@uppy/utils/lib/getTextDirection');\r\n/**\r\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\r\n * progress percentage and time remaining.\r\n */\r\n\r\n\r\nmodule.exports = (_temp = _class = /*#__PURE__*/function (_Plugin) {\r\n  _inheritsLoose(StatusBar, _Plugin);\r\n\r\n  function StatusBar(uppy, opts) {\r\n    var _this;\r\n\r\n    _this = _Plugin.call(this, uppy, opts) || this;\r\n\r\n    _this.startUpload = function () {\r\n      var _this$uppy$getState = _this.uppy.getState(),\r\n          recoveredState = _this$uppy$getState.recoveredState;\r\n\r\n      if (recoveredState) {\r\n        _this.uppy.emit('restore-confirmed');\r\n\r\n        return;\r\n      }\r\n\r\n      return _this.uppy.upload().catch(function () {// Error logged in Core\r\n      });\r\n    };\r\n\r\n    _this.id = _this.opts.id || 'StatusBar';\r\n    _this.title = 'StatusBar';\r\n    _this.type = 'progressindicator';\r\n    _this.defaultLocale = {\r\n      strings: {\r\n        uploading: 'Uploading',\r\n        upload: 'Upload',\r\n        complete: 'Complete',\r\n        uploadFailed: 'Upload failed',\r\n        paused: 'Paused',\r\n        retry: 'Retry',\r\n        retryUpload: 'Retry upload',\r\n        cancel: 'Cancel',\r\n        pause: 'Pause',\r\n        resume: 'Resume',\r\n        done: 'Done',\r\n        filesUploadedOfTotal: {\r\n          0: '%{complete} of %{smart_count} file uploaded',\r\n          1: '%{complete} of %{smart_count} files uploaded'\r\n        },\r\n        dataUploadedOfTotal: '%{complete} of %{total}',\r\n        xTimeLeft: '%{time} left',\r\n        uploadXFiles: {\r\n          0: 'Upload %{smart_count} file',\r\n          1: 'Upload %{smart_count} files'\r\n        },\r\n        uploadXNewFiles: {\r\n          0: 'Upload +%{smart_count} file',\r\n          1: 'Upload +%{smart_count} files'\r\n        },\r\n        xMoreFilesAdded: {\r\n          0: '%{smart_count} more file added',\r\n          1: '%{smart_count} more files added'\r\n        }\r\n      }\r\n    }; // set default options\r\n\r\n    var defaultOptions = {\r\n      target: 'body',\r\n      hideUploadButton: false,\r\n      hideRetryButton: false,\r\n      hidePauseResumeButton: false,\r\n      hideCancelButton: false,\r\n      showProgressDetails: false,\r\n      hideAfterFinish: true,\r\n      doneButtonHandler: null\r\n    };\r\n    _this.opts = _extends({}, defaultOptions, opts);\r\n\r\n    _this.i18nInit();\r\n\r\n    _this.render = _this.render.bind(_assertThisInitialized(_this));\r\n    _this.install = _this.install.bind(_assertThisInitialized(_this));\r\n    return _this;\r\n  }\r\n\r\n  var _proto = StatusBar.prototype;\r\n\r\n  _proto.setOptions = function setOptions(newOpts) {\r\n    _Plugin.prototype.setOptions.call(this, newOpts);\r\n\r\n    this.i18nInit();\r\n  };\r\n\r\n  _proto.i18nInit = function i18nInit() {\r\n    this.translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);\r\n    this.i18n = this.translator.translate.bind(this.translator);\r\n    this.setPluginState(); // so that UI re-renders and we see the updated locale\r\n  };\r\n\r\n  _proto.getTotalSpeed = function getTotalSpeed(files) {\r\n    var totalSpeed = 0;\r\n    files.forEach(function (file) {\r\n      totalSpeed += getSpeed(file.progress);\r\n    });\r\n    return totalSpeed;\r\n  };\r\n\r\n  _proto.getTotalETA = function getTotalETA(files) {\r\n    var totalSpeed = this.getTotalSpeed(files);\r\n\r\n    if (totalSpeed === 0) {\r\n      return 0;\r\n    }\r\n\r\n    var totalBytesRemaining = files.reduce(function (total, file) {\r\n      return total + getBytesRemaining(file.progress);\r\n    }, 0);\r\n    return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;\r\n  };\r\n\r\n  _proto.getUploadingState = function getUploadingState(isAllErrored, isAllComplete, recoveredState, files) {\r\n    if (isAllErrored) {\r\n      return statusBarStates.STATE_ERROR;\r\n    }\r\n\r\n    if (isAllComplete) {\r\n      return statusBarStates.STATE_COMPLETE;\r\n    }\r\n\r\n    if (recoveredState) {\r\n      return statusBarStates.STATE_WAITING;\r\n    }\r\n\r\n    var state = statusBarStates.STATE_WAITING;\r\n    var fileIDs = Object.keys(files);\r\n\r\n    for (var i = 0; i < fileIDs.length; i++) {\r\n      var progress = files[fileIDs[i]].progress; // If ANY files are being uploaded right now, show the uploading state.\r\n\r\n      if (progress.uploadStarted && !progress.uploadComplete) {\r\n        return statusBarStates.STATE_UPLOADING;\r\n      } // If files are being preprocessed AND postprocessed at this time, we show the\r\n      // preprocess state. If any files are being uploaded we show uploading.\r\n\r\n\r\n      if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\r\n        state = statusBarStates.STATE_PREPROCESSING;\r\n      } // If NO files are being preprocessed or uploaded right now, but some files are\r\n      // being postprocessed, show the postprocess state.\r\n\r\n\r\n      if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\r\n        state = statusBarStates.STATE_POSTPROCESSING;\r\n      }\r\n    }\r\n\r\n    return state;\r\n  };\r\n\r\n  _proto.render = function render(state) {\r\n    var capabilities = state.capabilities,\r\n        files = state.files,\r\n        allowNewUpload = state.allowNewUpload,\r\n        totalProgress = state.totalProgress,\r\n        error = state.error,\r\n        recoveredState = state.recoveredState; // TODO: move this to Core, to share between Status Bar and Dashboard\r\n    // (and any other plugin that might need it, too)\r\n\r\n    var filesArray = Object.keys(files).map(function (file) {\r\n      return files[file];\r\n    });\r\n    var newFiles = filesArray.filter(function (file) {\r\n      return !file.progress.uploadStarted && !file.progress.preprocess && !file.progress.postprocess;\r\n    }); // If some state was recovered, we want to show Upload button/counter\r\n    // for all the files, because in this case it’s not an Upload button,\r\n    // but “Confirm Restore Button”\r\n\r\n    if (recoveredState) {\r\n      newFiles = filesArray;\r\n    }\r\n\r\n    var uploadStartedFiles = filesArray.filter(function (file) {\r\n      return file.progress.uploadStarted;\r\n    });\r\n    var pausedFiles = uploadStartedFiles.filter(function (file) {\r\n      return file.isPaused;\r\n    });\r\n    var completeFiles = filesArray.filter(function (file) {\r\n      return file.progress.uploadComplete;\r\n    });\r\n    var erroredFiles = filesArray.filter(function (file) {\r\n      return file.error;\r\n    });\r\n    var inProgressFiles = filesArray.filter(function (file) {\r\n      return !file.progress.uploadComplete && file.progress.uploadStarted;\r\n    });\r\n    var inProgressNotPausedFiles = inProgressFiles.filter(function (file) {\r\n      return !file.isPaused;\r\n    });\r\n    var startedFiles = filesArray.filter(function (file) {\r\n      return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;\r\n    });\r\n    var processingFiles = filesArray.filter(function (file) {\r\n      return file.progress.preprocess || file.progress.postprocess;\r\n    });\r\n    var totalETA = this.getTotalETA(inProgressNotPausedFiles);\r\n    var totalSize = 0;\r\n    var totalUploadedSize = 0;\r\n    startedFiles.forEach(function (file) {\r\n      totalSize += file.progress.bytesTotal || 0;\r\n      totalUploadedSize += file.progress.bytesUploaded || 0;\r\n    });\r\n    var isUploadStarted = startedFiles.length > 0;\r\n    var isAllComplete = totalProgress === 100 && completeFiles.length === Object.keys(files).length && processingFiles.length === 0;\r\n    var isAllErrored = error && erroredFiles.length === filesArray.length;\r\n    var isAllPaused = inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length;\r\n    var isUploadInProgress = inProgressFiles.length > 0;\r\n    var resumableUploads = capabilities.resumableUploads || false;\r\n    var supportsUploadProgress = capabilities.uploadProgress !== false;\r\n    var isSomeGhost = filesArray.some(function (file) {\r\n      return file.isGhost;\r\n    });\r\n    return StatusBarUI({\r\n      error: error,\r\n      uploadState: this.getUploadingState(isAllErrored, isAllComplete, recoveredState, state.files || {}),\r\n      allowNewUpload: allowNewUpload,\r\n      totalProgress: totalProgress,\r\n      totalSize: totalSize,\r\n      totalUploadedSize: totalUploadedSize,\r\n      isAllComplete: isAllComplete,\r\n      isAllPaused: isAllPaused,\r\n      isAllErrored: isAllErrored,\r\n      isUploadStarted: isUploadStarted,\r\n      isUploadInProgress: isUploadInProgress,\r\n      isSomeGhost: isSomeGhost,\r\n      recoveredState: recoveredState,\r\n      complete: completeFiles.length,\r\n      newFiles: newFiles.length,\r\n      numUploads: startedFiles.length,\r\n      totalETA: totalETA,\r\n      files: files,\r\n      i18n: this.i18n,\r\n      pauseAll: this.uppy.pauseAll,\r\n      resumeAll: this.uppy.resumeAll,\r\n      retryAll: this.uppy.retryAll,\r\n      cancelAll: this.uppy.cancelAll,\r\n      startUpload: this.startUpload,\r\n      doneButtonHandler: this.opts.doneButtonHandler,\r\n      resumableUploads: resumableUploads,\r\n      supportsUploadProgress: supportsUploadProgress,\r\n      showProgressDetails: this.opts.showProgressDetails,\r\n      hideUploadButton: this.opts.hideUploadButton,\r\n      hideRetryButton: this.opts.hideRetryButton,\r\n      hidePauseResumeButton: this.opts.hidePauseResumeButton,\r\n      hideCancelButton: this.opts.hideCancelButton,\r\n      hideAfterFinish: this.opts.hideAfterFinish,\r\n      isTargetDOMEl: this.isTargetDOMEl\r\n    });\r\n  };\r\n\r\n  _proto.onMount = function onMount() {\r\n    // Set the text direction if the page has not defined one.\r\n    var element = this.el;\r\n    var direction = getTextDirection(element);\r\n\r\n    if (!direction) {\r\n      element.dir = 'ltr';\r\n    }\r\n  };\r\n\r\n  _proto.install = function install() {\r\n    var target = this.opts.target;\r\n\r\n    if (target) {\r\n      this.mount(target, this);\r\n    }\r\n  };\r\n\r\n  _proto.uninstall = function uninstall() {\r\n    this.unmount();\r\n  };\r\n\r\n  return StatusBar;\r\n}(Plugin), _class.VERSION = \"1.9.5\", _temp);"]},"metadata":{},"sourceType":"script"}