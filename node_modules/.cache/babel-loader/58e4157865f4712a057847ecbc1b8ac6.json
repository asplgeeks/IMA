{"ast":null,"code":"import _objectSpread from \"D:/nodejs/star/erpfrontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"D:/nodejs/star/erpfrontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/nodejs/star/erpfrontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport jwtDefaultConfig from './jwtDefaultConfig';\n\nvar JwtService = /*#__PURE__*/function () {\n  // ** jwtConfig <= Will be used by this service\n  // ** For Refreshing Token\n  // ** For Refreshing Token\n  function JwtService(jwtOverrideConfig) {\n    var _this = this;\n\n    _classCallCheck(this, JwtService);\n\n    this.jwtConfig = _objectSpread({}, jwtDefaultConfig);\n    this.isAlreadyFetchingAccessToken = false;\n    this.subscribers = [];\n    this.jwtConfig = _objectSpread(_objectSpread({}, this.jwtConfig), jwtOverrideConfig); // ** Request Interceptor\n\n    axios.interceptors.request.use(function (config) {\n      // ** Get token from localStorage\n      var accessToken = _this.getToken(); // ** If token is present add it to request's Authorization Header\n\n\n      if (accessToken) {\n        // ** eslint-disable-next-line no-param-reassign\n        config.headers.Authorization = \"\".concat(_this.jwtConfig.tokenType, \" \").concat(accessToken);\n      }\n\n      return config;\n    }, function (error) {\n      return Promise.reject(error);\n    }); // ** Add request/response interceptor\n\n    axios.interceptors.response.use(function (response) {\n      return response;\n    }, function (error) {\n      // ** const { config, response: { status } } = error\n      var config = error.config,\n          response = error.response;\n      var originalRequest = config; // ** if (status === 401) {\n\n      if (response && response.status === 401) {\n        if (!_this.isAlreadyFetchingAccessToken) {\n          _this.isAlreadyFetchingAccessToken = true;\n\n          _this.refreshToken().then(function (r) {\n            _this.isAlreadyFetchingAccessToken = false; // ** Update accessToken in localStorage\n\n            _this.setToken(r.data.accessToken);\n\n            _this.setRefreshToken(r.data.refreshToken);\n\n            _this.onAccessTokenFetched(r.data.accessToken);\n          });\n        }\n\n        var retryOriginalRequest = new Promise(function (resolve) {\n          _this.addSubscriber(function (accessToken) {\n            // ** Make sure to assign accessToken according to your response.\n            // ** Check: https://pixinvent.ticksy.com/ticket/2413870\n            // ** Change Authorization header\n            originalRequest.headers.Authorization = \"\".concat(_this.jwtConfig.tokenType, \" \").concat(accessToken);\n            resolve(_this.axios(originalRequest));\n          });\n        });\n        return retryOriginalRequest;\n      }\n\n      return Promise.reject(error);\n    });\n  }\n\n  _createClass(JwtService, [{\n    key: \"onAccessTokenFetched\",\n    value: function onAccessTokenFetched(accessToken) {\n      this.subscribers = this.subscribers.filter(function (callback) {\n        return callback(accessToken);\n      });\n    }\n  }, {\n    key: \"addSubscriber\",\n    value: function addSubscriber(callback) {\n      this.subscribers.push(callback);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      return localStorage.getItem(this.jwtConfig.storageTokenKeyName);\n    }\n  }, {\n    key: \"getRefreshToken\",\n    value: function getRefreshToken() {\n      return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName);\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(value) {\n      localStorage.setItem(this.jwtConfig.storageTokenKeyName, value);\n    }\n  }, {\n    key: \"setRefreshToken\",\n    value: function setRefreshToken(value) {\n      localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value);\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return axios.post.apply(axios, [this.jwtConfig.loginEndpoint].concat(args));\n    }\n  }, {\n    key: \"register\",\n    value: function register() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return axios.post.apply(axios, [this.jwtConfig.registerEndpoint].concat(args));\n    }\n  }, {\n    key: \"refreshToken\",\n    value: function refreshToken() {\n      return axios.post(this.jwtConfig.refreshEndpoint, {\n        refreshToken: this.getRefreshToken()\n      });\n    }\n  }]);\n\n  return JwtService;\n}();\n\nexport { JwtService as default };","map":{"version":3,"sources":["D:/nodejs/star/erpfrontend/src/@core/auth/jwt/jwtService.js"],"names":["axios","jwtDefaultConfig","JwtService","jwtOverrideConfig","jwtConfig","isAlreadyFetchingAccessToken","subscribers","interceptors","request","use","config","accessToken","getToken","headers","Authorization","tokenType","error","Promise","reject","response","originalRequest","status","refreshToken","then","r","setToken","data","setRefreshToken","onAccessTokenFetched","retryOriginalRequest","resolve","addSubscriber","filter","callback","push","localStorage","getItem","storageTokenKeyName","storageRefreshTokenKeyName","value","setItem","args","post","loginEndpoint","registerEndpoint","refreshEndpoint","getRefreshToken"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport jwtDefaultConfig from './jwtDefaultConfig'\r\n\r\nexport default class JwtService {\r\n  // ** jwtConfig <= Will be used by this service\r\n  jwtConfig = { ...jwtDefaultConfig }\r\n\r\n  // ** For Refreshing Token\r\n  isAlreadyFetchingAccessToken = false\r\n\r\n  // ** For Refreshing Token\r\n  subscribers = []\r\n\r\n  constructor(jwtOverrideConfig) {\r\n    this.jwtConfig = { ...this.jwtConfig, ...jwtOverrideConfig }\r\n\r\n    // ** Request Interceptor\r\n    axios.interceptors.request.use(\r\n      config => {\r\n        // ** Get token from localStorage\r\n        const accessToken = this.getToken()\r\n\r\n        // ** If token is present add it to request's Authorization Header\r\n        if (accessToken) {\r\n          // ** eslint-disable-next-line no-param-reassign\r\n          config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\r\n        }\r\n        return config\r\n      },\r\n      error => Promise.reject(error)\r\n    )\r\n\r\n    // ** Add request/response interceptor\r\n    axios.interceptors.response.use(\r\n      response => response,\r\n      error => {\r\n        // ** const { config, response: { status } } = error\r\n        const { config, response } = error\r\n        const originalRequest = config\r\n\r\n        // ** if (status === 401) {\r\n        if (response && response.status === 401) {\r\n          if (!this.isAlreadyFetchingAccessToken) {\r\n            this.isAlreadyFetchingAccessToken = true\r\n            this.refreshToken().then(r => {\r\n              this.isAlreadyFetchingAccessToken = false\r\n\r\n              // ** Update accessToken in localStorage\r\n              this.setToken(r.data.accessToken)\r\n              this.setRefreshToken(r.data.refreshToken)\r\n\r\n              this.onAccessTokenFetched(r.data.accessToken)\r\n            })\r\n          }\r\n          const retryOriginalRequest = new Promise(resolve => {\r\n            this.addSubscriber(accessToken => {\r\n              // ** Make sure to assign accessToken according to your response.\r\n              // ** Check: https://pixinvent.ticksy.com/ticket/2413870\r\n              // ** Change Authorization header\r\n              originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\r\n              resolve(this.axios(originalRequest))\r\n            })\r\n          })\r\n          return retryOriginalRequest\r\n        }\r\n        return Promise.reject(error)\r\n      }\r\n    )\r\n  }\r\n\r\n  onAccessTokenFetched(accessToken) {\r\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken))\r\n  }\r\n\r\n  addSubscriber(callback) {\r\n    this.subscribers.push(callback)\r\n  }\r\n\r\n  getToken() {\r\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName)\r\n  }\r\n\r\n  getRefreshToken() {\r\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName)\r\n  }\r\n\r\n  setToken(value) {\r\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value)\r\n  }\r\n\r\n  setRefreshToken(value) {\r\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value)\r\n  }\r\n\r\n  login(...args) {\r\n    return axios.post(this.jwtConfig.loginEndpoint, ...args)\r\n  }\r\n\r\n  register(...args) {\r\n    return axios.post(this.jwtConfig.registerEndpoint, ...args)\r\n  }\r\n\r\n  refreshToken() {\r\n    return axios.post(this.jwtConfig.refreshEndpoint, {\r\n      refreshToken: this.getRefreshToken()\r\n    })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}