{"ast":null,"code":"/*\r\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\r\nCopyrights licensed under the New BSD License.\r\nSee the accompanying LICENSE file for terms.\r\n*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { parse } from 'intl-messageformat-parser';\nimport memoizeIntlConstructor from 'intl-format-cache';\nimport { formatToString, formatToParts, formatHTMLMessage } from './formatters'; // -- MessageFormat --------------------------------------------------------\n\nfunction mergeConfig(c1, c2) {\n  if (!c2) {\n    return c1;\n  }\n\n  return __assign(__assign(__assign({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function (all, k) {\n    all[k] = __assign(__assign({}, c1[k]), c2[k] || {});\n    return all;\n  }, {}));\n}\n\nfunction mergeConfigs(defaultConfig, configs) {\n  if (!configs) {\n    return defaultConfig;\n  }\n\n  return Object.keys(defaultConfig).reduce(function (all, k) {\n    all[k] = mergeConfig(defaultConfig[k], configs[k]);\n    return all;\n  }, __assign({}, defaultConfig));\n}\n\nexport function createDefaultFormatters(cache) {\n  if (cache === void 0) {\n    cache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n  }\n\n  return {\n    getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\n    getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\n    getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules)\n  };\n}\n\nvar IntlMessageFormat =\n/** @class */\nfunction () {\n  function IntlMessageFormat(message, locales, overrideFormats, opts) {\n    var _this = this;\n\n    if (locales === void 0) {\n      locales = IntlMessageFormat.defaultLocale;\n    }\n\n    this.formatterCache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n\n    this.format = function (values) {\n      return formatToString(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);\n    };\n\n    this.formatToParts = function (values) {\n      return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n    };\n\n    this.formatHTMLMessage = function (values) {\n      return formatHTMLMessage(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);\n    };\n\n    this.resolvedOptions = function () {\n      return {\n        locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n      };\n    };\n\n    this.getAst = function () {\n      return _this.ast;\n    };\n\n    if (typeof message === 'string') {\n      this.message = message;\n\n      if (!IntlMessageFormat.__parse) {\n        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n      } // Parse string messages into an AST.\n\n\n      this.ast = IntlMessageFormat.__parse(message, {\n        normalizeHashtagInPlural: false\n      });\n    } else {\n      this.ast = message;\n    }\n\n    if (!Array.isArray(this.ast)) {\n      throw new TypeError('A message must be provided as a String or AST.');\n    } // Creates a new object with the specified `formats` merged with the default\n    // formats.\n\n\n    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats); // Defined first because it's used to build the format pattern.\n\n    this.locales = locales;\n    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n  }\n\n  IntlMessageFormat.defaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n  IntlMessageFormat.__parse = parse; // Default format options used as the prototype of the `formats` provided to the\n  // constructor. These are used when constructing the internal Intl.NumberFormat\n  // and Intl.DateTimeFormat instances.\n\n  IntlMessageFormat.formats = {\n    number: {\n      currency: {\n        style: 'currency'\n      },\n      percent: {\n        style: 'percent'\n      }\n    },\n    date: {\n      short: {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      medium: {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      long: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      full: {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      short: {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      medium: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      long: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      full: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  };\n  return IntlMessageFormat;\n}();\n\nexport { IntlMessageFormat };\nexport default IntlMessageFormat;","map":{"version":3,"sources":["D:/IMA/node_modules/intl-messageformat/lib/core.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","parse","memoizeIntlConstructor","formatToString","formatToParts","formatHTMLMessage","mergeConfig","c1","c2","keys","reduce","all","k","mergeConfigs","defaultConfig","configs","createDefaultFormatters","cache","number","dateTime","pluralRules","getNumberFormat","Intl","NumberFormat","getDateTimeFormat","DateTimeFormat","getPluralRules","PluralRules","IntlMessageFormat","message","locales","overrideFormats","opts","_this","defaultLocale","formatterCache","format","values","ast","formatters","formats","undefined","resolvedOptions","locale","supportedLocalesOf","getAst","__parse","TypeError","normalizeHashtagInPlural","Array","isArray","currency","style","percent","date","short","month","day","year","medium","long","full","weekday","time","hour","minute","second","timeZoneName"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd;AAAiB,YAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AADJ;AAEH;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,SAASO,KAAT,QAAsB,2BAAtB;AACA,OAAOC,sBAAP,MAAmC,mBAAnC;AACA,SAASC,cAAT,EAAyBC,aAAzB,EAAwCC,iBAAxC,QAAkE,cAAlE,C,CACA;;AACA,SAASC,WAAT,CAAqBC,EAArB,EAAyBC,EAAzB,EAA6B;AACzB,MAAI,CAACA,EAAL,EAAS;AACL,WAAOD,EAAP;AACH;;AACD,SAAOpB,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAMoB,EAAE,IAAI,EAAZ,CAAT,EAA4BC,EAAE,IAAI,EAAlC,CAAT,EAAiDpB,MAAM,CAACqB,IAAP,CAAYF,EAAZ,EAAgBG,MAAhB,CAAuB,UAAUC,GAAV,EAAeC,CAAf,EAAkB;AACrGD,IAAAA,GAAG,CAACC,CAAD,CAAH,GAASzB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKoB,EAAE,CAACK,CAAD,CAAP,CAAT,EAAuBJ,EAAE,CAACI,CAAD,CAAF,IAAS,EAAhC,CAAjB;AACA,WAAOD,GAAP;AACH,GAH+D,EAG7D,EAH6D,CAAjD,CAAf;AAIH;;AACD,SAASE,YAAT,CAAsBC,aAAtB,EAAqCC,OAArC,EAA8C;AAC1C,MAAI,CAACA,OAAL,EAAc;AACV,WAAOD,aAAP;AACH;;AACD,SAAO1B,MAAM,CAACqB,IAAP,CAAYK,aAAZ,EAA2BJ,MAA3B,CAAkC,UAAUC,GAAV,EAAeC,CAAf,EAAkB;AACvDD,IAAAA,GAAG,CAACC,CAAD,CAAH,GAASN,WAAW,CAACQ,aAAa,CAACF,CAAD,CAAd,EAAmBG,OAAO,CAACH,CAAD,CAA1B,CAApB;AACA,WAAOD,GAAP;AACH,GAHM,EAGJxB,QAAQ,CAAC,EAAD,EAAK2B,aAAL,CAHJ,CAAP;AAIH;;AACD,OAAO,SAASE,uBAAT,CAAiCC,KAAjC,EAAwC;AAC3C,MAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AAAEA,IAAAA,KAAK,GAAG;AAC5BC,MAAAA,MAAM,EAAE,EADoB;AAE5BC,MAAAA,QAAQ,EAAE,EAFkB;AAG5BC,MAAAA,WAAW,EAAE;AAHe,KAAR;AAIpB;;AACJ,SAAO;AACHC,IAAAA,eAAe,EAAEnB,sBAAsB,CAACoB,IAAI,CAACC,YAAN,EAAoBN,KAAK,CAACC,MAA1B,CADpC;AAEHM,IAAAA,iBAAiB,EAAEtB,sBAAsB,CAACoB,IAAI,CAACG,cAAN,EAAsBR,KAAK,CAACE,QAA5B,CAFtC;AAGHO,IAAAA,cAAc,EAAExB,sBAAsB,CAACoB,IAAI,CAACK,WAAN,EAAmBV,KAAK,CAACG,WAAzB;AAHnC,GAAP;AAKH;;AACD,IAAIQ,iBAAiB;AAAG;AAAe,YAAY;AAC/C,WAASA,iBAAT,CAA2BC,OAA3B,EAAoCC,OAApC,EAA6CC,eAA7C,EAA8DC,IAA9D,EAAoE;AAChE,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAIH,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,MAAAA,OAAO,GAAGF,iBAAiB,CAACM,aAA5B;AAA4C;;AACtE,SAAKC,cAAL,GAAsB;AAClBjB,MAAAA,MAAM,EAAE,EADU;AAElBC,MAAAA,QAAQ,EAAE,EAFQ;AAGlBC,MAAAA,WAAW,EAAE;AAHK,KAAtB;;AAKA,SAAKgB,MAAL,GAAc,UAAUC,MAAV,EAAkB;AAC5B,aAAOlC,cAAc,CAAC8B,KAAK,CAACK,GAAP,EAAYL,KAAK,CAACH,OAAlB,EAA2BG,KAAK,CAACM,UAAjC,EAA6CN,KAAK,CAACO,OAAnD,EAA4DH,MAA5D,EAAoEJ,KAAK,CAACJ,OAA1E,CAArB;AACH,KAFD;;AAGA,SAAKzB,aAAL,GAAqB,UAAUiC,MAAV,EAAkB;AACnC,aAAOjC,aAAa,CAAC6B,KAAK,CAACK,GAAP,EAAYL,KAAK,CAACH,OAAlB,EAA2BG,KAAK,CAACM,UAAjC,EAA6CN,KAAK,CAACO,OAAnD,EAA4DH,MAA5D,EAAoEI,SAApE,EAA+ER,KAAK,CAACJ,OAArF,CAApB;AACH,KAFD;;AAGA,SAAKxB,iBAAL,GAAyB,UAAUgC,MAAV,EAAkB;AACvC,aAAOhC,iBAAiB,CAAC4B,KAAK,CAACK,GAAP,EAAYL,KAAK,CAACH,OAAlB,EAA2BG,KAAK,CAACM,UAAjC,EAA6CN,KAAK,CAACO,OAAnD,EAA4DH,MAA5D,EAAoEJ,KAAK,CAACJ,OAA1E,CAAxB;AACH,KAFD;;AAGA,SAAKa,eAAL,GAAuB,YAAY;AAAE,aAAQ;AACzCC,QAAAA,MAAM,EAAErB,IAAI,CAACC,YAAL,CAAkBqB,kBAAlB,CAAqCX,KAAK,CAACH,OAA3C,EAAoD,CAApD;AADiC,OAAR;AAEhC,KAFL;;AAGA,SAAKe,MAAL,GAAc,YAAY;AAAE,aAAOZ,KAAK,CAACK,GAAb;AAAmB,KAA/C;;AACA,QAAI,OAAOT,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,WAAKA,OAAL,GAAeA,OAAf;;AACA,UAAI,CAACD,iBAAiB,CAACkB,OAAvB,EAAgC;AAC5B,cAAM,IAAIC,SAAJ,CAAc,6EAAd,CAAN;AACH,OAJ4B,CAK7B;;;AACA,WAAKT,GAAL,GAAWV,iBAAiB,CAACkB,OAAlB,CAA0BjB,OAA1B,EAAmC;AAC1CmB,QAAAA,wBAAwB,EAAE;AADgB,OAAnC,CAAX;AAGH,KATD,MAUK;AACD,WAAKV,GAAL,GAAWT,OAAX;AACH;;AACD,QAAI,CAACoB,KAAK,CAACC,OAAN,CAAc,KAAKZ,GAAnB,CAAL,EAA8B;AAC1B,YAAM,IAAIS,SAAJ,CAAc,gDAAd,CAAN;AACH,KApC+D,CAqChE;AACA;;;AACA,SAAKP,OAAL,GAAe3B,YAAY,CAACe,iBAAiB,CAACY,OAAnB,EAA4BT,eAA5B,CAA3B,CAvCgE,CAwChE;;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKS,UAAL,GACKP,IAAI,IAAIA,IAAI,CAACO,UAAd,IAA6BvB,uBAAuB,CAAC,KAAKmB,cAAN,CADxD;AAEH;;AACDP,EAAAA,iBAAiB,CAACM,aAAlB,GAAkC,IAAIZ,IAAI,CAACC,YAAT,GAAwBmB,eAAxB,GAA0CC,MAA5E;AACAf,EAAAA,iBAAiB,CAACkB,OAAlB,GAA4B7C,KAA5B,CA/C+C,CAgD/C;AACA;AACA;;AACA2B,EAAAA,iBAAiB,CAACY,OAAlB,GAA4B;AACxBtB,IAAAA,MAAM,EAAE;AACJiC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,KAAK,EAAE;AADD,OADN;AAIJC,MAAAA,OAAO,EAAE;AACLD,QAAAA,KAAK,EAAE;AADF;AAJL,KADgB;AASxBE,IAAAA,IAAI,EAAE;AACFC,MAAAA,KAAK,EAAE;AACHC,QAAAA,KAAK,EAAE,SADJ;AAEHC,QAAAA,GAAG,EAAE,SAFF;AAGHC,QAAAA,IAAI,EAAE;AAHH,OADL;AAMFC,MAAAA,MAAM,EAAE;AACJH,QAAAA,KAAK,EAAE,OADH;AAEJC,QAAAA,GAAG,EAAE,SAFD;AAGJC,QAAAA,IAAI,EAAE;AAHF,OANN;AAWFE,MAAAA,IAAI,EAAE;AACFJ,QAAAA,KAAK,EAAE,MADL;AAEFC,QAAAA,GAAG,EAAE,SAFH;AAGFC,QAAAA,IAAI,EAAE;AAHJ,OAXJ;AAgBFG,MAAAA,IAAI,EAAE;AACFC,QAAAA,OAAO,EAAE,MADP;AAEFN,QAAAA,KAAK,EAAE,MAFL;AAGFC,QAAAA,GAAG,EAAE,SAHH;AAIFC,QAAAA,IAAI,EAAE;AAJJ;AAhBJ,KATkB;AAgCxBK,IAAAA,IAAI,EAAE;AACFR,MAAAA,KAAK,EAAE;AACHS,QAAAA,IAAI,EAAE,SADH;AAEHC,QAAAA,MAAM,EAAE;AAFL,OADL;AAKFN,MAAAA,MAAM,EAAE;AACJK,QAAAA,IAAI,EAAE,SADF;AAEJC,QAAAA,MAAM,EAAE,SAFJ;AAGJC,QAAAA,MAAM,EAAE;AAHJ,OALN;AAUFN,MAAAA,IAAI,EAAE;AACFI,QAAAA,IAAI,EAAE,SADJ;AAEFC,QAAAA,MAAM,EAAE,SAFN;AAGFC,QAAAA,MAAM,EAAE,SAHN;AAIFC,QAAAA,YAAY,EAAE;AAJZ,OAVJ;AAgBFN,MAAAA,IAAI,EAAE;AACFG,QAAAA,IAAI,EAAE,SADJ;AAEFC,QAAAA,MAAM,EAAE,SAFN;AAGFC,QAAAA,MAAM,EAAE,SAHN;AAIFC,QAAAA,YAAY,EAAE;AAJZ;AAhBJ;AAhCkB,GAA5B;AAwDA,SAAOvC,iBAAP;AACH,CA5GsC,EAAvC;;AA6GA,SAASA,iBAAT;AACA,eAAeA,iBAAf","sourcesContent":["/*\r\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\r\nCopyrights licensed under the New BSD License.\r\nSee the accompanying LICENSE file for terms.\r\n*/\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport { parse } from 'intl-messageformat-parser';\r\nimport memoizeIntlConstructor from 'intl-format-cache';\r\nimport { formatToString, formatToParts, formatHTMLMessage, } from './formatters';\r\n// -- MessageFormat --------------------------------------------------------\r\nfunction mergeConfig(c1, c2) {\r\n    if (!c2) {\r\n        return c1;\r\n    }\r\n    return __assign(__assign(__assign({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {\r\n        all[k] = __assign(__assign({}, c1[k]), (c2[k] || {}));\r\n        return all;\r\n    }, {}));\r\n}\r\nfunction mergeConfigs(defaultConfig, configs) {\r\n    if (!configs) {\r\n        return defaultConfig;\r\n    }\r\n    return Object.keys(defaultConfig).reduce(function (all, k) {\r\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\r\n        return all;\r\n    }, __assign({}, defaultConfig));\r\n}\r\nexport function createDefaultFormatters(cache) {\r\n    if (cache === void 0) { cache = {\r\n        number: {},\r\n        dateTime: {},\r\n        pluralRules: {},\r\n    }; }\r\n    return {\r\n        getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\r\n        getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\r\n        getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules),\r\n    };\r\n}\r\nvar IntlMessageFormat = /** @class */ (function () {\r\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\r\n        var _this = this;\r\n        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }\r\n        this.formatterCache = {\r\n            number: {},\r\n            dateTime: {},\r\n            pluralRules: {},\r\n        };\r\n        this.format = function (values) {\r\n            return formatToString(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);\r\n        };\r\n        this.formatToParts = function (values) {\r\n            return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\r\n        };\r\n        this.formatHTMLMessage = function (values) {\r\n            return formatHTMLMessage(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);\r\n        };\r\n        this.resolvedOptions = function () { return ({\r\n            locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],\r\n        }); };\r\n        this.getAst = function () { return _this.ast; };\r\n        if (typeof message === 'string') {\r\n            this.message = message;\r\n            if (!IntlMessageFormat.__parse) {\r\n                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\r\n            }\r\n            // Parse string messages into an AST.\r\n            this.ast = IntlMessageFormat.__parse(message, {\r\n                normalizeHashtagInPlural: false,\r\n            });\r\n        }\r\n        else {\r\n            this.ast = message;\r\n        }\r\n        if (!Array.isArray(this.ast)) {\r\n            throw new TypeError('A message must be provided as a String or AST.');\r\n        }\r\n        // Creates a new object with the specified `formats` merged with the default\r\n        // formats.\r\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\r\n        // Defined first because it's used to build the format pattern.\r\n        this.locales = locales;\r\n        this.formatters =\r\n            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);\r\n    }\r\n    IntlMessageFormat.defaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\r\n    IntlMessageFormat.__parse = parse;\r\n    // Default format options used as the prototype of the `formats` provided to the\r\n    // constructor. These are used when constructing the internal Intl.NumberFormat\r\n    // and Intl.DateTimeFormat instances.\r\n    IntlMessageFormat.formats = {\r\n        number: {\r\n            currency: {\r\n                style: 'currency',\r\n            },\r\n            percent: {\r\n                style: 'percent',\r\n            },\r\n        },\r\n        date: {\r\n            short: {\r\n                month: 'numeric',\r\n                day: 'numeric',\r\n                year: '2-digit',\r\n            },\r\n            medium: {\r\n                month: 'short',\r\n                day: 'numeric',\r\n                year: 'numeric',\r\n            },\r\n            long: {\r\n                month: 'long',\r\n                day: 'numeric',\r\n                year: 'numeric',\r\n            },\r\n            full: {\r\n                weekday: 'long',\r\n                month: 'long',\r\n                day: 'numeric',\r\n                year: 'numeric',\r\n            },\r\n        },\r\n        time: {\r\n            short: {\r\n                hour: 'numeric',\r\n                minute: 'numeric',\r\n            },\r\n            medium: {\r\n                hour: 'numeric',\r\n                minute: 'numeric',\r\n                second: 'numeric',\r\n            },\r\n            long: {\r\n                hour: 'numeric',\r\n                minute: 'numeric',\r\n                second: 'numeric',\r\n                timeZoneName: 'short',\r\n            },\r\n            full: {\r\n                hour: 'numeric',\r\n                minute: 'numeric',\r\n                second: 'numeric',\r\n                timeZoneName: 'short',\r\n            },\r\n        },\r\n    };\r\n    return IntlMessageFormat;\r\n}());\r\nexport { IntlMessageFormat };\r\nexport default IntlMessageFormat;\r\n"]},"metadata":{},"sourceType":"module"}