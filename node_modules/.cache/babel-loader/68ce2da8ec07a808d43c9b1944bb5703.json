{"ast":null,"code":"var _s = $RefreshSig$();\n\n//** React Imports\nimport { useEffect } from 'react'; // ** Store & Actions\n\nimport { handleRTL } from '@store/actions/layout';\nimport { useDispatch, useSelector } from 'react-redux';\nexport var useRTL = function useRTL() {\n  _s();\n\n  // ** Store Vars\n  var dispatch = useDispatch();\n  var isRtl = useSelector(function (state) {\n    return state.layout.isRTL;\n  }); // ** Return a wrapped version of useState's setter function\n\n  var setValue = function setValue(value) {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(isRtl) : value;\n      dispatch(handleRTL(valueToStore));\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  useEffect(function () {\n    // ** Get HTML Tag\n    var element = document.getElementsByTagName('html')[0]; // ** If isRTL then add attr dir='rtl' with HTML else attr dir='ltr'\n\n    if (isRtl) {\n      element.setAttribute('dir', 'rtl');\n    } else {\n      element.setAttribute('dir', 'ltr');\n    }\n  }, [isRtl]);\n  return [isRtl, setValue];\n};\n\n_s(useRTL, \"bvotjOIwjvE2W8snyOVlqQxqT4s=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"sources":["D:/IMA/src/utility/hooks/useRTL.js"],"names":["useEffect","handleRTL","useDispatch","useSelector","useRTL","dispatch","isRtl","state","layout","isRTL","setValue","value","valueToStore","Function","error","console","log","element","document","getElementsByTagName","setAttribute"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,OAA1B,C,CAEA;;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAAA;;AAC1B;AACA,MAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,MAAMI,KAAK,GAAGH,WAAW,CAAC,UAAAI,KAAK;AAAA,WAAIA,KAAK,CAACC,MAAN,CAAaC,KAAjB;AAAA,GAAN,CAAzB,CAH0B,CAK1B;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxB,QAAI;AACF;AACA,UAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACL,KAAD,CAAjC,GAA2CK,KAAhE;AACAN,MAAAA,QAAQ,CAACJ,SAAS,CAACW,YAAD,CAAV,CAAR;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GATD;;AAWAd,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,QAAMiB,OAAO,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAAhB,CAFc,CAId;;AACA,QAAIb,KAAJ,EAAW;AACTW,MAAAA,OAAO,CAACG,YAAR,CAAqB,KAArB,EAA4B,KAA5B;AACD,KAFD,MAEO;AACLH,MAAAA,OAAO,CAACG,YAAR,CAAqB,KAArB,EAA4B,KAA5B;AACD;AACF,GAVQ,EAUN,CAACd,KAAD,CAVM,CAAT;AAYA,SAAO,CAACA,KAAD,EAAQI,QAAR,CAAP;AACD,CA9BM;;GAAMN,M;UAEMF,W,EACHC,W","sourcesContent":["//** React Imports\r\nimport { useEffect } from 'react'\r\n\r\n// ** Store & Actions\r\nimport { handleRTL } from '@store/actions/layout'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nexport const useRTL = () => {\r\n  // ** Store Vars\r\n  const dispatch = useDispatch()\r\n  const isRtl = useSelector(state => state.layout.isRTL)\r\n\r\n  // ** Return a wrapped version of useState's setter function\r\n  const setValue = value => {\r\n    try {\r\n      // ** Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(isRtl) : value\r\n      dispatch(handleRTL(valueToStore))\r\n    } catch (error) {\r\n      // ** A more advanced implementation would handle the error case\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // ** Get HTML Tag\r\n    const element = document.getElementsByTagName('html')[0]\r\n\r\n    // ** If isRTL then add attr dir='rtl' with HTML else attr dir='ltr'\r\n    if (isRtl) {\r\n      element.setAttribute('dir', 'rtl')\r\n    } else {\r\n      element.setAttribute('dir', 'ltr')\r\n    }\r\n  }, [isRtl])\r\n\r\n  return [isRtl, setValue]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}