{"ast":null,"code":"import _objectSpread from \"C:/Users/Shree/Downloads/newproject/full-version/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/Users/Shree/Downloads/newproject/full-version/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shree\\\\Downloads\\\\newproject\\\\full-version\\\\src\\\\@core\\\\components\\\\card-actions\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'; // ** Third Party Components\n\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport UiLoader from '@components/ui-loader';\nimport { ChevronDown, RotateCw, X } from 'react-feather';\nimport { Card, CardHeader, CardTitle, Collapse, Spinner } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar CardActions = function CardActions(props) {\n  _s();\n\n  // ** Props\n  var title = props.title,\n      actions = props.actions,\n      children = props.children,\n      collapseIcon = props.collapseIcon,\n      reloadIcon = props.reloadIcon,\n      removeIcon = props.removeIcon,\n      endReload = props.endReload; // ** States\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      reload = _useState2[0],\n      setReload = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      collapse = _useState4[0],\n      setCollapse = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      visibility = _useState6[0],\n      setVisibility = _useState6[1];\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n\n\n  var Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  }; // ** Action to call\n\n  var callAction = function callAction(action) {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse);\n\n      case 'remove':\n        return setVisibility(false);\n\n      case 'reload':\n        return setReload(true);\n\n      default:\n    }\n  }; // ** Renders card actions\n\n\n  var renderIcons = function renderIcons() {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n    if (Array.isArray(actions)) {\n      return actions.map(function (action, i) {\n        var Tag = Icons[action];\n        return /*#__PURE__*/_jsxDEV(Tag, {\n          className: classnames('cursor-pointer', {\n            'mr-50': i < actions.length - 1\n          }),\n          size: 15,\n          onClick: function onClick() {\n            return callAction(action);\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, _this);\n      });\n    } else {\n      var Tag = Icons[actions];\n      return /*#__PURE__*/_jsxDEV(Tag, {\n        className: \"cursor-pointer\",\n        size: 15,\n        onClick: function onClick() {\n          return callAction(actions);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 14\n      }, _this);\n    }\n  }; // ** Ends reload\n\n\n  var removeReload = function removeReload() {\n    setReload(false);\n  }; // ** If user passes endReload function call it.\n\n\n  useEffect(function () {\n    if (reload) {\n      endReload(removeReload);\n    }\n  }); // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n\n  var CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment; // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n\n  var BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment;\n  return /*#__PURE__*/_jsxDEV(BlockUiWrapper\n  /*eslint-disable */\n  , _objectSpread(_objectSpread({}, actions === 'reload' || actions.includes('reload') ? {\n    blocking: reload\n  } : {}), {}, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: classnames('card-action', {\n        'd-none': !visibility\n      }),\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          tag: \"h4\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-icons\",\n          children: renderIcons()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(CollapseWrapper, _objectSpread(_objectSpread({}, actions === 'collapse' || actions.includes('collapse') ? {\n        isOpen: collapse\n      } : {}), {}, {\n        children: children\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, _this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CardActions, \"H34FB3UQW6V15UpRvUt3rdzmeXw=\");\n\n_c = CardActions;\nexport default CardActions; // ** PropTypes\n\nCardActions.propTypes = {\n  title: PropTypes.string.isRequired,\n  collapseIcon: PropTypes.any,\n  removeIcon: PropTypes.any,\n  reloadIcon: PropTypes.any,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n  endReload: function endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (props['actions'] === 'reload' && props['endReload'] === undefined || props['actions'].includes('reload') && props['endReload'] === undefined) {\n      return new Error('Please provide a function to end reload!');\n    }\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CardActions\");","map":{"version":3,"sources":["C:/Users/Shree/Downloads/newproject/full-version/src/@core/components/card-actions/index.js"],"names":["Fragment","useState","useEffect","PropTypes","classnames","UiLoader","ChevronDown","RotateCw","X","Card","CardHeader","CardTitle","Collapse","Spinner","CardActions","props","title","actions","children","collapseIcon","reloadIcon","removeIcon","endReload","reload","setReload","collapse","setCollapse","visibility","setVisibility","Icons","remove","callAction","action","renderIcons","Array","isArray","map","i","Tag","length","removeReload","CollapseWrapper","includes","BlockUiWrapper","blocking","isOpen","propTypes","string","isRequired","any","oneOfType","arrayOf","undefined","Error"],"mappings":"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","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport UiLoader from '@components/ui-loader'\nimport { ChevronDown, RotateCw, X } from 'react-feather'\nimport { Card, CardHeader, CardTitle, Collapse, Spinner } from 'reactstrap'\n\nconst CardActions = props => {\n  // ** Props\n  const { title, actions, children, collapseIcon, reloadIcon, removeIcon, endReload } = props\n\n  // ** States\n  const [reload, setReload] = useState(false)\n  const [collapse, setCollapse] = useState(true)\n  const [visibility, setVisibility] = useState(true)\n\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n  const Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  }\n\n  // ** Action to call\n  const callAction = action => {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse)\n      case 'remove':\n        return setVisibility(false)\n      case 'reload':\n        return setReload(true)\n      default:\n    }\n  }\n\n  // ** Renders card actions\n  const renderIcons = () => {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n\n    if (Array.isArray(actions)) {\n      return actions.map((action, i) => {\n        const Tag = Icons[action]\n        return (\n          <Tag\n            key={i}\n            className={classnames('cursor-pointer', {\n              'mr-50': i < actions.length - 1\n            })}\n            size={15}\n            onClick={() => callAction(action)}\n          />\n        )\n      })\n    } else {\n      const Tag = Icons[actions]\n      return <Tag className='cursor-pointer' size={15} onClick={() => callAction(actions)} />\n    }\n  }\n\n  // ** Ends reload\n  const removeReload = () => {\n    setReload(false)\n  }\n\n  // ** If user passes endReload function call it.\n  useEffect(() => {\n    if (reload) {\n      endReload(removeReload)\n    }\n  })\n\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment\n\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment\n\n  return (\n    <BlockUiWrapper\n      /*eslint-disable */\n      {...(actions === 'reload' || actions.includes('reload')\n        ? {\n            blocking: reload\n          }\n        : {})}\n      /*eslint-enable */\n    >\n      <Card\n        className={classnames('card-action', {\n          'd-none': !visibility\n        })}\n      >\n        <CardHeader>\n          <CardTitle tag='h4'>{title}</CardTitle>\n          <div className='action-icons'>{renderIcons()}</div>\n        </CardHeader>\n        <CollapseWrapper {...(actions === 'collapse' || actions.includes('collapse') ? { isOpen: collapse } : {})}>\n          {children}\n        </CollapseWrapper>\n      </Card>\n    </BlockUiWrapper>\n  )\n}\n\nexport default CardActions\n\n// ** PropTypes\nCardActions.propTypes = {\n  title: PropTypes.string.isRequired,\n  collapseIcon: PropTypes.any,\n  removeIcon: PropTypes.any,\n  reloadIcon: PropTypes.any,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n  endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (\n      (props['actions'] === 'reload' && props['endReload'] === undefined) ||\n      (props['actions'].includes('reload') && props['endReload'] === undefined)\n    ) {\n      return new Error('Please provide a function to end reload!')\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}