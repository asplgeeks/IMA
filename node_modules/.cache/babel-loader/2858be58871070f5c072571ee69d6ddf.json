{"ast":null,"code":"import _slicedToArray from \"C:/Users/Shree/Downloads/newproject/full-version/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:/Users/Shree/Downloads/newproject/full-version/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shree\\\\Downloads\\\\newproject\\\\full-version\\\\src\\\\utility\\\\context\\\\Internationalization.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { useState, createContext } from 'react'; // ** Intl Provider Import\n\nimport { IntlProvider } from 'react-intl'; // ** Core Language Data\n\nimport messagesEn from '@assets/data/locales/en.json';\nimport messagesDe from '@assets/data/locales/de.json';\nimport messagesFr from '@assets/data/locales/fr.json';\nimport messagesPt from '@assets/data/locales/pt.json'; // ** User Language Data\n\nimport userMessagesEn from '@src/assets/data/locales/en.json';\nimport userMessagesDe from '@src/assets/data/locales/de.json';\nimport userMessagesFr from '@src/assets/data/locales/fr.json';\nimport userMessagesPt from '@src/assets/data/locales/pt.json'; // ** Menu msg obj\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar menuMessages = {\n  en: _objectSpread(_objectSpread({}, messagesEn), userMessagesEn),\n  de: _objectSpread(_objectSpread({}, messagesDe), userMessagesDe),\n  fr: _objectSpread(_objectSpread({}, messagesFr), userMessagesFr),\n  pt: _objectSpread(_objectSpread({}, messagesPt), userMessagesPt)\n}; // ** Create Context\n\nvar Context = /*#__PURE__*/createContext();\n\nvar IntlProviderWrapper = function IntlProviderWrapper(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  // ** States\n  var _useState = useState('en'),\n      _useState2 = _slicedToArray(_useState, 2),\n      locale = _useState2[0],\n      setLocale = _useState2[1];\n\n  var _useState3 = useState(menuMessages['en']),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messages = _useState4[0],\n      setMessages = _useState4[1]; // ** Switches Language\n\n\n  var switchLanguage = function switchLanguage(lang) {\n    setLocale(lang);\n    setMessages(menuMessages[lang]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      locale: locale,\n      switchLanguage: switchLanguage\n    },\n    children: /*#__PURE__*/_jsxDEV(IntlProvider, {\n      locale: locale,\n      messages: messages,\n      defaultLocale: \"en\",\n      children: children\n    }, locale, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(IntlProviderWrapper, \"TKt8ZIK4MNlnlYDCbfZq/lCylbU=\");\n\n_c = IntlProviderWrapper;\nexport { IntlProviderWrapper, Context as IntlContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"IntlProviderWrapper\");","map":{"version":3,"sources":["C:/Users/Shree/Downloads/newproject/full-version/src/utility/context/Internationalization.js"],"names":["useState","createContext","IntlProvider","messagesEn","messagesDe","messagesFr","messagesPt","userMessagesEn","userMessagesDe","userMessagesFr","userMessagesPt","menuMessages","en","de","fr","pt","Context","IntlProviderWrapper","children","locale","setLocale","messages","setMessages","switchLanguage","lang","IntlContext"],"mappings":";;;;;;;AAAA;AACA,SAASA,QAAT,EAAmBC,aAAnB,QAAwC,OAAxC,C,CAEA;;AACA,SAASC,YAAT,QAA6B,YAA7B,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,cAAP,MAA2B,kCAA3B,C,CAEA;;;AACA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,EAAE,kCAAOT,UAAP,GAAsBI,cAAtB,CADiB;AAEnBM,EAAAA,EAAE,kCAAOT,UAAP,GAAsBI,cAAtB,CAFiB;AAGnBM,EAAAA,EAAE,kCAAOT,UAAP,GAAsBI,cAAtB,CAHiB;AAInBM,EAAAA,EAAE,kCAAOT,UAAP,GAAsBI,cAAtB;AAJiB,CAArB,C,CAOA;;AACA,IAAMM,OAAO,gBAAGf,aAAa,EAA7B;;AAEA,IAAMgB,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAC5C;AACA,kBAA4BlB,QAAQ,CAAC,IAAD,CAApC;AAAA;AAAA,MAAOmB,MAAP;AAAA,MAAeC,SAAf;;AACA,mBAAgCpB,QAAQ,CAACW,YAAY,CAAC,IAAD,CAAb,CAAxC;AAAA;AAAA,MAAOU,QAAP;AAAA,MAAiBC,WAAjB,iBAH4C,CAK5C;;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,IAAI,EAAI;AAC7BJ,IAAAA,SAAS,CAACI,IAAD,CAAT;AACAF,IAAAA,WAAW,CAACX,YAAY,CAACa,IAAD,CAAb,CAAX;AACD,GAHD;;AAKA,sBACE,QAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAEL,MAAAA,MAAM,EAANA,MAAF;AAAUI,MAAAA,cAAc,EAAdA;AAAV,KAAzB;AAAA,2BACE,QAAC,YAAD;AAA2B,MAAA,MAAM,EAAEJ,MAAnC;AAA2C,MAAA,QAAQ,EAAEE,QAArD;AAA+D,MAAA,aAAa,EAAC,IAA7E;AAAA,gBACGH;AADH,OAAmBC,MAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CAlBD;;GAAMF,mB;;KAAAA,mB;AAoBN,SAASA,mBAAT,EAA8BD,OAAO,IAAIS,WAAzC","sourcesContent":["// ** React Imports\nimport { useState, createContext } from 'react'\n\n// ** Intl Provider Import\nimport { IntlProvider } from 'react-intl'\n\n// ** Core Language Data\nimport messagesEn from '@assets/data/locales/en.json'\nimport messagesDe from '@assets/data/locales/de.json'\nimport messagesFr from '@assets/data/locales/fr.json'\nimport messagesPt from '@assets/data/locales/pt.json'\n\n// ** User Language Data\nimport userMessagesEn from '@src/assets/data/locales/en.json'\nimport userMessagesDe from '@src/assets/data/locales/de.json'\nimport userMessagesFr from '@src/assets/data/locales/fr.json'\nimport userMessagesPt from '@src/assets/data/locales/pt.json'\n\n// ** Menu msg obj\nconst menuMessages = {\n  en: { ...messagesEn, ...userMessagesEn },\n  de: { ...messagesDe, ...userMessagesDe },\n  fr: { ...messagesFr, ...userMessagesFr },\n  pt: { ...messagesPt, ...userMessagesPt }\n}\n\n// ** Create Context\nconst Context = createContext()\n\nconst IntlProviderWrapper = ({ children }) => {\n  // ** States\n  const [locale, setLocale] = useState('en')\n  const [messages, setMessages] = useState(menuMessages['en'])\n\n  // ** Switches Language\n  const switchLanguage = lang => {\n    setLocale(lang)\n    setMessages(menuMessages[lang])\n  }\n\n  return (\n    <Context.Provider value={{ locale, switchLanguage }}>\n      <IntlProvider key={locale} locale={locale} messages={messages} defaultLocale='en'>\n        {children}\n      </IntlProvider>\n    </Context.Provider>\n  )\n}\n\nexport { IntlProviderWrapper, Context as IntlContext }\n"]},"metadata":{},"sourceType":"module"}