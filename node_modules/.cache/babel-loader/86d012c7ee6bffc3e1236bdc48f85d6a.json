{"ast":null,"code":"import _objectSpread from \"C:/Users/Shree/Downloads/newproject/full-version/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Shree\\\\Downloads\\\\newproject\\\\full-version\\\\src\\\\views\\\\apps\\\\calendar\\\\Calendar.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\n// ** React Import\nimport { useEffect, useRef, memo, Fragment } from 'react'; // ** Full Calendar & it's Plugins\n\nimport FullCalendar from '@fullcalendar/react';\nimport listPlugin from '@fullcalendar/list';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction'; // ** Custom Components\n\nimport Avatar from '@components/avatar'; // ** Third Party Components\n\nimport { toast } from 'react-toastify';\nimport { Card, CardBody } from 'reactstrap';\nimport { Menu, Check } from 'react-feather'; // ** Toast Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar ToastComponent = function ToastComponent(_ref) {\n  var title = _ref.title,\n      icon = _ref.icon,\n      color = _ref.color;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toastify-header pb-0\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          size: \"sm\",\n          color: color,\n          icon: icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"toast-title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 3\n  }, _this);\n};\n\n_c = ToastComponent;\n\nvar Calendar = function Calendar(props) {\n  _s();\n\n  // ** Refs\n  var calendarRef = useRef(null); // ** Props\n\n  var store = props.store,\n      isRtl = props.isRtl,\n      dispatch = props.dispatch,\n      calendarsColor = props.calendarsColor,\n      calendarApi = props.calendarApi,\n      setCalendarApi = props.setCalendarApi,\n      handleAddEventSidebar = props.handleAddEventSidebar,\n      blankEvent = props.blankEvent,\n      toggleSidebar = props.toggleSidebar,\n      selectEvent = props.selectEvent,\n      updateEvent = props.updateEvent; // ** UseEffect checks for CalendarAPI Update\n\n  useEffect(function () {\n    if (calendarApi === null) {\n      setCalendarApi(calendarRef.current.getApi());\n    }\n  }, [calendarApi]); // ** calendarOptions(Props)\n\n  var calendarOptions = {\n    events: store.events.length ? store.events : [],\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: 'dayGridMonth',\n    headerToolbar: {\n      start: 'sidebarToggle, prev,next, title',\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n    },\n\n    /*\n      Enable dragging and resizing event\n      ? Docs: https://fullcalendar.io/docs/editable\n    */\n    editable: true,\n\n    /*\n      Enable resizing event from start\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\n    */\n    eventResizableFromStart: true,\n\n    /*\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\n      ? Docs: https://fullcalendar.io/docs/dragScroll\n    */\n    dragScroll: true,\n\n    /*\n      Max number of events within a given day\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\n    */\n    dayMaxEvents: 2,\n\n    /*\n      Determines if day names and week names are clickable\n      ? Docs: https://fullcalendar.io/docs/navLinks\n    */\n    navLinks: true,\n    eventClassNames: function eventClassNames(_ref2) {\n      var calendarEvent = _ref2.event;\n      // eslint-disable-next-line no-underscore-dangle\n      var colorName = calendarsColor[calendarEvent._def.extendedProps.calendar];\n      return [// Background Color\n      \"bg-light-\".concat(colorName)];\n    },\n    eventClick: function eventClick(_ref3) {\n      var clickedEvent = _ref3.event;\n      dispatch(selectEvent(clickedEvent));\n      handleAddEventSidebar(); // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n    customButtons: {\n      sidebarToggle: {\n        text: /*#__PURE__*/_jsxDEV(Menu, {\n          className: \"d-xl-none d-block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }, _this),\n        click: function click() {\n          toggleSidebar(true);\n        }\n      }\n    },\n    dateClick: function dateClick(info) {\n      var ev = blankEvent;\n      ev.start = info.date;\n      ev.end = info.date;\n      dispatch(selectEvent(ev));\n      handleAddEventSidebar();\n    },\n\n    /*\n      Handle event drop (Also include dragged event)\n      ? Docs: https://fullcalendar.io/docs/eventDrop\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\n    */\n    eventDrop: function eventDrop(_ref4) {\n      var droppedEvent = _ref4.event;\n      dispatch(updateEvent(droppedEvent));\n      toast.success( /*#__PURE__*/_jsxDEV(ToastComponent, {\n        title: \"Event Updated\",\n        color: \"success\",\n        icon: /*#__PURE__*/_jsxDEV(Check, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 81\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      });\n    },\n\n    /*\n      Handle event resize\n      ? Docs: https://fullcalendar.io/docs/eventResize\n    */\n    eventResize: function eventResize(_ref5) {\n      var resizedEvent = _ref5.event;\n      dispatch(updateEvent(resizedEvent));\n      toast.success( /*#__PURE__*/_jsxDEV(ToastComponent, {\n        title: \"Event Updated\",\n        color: \"success\",\n        icon: /*#__PURE__*/_jsxDEV(Check, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 81\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      });\n    },\n    ref: calendarRef,\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"shadow-none border-0 mb-0 rounded-0\",\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      className: \"pb-0\",\n      children: [/*#__PURE__*/_jsxDEV(FullCalendar, _objectSpread({}, calendarOptions), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, _this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Calendar, \"HuswXQNKgAj2xlMza6JPwM9t0kA=\");\n\n_c2 = Calendar;\nexport default _c3 = /*#__PURE__*/memo(Calendar);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ToastComponent\");\n$RefreshReg$(_c2, \"Calendar\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["C:/Users/Shree/Downloads/newproject/full-version/src/views/apps/calendar/Calendar.js"],"names":["useEffect","useRef","memo","Fragment","FullCalendar","listPlugin","dayGridPlugin","timeGridPlugin","interactionPlugin","Avatar","toast","Card","CardBody","Menu","Check","ToastComponent","title","icon","color","Calendar","props","calendarRef","store","isRtl","dispatch","calendarsColor","calendarApi","setCalendarApi","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","current","getApi","calendarOptions","events","length","plugins","initialView","headerToolbar","start","end","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","calendarEvent","event","colorName","_def","extendedProps","calendar","eventClick","clickedEvent","customButtons","sidebarToggle","text","click","dateClick","info","ev","date","eventDrop","droppedEvent","success","autoClose","hideProgressBar","closeButton","eventResize","resizedEvent","ref","direction"],"mappings":"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","sourcesContent":["// ** React Import\nimport { useEffect, useRef, memo, Fragment } from 'react'\n\n// ** Full Calendar & it's Plugins\nimport FullCalendar from '@fullcalendar/react'\nimport listPlugin from '@fullcalendar/list'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport { toast } from 'react-toastify'\nimport { Card, CardBody } from 'reactstrap'\nimport { Menu, Check } from 'react-feather'\n\n// ** Toast Component\nconst ToastComponent = ({ title, icon, color }) => (\n  <Fragment>\n    <div className='toastify-header pb-0'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color={color} icon={icon} />\n        <h6 className='toast-title'>{title}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst Calendar = props => {\n  // ** Refs\n  const calendarRef = useRef(null)\n\n  // ** Props\n  const {\n    store,\n    isRtl,\n    dispatch,\n    calendarsColor,\n    calendarApi,\n    setCalendarApi,\n    handleAddEventSidebar,\n    blankEvent,\n    toggleSidebar,\n    selectEvent,\n    updateEvent\n  } = props\n\n  // ** UseEffect checks for CalendarAPI Update\n  useEffect(() => {\n    if (calendarApi === null) {\n      setCalendarApi(calendarRef.current.getApi())\n    }\n  }, [calendarApi])\n\n  // ** calendarOptions(Props)\n  const calendarOptions = {\n    events: store.events.length ? store.events : [],\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: 'dayGridMonth',\n    headerToolbar: {\n      start: 'sidebarToggle, prev,next, title',\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n    },\n    /*\n      Enable dragging and resizing event\n      ? Docs: https://fullcalendar.io/docs/editable\n    */\n    editable: true,\n\n    /*\n      Enable resizing event from start\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\n    */\n    eventResizableFromStart: true,\n\n    /*\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\n      ? Docs: https://fullcalendar.io/docs/dragScroll\n    */\n    dragScroll: true,\n\n    /*\n      Max number of events within a given day\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\n    */\n    dayMaxEvents: 2,\n\n    /*\n      Determines if day names and week names are clickable\n      ? Docs: https://fullcalendar.io/docs/navLinks\n    */\n    navLinks: true,\n\n    eventClassNames({ event: calendarEvent }) {\n      // eslint-disable-next-line no-underscore-dangle\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\n\n      return [\n        // Background Color\n        `bg-light-${colorName}`\n      ]\n    },\n\n    eventClick({ event: clickedEvent }) {\n      dispatch(selectEvent(clickedEvent))\n      handleAddEventSidebar()\n\n      // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n\n    customButtons: {\n      sidebarToggle: {\n        text: <Menu className='d-xl-none d-block' />,\n        click() {\n          toggleSidebar(true)\n        }\n      }\n    },\n\n    dateClick(info) {\n      const ev = blankEvent\n      ev.start = info.date\n      ev.end = info.date\n      dispatch(selectEvent(ev))\n      handleAddEventSidebar()\n    },\n\n    /*\n      Handle event drop (Also include dragged event)\n      ? Docs: https://fullcalendar.io/docs/eventDrop\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\n    */\n    eventDrop({ event: droppedEvent }) {\n      dispatch(updateEvent(droppedEvent))\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      })\n    },\n\n    /*\n      Handle event resize\n      ? Docs: https://fullcalendar.io/docs/eventResize\n    */\n    eventResize({ event: resizedEvent }) {\n      dispatch(updateEvent(resizedEvent))\n      toast.success(<ToastComponent title='Event Updated' color='success' icon={<Check />} />, {\n        autoClose: 2000,\n        hideProgressBar: true,\n        closeButton: false\n      })\n    },\n\n    ref: calendarRef,\n\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  }\n\n  return (\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\n      <CardBody className='pb-0'>\n        <FullCalendar {...calendarOptions} />{' '}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default memo(Calendar)\n"]},"metadata":{},"sourceType":"module"}