{"ast":null,"code":"import _objectSpread from\"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"label\",\"hideIcon\",\"showIcon\",\"visible\",\"className\",\"htmlFor\",\"placeholder\",\"iconSize\",\"inputClassName\"];// ** React Imports\nimport{Fragment,useState}from'react';// ** Third Party Components\nimport classnames from'classnames';import{Eye,EyeOff}from'react-feather';import{InputGroup,InputGroupAddon,Input,InputGroupText,Label,inputClassName}from'reactstrap';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var InputPasswordToggle=function InputPasswordToggle(props){// ** Props\nvar label=props.label,hideIcon=props.hideIcon,showIcon=props.showIcon,visible=props.visible,className=props.className,htmlFor=props.htmlFor,placeholder=props.placeholder,iconSize=props.iconSize,inputClassName=props.inputClassName,rest=_objectWithoutProperties(props,_excluded);// ** State\nvar _useState=useState(visible),_useState2=_slicedToArray(_useState,2),inputVisibility=_useState2[0],setInputVisibility=_useState2[1];// ** Renders Icon Based On Visibility\nvar renderIcon=function renderIcon(){var size=iconSize?iconSize:14;if(inputVisibility===false){return hideIcon?hideIcon:/*#__PURE__*/_jsx(Eye,{size:size});}else{return showIcon?showIcon:/*#__PURE__*/_jsx(EyeOff,{size:size});}};return/*#__PURE__*/_jsxs(Fragment,{children:[label?/*#__PURE__*/_jsx(Label,{for:htmlFor,children:label}):null,/*#__PURE__*/_jsxs(InputGroup,{className:classnames(_defineProperty({},className,className)),children:[/*#__PURE__*/_jsx(Input,_objectSpread(_objectSpread({type:inputVisibility===false?'password':'text',placeholder:placeholder?placeholder:'············',className:classnames(_defineProperty({},inputClassName,inputClassName))/*eslint-disable */},label&&htmlFor?{id:htmlFor}:{}),rest)),/*#__PURE__*/_jsx(InputGroupAddon,{addonType:\"append\",onClick:function onClick(){return setInputVisibility(!inputVisibility);},children:/*#__PURE__*/_jsx(InputGroupText,{className:\"cursor-pointer\",children:renderIcon()})})]})]});};export default InputPasswordToggle;// ** PropTypes\n// ** Default Props\nInputPasswordToggle.defaultProps={visible:false};","map":{"version":3,"sources":["D:/nodejs/IMA/src/@core/components/input-password-toggle/index.js"],"names":["Fragment","useState","classnames","Eye","EyeOff","InputGroup","InputGroupAddon","Input","InputGroupText","Label","inputClassName","InputPasswordToggle","props","label","hideIcon","showIcon","visible","className","htmlFor","placeholder","iconSize","rest","inputVisibility","setInputVisibility","renderIcon","size","id","defaultProps"],"mappings":"6pBAAA;AACA,OAASA,QAAT,CAAmBC,QAAnB,KAAmC,OAAnC,CAEA;AAEA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,OAASC,GAAT,CAAcC,MAAd,KAA4B,eAA5B,CACA,OAASC,UAAT,CAAqBC,eAArB,CAAsCC,KAAtC,CAA6CC,cAA7C,CAA6DC,KAA7D,CAAoEC,cAApE,KAA0F,YAA1F,C,wFAEA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAAC,KAAK,CAAI,CACnC;AACA,GACEC,CAAAA,KADF,CAWID,KAXJ,CACEC,KADF,CAEEC,QAFF,CAWIF,KAXJ,CAEEE,QAFF,CAGEC,QAHF,CAWIH,KAXJ,CAGEG,QAHF,CAIEC,OAJF,CAWIJ,KAXJ,CAIEI,OAJF,CAKEC,SALF,CAWIL,KAXJ,CAKEK,SALF,CAMEC,OANF,CAWIN,KAXJ,CAMEM,OANF,CAOEC,WAPF,CAWIP,KAXJ,CAOEO,WAPF,CAQEC,QARF,CAWIR,KAXJ,CAQEQ,QARF,CASEV,cATF,CAWIE,KAXJ,CASEF,cATF,CAUKW,IAVL,0BAWIT,KAXJ,YAaA;AACA,cAA8CX,QAAQ,CAACe,OAAD,CAAtD,wCAAOM,eAAP,eAAwBC,kBAAxB,eAEA;AACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB,GAAMC,CAAAA,IAAI,CAAGL,QAAQ,CAAGA,QAAH,CAAc,EAAnC,CAEA,GAAIE,eAAe,GAAK,KAAxB,CAA+B,CAC7B,MAAOR,CAAAA,QAAQ,CAAGA,QAAH,cAAc,KAAC,GAAD,EAAK,IAAI,CAAEW,IAAX,EAA7B,CACD,CAFD,IAEO,CACL,MAAOV,CAAAA,QAAQ,CAAGA,QAAH,cAAc,KAAC,MAAD,EAAQ,IAAI,CAAEU,IAAd,EAA7B,CACD,CACF,CARD,CAUA,mBACE,MAAC,QAAD,YACGZ,KAAK,cAAG,KAAC,KAAD,EAAO,GAAG,CAAEK,OAAZ,UAAsBL,KAAtB,EAAH,CAA0C,IADlD,cAEE,MAAC,UAAD,EACE,SAAS,CAAEX,UAAU,oBAClBe,SADkB,CACNA,SADM,EADvB,wBAKE,KAAC,KAAD,8BACE,IAAI,CAAEK,eAAe,GAAK,KAApB,CAA4B,UAA5B,CAAyC,MADjD,CAEE,WAAW,CAAEH,WAAW,CAAGA,WAAH,CAAiB,cAF3C,CAGE,SAAS,CAAEjB,UAAU,oBAClBQ,cADkB,CACDA,cADC,EAGrB,mBANF,EAOOG,KAAK,EAAIK,OAAT,CACD,CACEQ,EAAE,CAAER,OADN,CADC,CAID,EAXN,EAYMG,IAZN,EALF,cAoBE,KAAC,eAAD,EAAiB,SAAS,CAAC,QAA3B,CAAoC,OAAO,CAAE,yBAAME,CAAAA,kBAAkB,CAAC,CAACD,eAAF,CAAxB,EAA7C,uBACE,KAAC,cAAD,EAAgB,SAAS,CAAC,gBAA1B,UAA4CE,UAAU,EAAtD,EADF,EApBF,GAFF,GADF,CA6BD,CA1DD,CA4DA,cAAeb,CAAAA,mBAAf,CAEA;AAuBA;AACAA,mBAAmB,CAACgB,YAApB,CAAmC,CACjCX,OAAO,CAAE,KADwB,CAAnC","sourcesContent":["// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"]},"metadata":{},"sourceType":"module"}