{"ast":null,"code":"import _classCallCheck from \"D:/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/*\r\n * Copyright 2015, Yahoo Inc.\r\n * Copyrights licensed under the New BSD License.\r\n * See the accompanying LICENSE file for terms.\r\n */\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nimport { invariant } from '@formatjs/intl-utils';\nvar MINUTE = 60;\nvar HOUR = 60 * 60;\nvar DAY = 60 * 60 * 24;\n\nfunction selectUnit(seconds) {\n  var absValue = Math.abs(seconds);\n\n  if (absValue < MINUTE) {\n    return 'second';\n  }\n\n  if (absValue < HOUR) {\n    return 'minute';\n  }\n\n  if (absValue < DAY) {\n    return 'hour';\n  }\n\n  return 'day';\n}\n\nfunction getDurationInSeconds(unit) {\n  switch (unit) {\n    case 'second':\n      return 1;\n\n    case 'minute':\n      return MINUTE;\n\n    case 'hour':\n      return HOUR;\n\n    default:\n      return DAY;\n  }\n}\n\nfunction valueToSeconds(value, unit) {\n  if (!value) {\n    return 0;\n  }\n\n  switch (unit) {\n    case 'second':\n      return value;\n\n    case 'minute':\n      return value * MINUTE;\n\n    default:\n      return value * HOUR;\n  }\n}\n\nvar INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\n\nfunction canIncrement() {\n  var unit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'second';\n  return INCREMENTABLE_UNITS.includes(unit);\n}\n\nexport var FormattedRelativeTime = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(FormattedRelativeTime, _React$PureComponent);\n\n  var _super = _createSuper(FormattedRelativeTime);\n\n  function FormattedRelativeTime(props) {\n    var _this;\n\n    _classCallCheck(this, FormattedRelativeTime);\n\n    _this = _super.call(this, props); // Public for testing\n\n    _this._updateTimer = null;\n    _this.state = {\n      prevUnit: _this.props.unit,\n      prevValue: _this.props.value,\n      currentValueInSeconds: canIncrement(_this.props.unit) ? valueToSeconds(_this.props.value, _this.props.unit) : 0\n    };\n    invariant(!props.updateIntervalInSeconds || !!(props.updateIntervalInSeconds && canIncrement(props.unit)), 'Cannot schedule update with unit longer than hour');\n    return _this;\n  }\n\n  _createClass(FormattedRelativeTime, [{\n    key: \"scheduleNextUpdate\",\n    value: function scheduleNextUpdate(_ref, _ref2) {\n      var _this2 = this;\n\n      var updateIntervalInSeconds = _ref.updateIntervalInSeconds,\n          unit = _ref.unit;\n      var currentValueInSeconds = _ref2.currentValueInSeconds;\n      clearTimeout(this._updateTimer);\n      this._updateTimer = null; // If there's no interval and we cannot increment this unit, do nothing\n\n      if (!updateIntervalInSeconds || !canIncrement(unit)) {\n        return;\n      } // Figure out the next interesting time\n\n\n      var nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\n      var nextUnit = selectUnit(nextValueInSeconds); // We've reached the max auto incrementable unit, don't schedule another update\n\n      if (nextUnit === 'day') {\n        return;\n      }\n\n      var unitDuration = getDurationInSeconds(nextUnit);\n      var remainder = nextValueInSeconds % unitDuration;\n      var prevInterestingValueInSeconds = nextValueInSeconds - remainder;\n      var nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds ? prevInterestingValueInSeconds - unitDuration : prevInterestingValueInSeconds;\n      var delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\n      this._updateTimer = setTimeout(function () {\n        return _this2.setState({\n          currentValueInSeconds: nextInterestingValueInSeconds\n        });\n      }, delayInSeconds * 1e3);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scheduleNextUpdate(this.props, this.state);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scheduleNextUpdate(this.props, this.state);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this._updateTimer);\n      this._updateTimer = null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(Context.Consumer, null, function (intl) {\n        invariantIntlContext(intl);\n        var formatRelativeTime = intl.formatRelativeTime,\n            Text = intl.textComponent;\n        var _this3$props = _this3.props,\n            children = _this3$props.children,\n            value = _this3$props.value,\n            unit = _this3$props.unit,\n            updateIntervalInSeconds = _this3$props.updateIntervalInSeconds;\n        var currentValueInSeconds = _this3.state.currentValueInSeconds;\n        var currentValue = value || 0;\n        var currentUnit = unit;\n\n        if (canIncrement(unit) && typeof currentValueInSeconds === 'number' && updateIntervalInSeconds) {\n          currentUnit = selectUnit(currentValueInSeconds);\n          var unitDuration = getDurationInSeconds(currentUnit);\n          currentValue = Math.round(currentValueInSeconds / unitDuration);\n        }\n\n        var formattedRelativeTime = formatRelativeTime(currentValue, currentUnit, Object.assign({}, _this3.props));\n\n        if (typeof children === 'function') {\n          return children(formattedRelativeTime);\n        }\n\n        if (Text) {\n          return React.createElement(Text, null, formattedRelativeTime);\n        }\n\n        return formattedRelativeTime;\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.unit !== state.prevUnit || props.value !== state.prevValue) {\n        return {\n          prevValue: props.value,\n          prevUnit: props.unit,\n          currentValueInSeconds: canIncrement(props.unit) ? valueToSeconds(props.value, props.unit) : 0\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return FormattedRelativeTime;\n}(React.PureComponent);\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\nFormattedRelativeTime.defaultProps = {\n  value: 0,\n  unit: 'second'\n};\nexport default FormattedRelativeTime;","map":{"version":3,"sources":["D:/IMA/node_modules/react-intl/lib/components/relative.js"],"names":["React","Context","invariantIntlContext","invariant","MINUTE","HOUR","DAY","selectUnit","seconds","absValue","Math","abs","getDurationInSeconds","unit","valueToSeconds","value","INCREMENTABLE_UNITS","canIncrement","includes","FormattedRelativeTime","props","_updateTimer","state","prevUnit","prevValue","currentValueInSeconds","updateIntervalInSeconds","clearTimeout","nextValueInSeconds","nextUnit","unitDuration","remainder","prevInterestingValueInSeconds","nextInterestingValueInSeconds","delayInSeconds","setTimeout","setState","scheduleNextUpdate","createElement","Consumer","intl","formatRelativeTime","Text","textComponent","children","currentValue","currentUnit","round","formattedRelativeTime","Object","assign","PureComponent","displayName","defaultProps"],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2015, Yahoo Inc.\r\n * Copyrights licensed under the New BSD License.\r\n * See the accompanying LICENSE file for terms.\r\n */\r\nimport * as React from 'react';\r\nimport { Context } from './injectIntl';\r\nimport { invariantIntlContext } from '../utils';\r\nimport { invariant } from '@formatjs/intl-utils';\r\nconst MINUTE = 60;\r\nconst HOUR = 60 * 60;\r\nconst DAY = 60 * 60 * 24;\r\nfunction selectUnit(seconds) {\r\n    const absValue = Math.abs(seconds);\r\n    if (absValue < MINUTE) {\r\n        return 'second';\r\n    }\r\n    if (absValue < HOUR) {\r\n        return 'minute';\r\n    }\r\n    if (absValue < DAY) {\r\n        return 'hour';\r\n    }\r\n    return 'day';\r\n}\r\nfunction getDurationInSeconds(unit) {\r\n    switch (unit) {\r\n        case 'second':\r\n            return 1;\r\n        case 'minute':\r\n            return MINUTE;\r\n        case 'hour':\r\n            return HOUR;\r\n        default:\r\n            return DAY;\r\n    }\r\n}\r\nfunction valueToSeconds(value, unit) {\r\n    if (!value) {\r\n        return 0;\r\n    }\r\n    switch (unit) {\r\n        case 'second':\r\n            return value;\r\n        case 'minute':\r\n            return value * MINUTE;\r\n        default:\r\n            return value * HOUR;\r\n    }\r\n}\r\nconst INCREMENTABLE_UNITS = ['second', 'minute', 'hour'];\r\nfunction canIncrement(unit = 'second') {\r\n    return INCREMENTABLE_UNITS.includes(unit);\r\n}\r\nexport class FormattedRelativeTime extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        // Public for testing\r\n        this._updateTimer = null;\r\n        this.state = {\r\n            prevUnit: this.props.unit,\r\n            prevValue: this.props.value,\r\n            currentValueInSeconds: canIncrement(this.props.unit)\r\n                ? valueToSeconds(this.props.value, this.props.unit)\r\n                : 0,\r\n        };\r\n        invariant(!props.updateIntervalInSeconds ||\r\n            !!(props.updateIntervalInSeconds && canIncrement(props.unit)), 'Cannot schedule update with unit longer than hour');\r\n    }\r\n    scheduleNextUpdate({ updateIntervalInSeconds, unit }, { currentValueInSeconds }) {\r\n        clearTimeout(this._updateTimer);\r\n        this._updateTimer = null;\r\n        // If there's no interval and we cannot increment this unit, do nothing\r\n        if (!updateIntervalInSeconds || !canIncrement(unit)) {\r\n            return;\r\n        }\r\n        // Figure out the next interesting time\r\n        const nextValueInSeconds = currentValueInSeconds - updateIntervalInSeconds;\r\n        const nextUnit = selectUnit(nextValueInSeconds);\r\n        // We've reached the max auto incrementable unit, don't schedule another update\r\n        if (nextUnit === 'day') {\r\n            return;\r\n        }\r\n        const unitDuration = getDurationInSeconds(nextUnit);\r\n        const remainder = nextValueInSeconds % unitDuration;\r\n        const prevInterestingValueInSeconds = nextValueInSeconds - remainder;\r\n        const nextInterestingValueInSeconds = prevInterestingValueInSeconds >= currentValueInSeconds\r\n            ? prevInterestingValueInSeconds - unitDuration\r\n            : prevInterestingValueInSeconds;\r\n        const delayInSeconds = Math.abs(nextInterestingValueInSeconds - currentValueInSeconds);\r\n        this._updateTimer = setTimeout(() => this.setState({\r\n            currentValueInSeconds: nextInterestingValueInSeconds,\r\n        }), delayInSeconds * 1e3);\r\n    }\r\n    componentDidMount() {\r\n        this.scheduleNextUpdate(this.props, this.state);\r\n    }\r\n    componentDidUpdate() {\r\n        this.scheduleNextUpdate(this.props, this.state);\r\n    }\r\n    componentWillUnmount() {\r\n        clearTimeout(this._updateTimer);\r\n        this._updateTimer = null;\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.unit !== state.prevUnit || props.value !== state.prevValue) {\r\n            return {\r\n                prevValue: props.value,\r\n                prevUnit: props.unit,\r\n                currentValueInSeconds: canIncrement(props.unit)\r\n                    ? valueToSeconds(props.value, props.unit)\r\n                    : 0,\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n        return (React.createElement(Context.Consumer, null, (intl) => {\r\n            invariantIntlContext(intl);\r\n            const { formatRelativeTime, textComponent: Text } = intl;\r\n            const { children, value, unit, updateIntervalInSeconds } = this.props;\r\n            const { currentValueInSeconds } = this.state;\r\n            let currentValue = value || 0;\r\n            let currentUnit = unit;\r\n            if (canIncrement(unit) &&\r\n                typeof currentValueInSeconds === 'number' &&\r\n                updateIntervalInSeconds) {\r\n                currentUnit = selectUnit(currentValueInSeconds);\r\n                const unitDuration = getDurationInSeconds(currentUnit);\r\n                currentValue = Math.round(currentValueInSeconds / unitDuration);\r\n            }\r\n            const formattedRelativeTime = formatRelativeTime(currentValue, currentUnit, Object.assign({}, this.props));\r\n            if (typeof children === 'function') {\r\n                return children(formattedRelativeTime);\r\n            }\r\n            if (Text) {\r\n                return React.createElement(Text, null, formattedRelativeTime);\r\n            }\r\n            return formattedRelativeTime;\r\n        }));\r\n    }\r\n}\r\nFormattedRelativeTime.displayName = 'FormattedRelativeTime';\r\nFormattedRelativeTime.defaultProps = {\r\n    value: 0,\r\n    unit: 'second',\r\n};\r\nexport default FormattedRelativeTime;\r\n"]},"metadata":{},"sourceType":"module"}