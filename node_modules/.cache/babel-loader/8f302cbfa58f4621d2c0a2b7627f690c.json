{"ast":null,"code":"import _objectSpread from\"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";// ** Initial State\nvar initialState={categoryDetail:[],treadDetail:[],mails:[],params:{},currentMail:null,emailsMeta:{},selectedMails:[]};var EmailReducer=function EmailReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'GET_LISTOF_CATEGORY':return _objectSpread(_objectSpread({},state),{},{categoryDetail:action.data,params:action.params});case'GET_TREAD':return _objectSpread(_objectSpread({},state),{},{treadDetail:action.data,params:action.params});case'GET_MAILS':// ** If currentMail is not null / undefined then find and set currentMail\nvar currMail=null;// if (state.currentMail !== null && state.currentMail !== undefined) {\n//   currMail = action.data.emails.find(i => i.id === state.currentMail.id)\n// }\nreturn _objectSpread(_objectSpread({},state),{},{mails:action.data,emailsMeta:action.data.emailsMeta,params:action.params,currentMail:currMail});case'PAGINATE_MAIL':// ** Find current mail & add hasNextMail & hasPreviousMail props to current mail object based on index\nvar data=action.data;var dataIndex=state.mails.findIndex(function(i){return i.id===data.id;});dataIndex===0?data.hasPreviousMail=false:data.hasPreviousMail=true;dataIndex===state.mails.length-1?data.hasNextMail=false:data.hasNextMail=true;return _objectSpread(_objectSpread({},state),{},{currentMail:data});case'UPDATE_MAILS':// ** Find and updated mail\nvar updateMailData=function updateMailData(email){Object.assign(email,action.dataToUpdate);};state.mails.forEach(function(email){if(action.emailIds.includes(email.id))updateMailData(email);});return _objectSpread({},state);case'UPDATE_MAIL_LABEL':return _objectSpread({},state);case'SELECT_CURRENT_MAIL':return _objectSpread(_objectSpread({},state),{},{currentMail:action.mail});case'SELECT_MAIL':// ** Select mails\nvar selectedMails=state.selectedMails;if(!selectedMails.includes(action.id)){selectedMails.push(action.id);}else{selectedMails.splice(selectedMails.indexOf(action.id),1);}return _objectSpread(_objectSpread({},state),{},{selectedMails:selectedMails});case'SELECT_ALL_MAIL':// ** Select all mails\nvar selectAllMails=[];if(action.val){selectAllMails.length=0;state.mails.forEach(function(mail){return selectAllMails.push(mail.id);});}else{selectAllMails.length=0;}return _objectSpread(_objectSpread({},state),{},{selectedMails:selectAllMails});case'RESET_SELECT_MAILS':// ** Reset(remove) all selected mails\nreturn _objectSpread(_objectSpread({},state),{},{selectedMails:[]});default:return state;}};export default EmailReducer;","map":{"version":3,"sources":["D:/nodejs/IMA/src/views/apps/email/store/reducer/index.js"],"names":["initialState","categoryDetail","treadDetail","mails","params","currentMail","emailsMeta","selectedMails","EmailReducer","state","action","type","data","currMail","dataIndex","findIndex","i","id","hasPreviousMail","length","hasNextMail","updateMailData","email","Object","assign","dataToUpdate","forEach","emailIds","includes","mail","push","splice","indexOf","selectAllMails","val"],"mappings":"mIAAA;AACA,GAAMA,CAAAA,YAAY,CAAG,CACnBC,cAAc,CAAC,EADI,CAEnBC,WAAW,CAAC,EAFO,CAGnBC,KAAK,CAAE,EAHY,CAInBC,MAAM,CAAE,EAJW,CAKnBC,WAAW,CAAE,IALM,CAMnBC,UAAU,CAAE,EANO,CAOnBC,aAAa,CAAE,EAPI,CAArB,CAUA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBT,YAAyB,IAAXU,CAAAA,MAAW,2CACrD,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,qBAAL,CACA,sCACKF,KADL,MAEER,cAAc,CAACS,MAAM,CAACE,IAFxB,CAGER,MAAM,CAACM,MAAM,CAACN,MAHhB,GAKA,IAAK,WAAL,CACA,sCACKK,KADL,MAEEP,WAAW,CAACQ,MAAM,CAACE,IAFrB,CAGER,MAAM,CAAEM,MAAM,CAACN,MAHjB,GAKA,IAAK,WAAL,CACE;AACA,GAAMS,CAAAA,QAAQ,CAAG,IAAjB,CACA;AACA;AACA;AACA,sCACKJ,KADL,MAEEN,KAAK,CAAEO,MAAM,CAACE,IAFhB,CAGEN,UAAU,CAAEI,MAAM,CAACE,IAAP,CAAYN,UAH1B,CAIEF,MAAM,CAAEM,MAAM,CAACN,MAJjB,CAKEC,WAAW,CAAEQ,QALf,GAOF,IAAK,eAAL,CACE;AACA,GAAMD,CAAAA,IAAI,CAAGF,MAAM,CAACE,IAApB,CACA,GAAME,CAAAA,SAAS,CAAGL,KAAK,CAACN,KAAN,CAAYY,SAAZ,CAAsB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,EAAF,GAASL,IAAI,CAACK,EAAlB,EAAvB,CAAlB,CACAH,SAAS,GAAK,CAAd,CAAmBF,IAAI,CAACM,eAAL,CAAuB,KAA1C,CAAoDN,IAAI,CAACM,eAAL,CAAuB,IAA3E,CACAJ,SAAS,GAAKL,KAAK,CAACN,KAAN,CAAYgB,MAAZ,CAAqB,CAAnC,CAAwCP,IAAI,CAACQ,WAAL,CAAmB,KAA3D,CAAqER,IAAI,CAACQ,WAAL,CAAmB,IAAxF,CACA,sCAAYX,KAAZ,MAAmBJ,WAAW,CAAEO,IAAhC,GACF,IAAK,cAAL,CACE;AADF,GAEWS,CAAAA,cAFX,CAEE,QAASA,CAAAA,cAAT,CAAwBC,KAAxB,CAA+B,CAC7BC,MAAM,CAACC,MAAP,CAAcF,KAAd,CAAqBZ,MAAM,CAACe,YAA5B,EACD,CAJH,CAKEhB,KAAK,CAACN,KAAN,CAAYuB,OAAZ,CAAoB,SAAAJ,KAAK,CAAI,CAC3B,GAAIZ,MAAM,CAACiB,QAAP,CAAgBC,QAAhB,CAAyBN,KAAK,CAACL,EAA/B,CAAJ,CAAwCI,cAAc,CAACC,KAAD,CAAd,CACzC,CAFD,EAGA,wBAAYb,KAAZ,EACF,IAAK,mBAAL,CACE,wBAAYA,KAAZ,EACF,IAAK,qBAAL,CACE,sCAAYA,KAAZ,MAAmBJ,WAAW,CAAEK,MAAM,CAACmB,IAAvC,GACF,IAAK,aAAL,CACE;AACA,GAAMtB,CAAAA,aAAa,CAAGE,KAAK,CAACF,aAA5B,CACA,GAAI,CAACA,aAAa,CAACqB,QAAd,CAAuBlB,MAAM,CAACO,EAA9B,CAAL,CAAwC,CACtCV,aAAa,CAACuB,IAAd,CAAmBpB,MAAM,CAACO,EAA1B,EACD,CAFD,IAEO,CACLV,aAAa,CAACwB,MAAd,CAAqBxB,aAAa,CAACyB,OAAd,CAAsBtB,MAAM,CAACO,EAA7B,CAArB,CAAuD,CAAvD,EACD,CACD,sCAAYR,KAAZ,MAAmBF,aAAa,CAAbA,aAAnB,GACF,IAAK,iBAAL,CACE;AACA,GAAM0B,CAAAA,cAAc,CAAG,EAAvB,CACA,GAAIvB,MAAM,CAACwB,GAAX,CAAgB,CACdD,cAAc,CAACd,MAAf,CAAwB,CAAxB,CACAV,KAAK,CAACN,KAAN,CAAYuB,OAAZ,CAAoB,SAAAG,IAAI,QAAII,CAAAA,cAAc,CAACH,IAAf,CAAoBD,IAAI,CAACZ,EAAzB,CAAJ,EAAxB,EACD,CAHD,IAGO,CACLgB,cAAc,CAACd,MAAf,CAAwB,CAAxB,CACD,CACD,sCAAYV,KAAZ,MAAmBF,aAAa,CAAE0B,cAAlC,GACF,IAAK,oBAAL,CACE;AACA,sCAAYxB,KAAZ,MAAmBF,aAAa,CAAE,EAAlC,GACF,QACE,MAAOE,CAAAA,KAAP,CArEJ,CAuED,CAxED,CA0EA,cAAeD,CAAAA,YAAf","sourcesContent":["// ** Initial State\r\nconst initialState = {\r\n  categoryDetail:[],\r\n  treadDetail:[],\r\n  mails: [],\r\n  params: {},\r\n  currentMail: null,\r\n  emailsMeta: {},\r\n  selectedMails: []\r\n}\r\n\r\nconst EmailReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'GET_LISTOF_CATEGORY':\r\n    return {\r\n      ...state,\r\n      categoryDetail:action.data,\r\n      params:action.params\r\n    }\r\n    case 'GET_TREAD': \r\n    return {\r\n      ...state,\r\n      treadDetail:action.data,\r\n      params: action.params\r\n    }\r\n    case 'GET_MAILS':\r\n      // ** If currentMail is not null / undefined then find and set currentMail\r\n      const currMail = null\r\n      // if (state.currentMail !== null && state.currentMail !== undefined) {\r\n      //   currMail = action.data.emails.find(i => i.id === state.currentMail.id)\r\n      // }\r\n      return {\r\n        ...state,\r\n        mails: action.data,\r\n        emailsMeta: action.data.emailsMeta,\r\n        params: action.params,\r\n        currentMail: currMail\r\n      }\r\n    case 'PAGINATE_MAIL':\r\n      // ** Find current mail & add hasNextMail & hasPreviousMail props to current mail object based on index\r\n      const data = action.data\r\n      const dataIndex = state.mails.findIndex(i => i.id === data.id)\r\n      dataIndex === 0 ? (data.hasPreviousMail = false) : (data.hasPreviousMail = true)\r\n      dataIndex === state.mails.length - 1 ? (data.hasNextMail = false) : (data.hasNextMail = true)\r\n      return { ...state, currentMail: data }\r\n    case 'UPDATE_MAILS':\r\n      // ** Find and updated mail\r\n      function updateMailData(email) {\r\n        Object.assign(email, action.dataToUpdate)\r\n      }\r\n      state.mails.forEach(email => {\r\n        if (action.emailIds.includes(email.id)) updateMailData(email)\r\n      })\r\n      return { ...state }\r\n    case 'UPDATE_MAIL_LABEL':\r\n      return { ...state }\r\n    case 'SELECT_CURRENT_MAIL':\r\n      return { ...state, currentMail: action.mail }\r\n    case 'SELECT_MAIL':\r\n      // ** Select mails\r\n      const selectedMails = state.selectedMails\r\n      if (!selectedMails.includes(action.id)) {\r\n        selectedMails.push(action.id)\r\n      } else {\r\n        selectedMails.splice(selectedMails.indexOf(action.id), 1)\r\n      }\r\n      return { ...state, selectedMails }\r\n    case 'SELECT_ALL_MAIL':\r\n      // ** Select all mails\r\n      const selectAllMails = []\r\n      if (action.val) {\r\n        selectAllMails.length = 0\r\n        state.mails.forEach(mail => selectAllMails.push(mail.id))\r\n      } else {\r\n        selectAllMails.length = 0\r\n      }\r\n      return { ...state, selectedMails: selectAllMails }\r\n    case 'RESET_SELECT_MAILS':\r\n      // ** Reset(remove) all selected mails\r\n      return { ...state, selectedMails: [] }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default EmailReducer\r\n"]},"metadata":{},"sourceType":"module"}