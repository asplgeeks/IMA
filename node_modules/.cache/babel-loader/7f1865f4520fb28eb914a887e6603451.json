{"ast":null,"code":"import _objectSpread from \"C:/Users/Shree/Downloads/newproject/full-version/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport mock from '../mock';\nimport jwt from 'jsonwebtoken';\nvar data = {\n  users: [{\n    id: 1,\n    fullName: 'John Doe',\n    username: 'johndoe',\n    password: 'admin',\n    avatar: require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,\n    phone: \"9623568023\",\n    role: 'admin',\n    ability: [{\n      action: 'manage',\n      subject: 'all'\n    }],\n    extras: {\n      eCommerceCartItemsCount: 5\n    }\n  }, {\n    id: 2,\n    fullName: 'Jane Doe',\n    username: 'janedoe',\n    password: 'client',\n    avatar: require('@src/assets/images/avatars/1-small.png').default,\n    email: 'client@demo.com',\n    role: 'client',\n    ability: [{\n      action: 'read',\n      subject: 'ACL'\n    }, {\n      action: 'read',\n      subject: 'Auth'\n    }],\n    extras: {\n      eCommerceCartItemsCount: 5\n    }\n  }]\n}; // ! These two secrets shall be in .env file and not in any other file\n\nvar jwtConfig = {\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\n  expireTime: '10m',\n  refreshTokenExpireTime: '10m'\n};\nmock.onPost('/jwt/login').reply(function (request) {\n  var _JSON$parse = JSON.parse(request.data),\n      email = _JSON$parse.email,\n      password = _JSON$parse.password;\n\n  var error = {\n    email: ['Something went wrong']\n  };\n  var user = data.users.find(function (u) {\n    return u.email === email && u.password === password;\n  });\n\n  if (user) {\n    try {\n      var accessToken = jwt.sign({\n        id: user.id\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      var refreshToken = jwt.sign({\n        id: user.id\n      }, jwtConfig.refreshTokenSecret, {\n        expiresIn: jwtConfig.refreshTokenExpireTime\n      });\n\n      var userData = _objectSpread({}, user);\n\n      delete userData.password;\n      var response = {\n        userData: userData,\n        accessToken: accessToken,\n        refreshToken: refreshToken\n      };\n      return [200, response];\n    } catch (e) {\n      error = e;\n    }\n  } else {\n    error = {\n      email: ['Email or Password is Invalid']\n    };\n  }\n\n  return [400, {\n    error: error\n  }];\n});\nmock.onPost('/jwt/register').reply(function (request) {\n  if (request.data.length > 0) {\n    var _JSON$parse2 = JSON.parse(request.data),\n        email = _JSON$parse2.email,\n        password = _JSON$parse2.password,\n        username = _JSON$parse2.username;\n\n    var isEmailAlreadyInUse = data.users.find(function (user) {\n      return user.email === email;\n    });\n    var isUsernameAlreadyInUse = data.users.find(function (user) {\n      return user.username === username;\n    });\n    var error = {\n      email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n      username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\n    };\n\n    if (!error.username && !error.email) {\n      var userData = {\n        email: email,\n        password: password,\n        username: username,\n        fullName: '',\n        avatar: null,\n        role: 'admin',\n        ability: [{\n          action: 'manage',\n          subject: 'all'\n        }]\n      }; // Add user id\n\n      var length = data.users.length;\n      var lastIndex = 0;\n\n      if (length) {\n        lastIndex = data.users[length - 1].id;\n      }\n\n      userData.id = lastIndex + 1;\n      data.users.push(userData);\n      var accessToken = jwt.sign({\n        id: userData.id\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      var user = Object.assign({}, userData);\n      delete user['password'];\n      var response = {\n        user: user,\n        accessToken: accessToken\n      };\n      return [200, response];\n    } else {\n      return [200, {\n        error: error\n      }];\n    }\n  }\n});\nmock.onPost('/jwt/refresh-token').reply(function (request) {\n  var _JSON$parse3 = JSON.parse(request.data),\n      refreshToken = _JSON$parse3.refreshToken;\n\n  try {\n    var _jwt$verify = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret),\n        id = _jwt$verify.id;\n\n    var userData = _objectSpread({}, data.users.find(function (user) {\n      return user.id === id;\n    }));\n\n    var newAccessToken = jwt.sign({\n      id: userData.id\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    var newRefreshToken = jwt.sign({\n      id: userData.id\n    }, jwtConfig.refreshTokenSecret, {\n      expiresIn: jwtConfig.refreshTokenExpireTime\n    });\n    delete userData.password;\n    var response = {\n      userData: userData,\n      accessToken: newAccessToken,\n      refreshToken: newRefreshToken\n    };\n    return [200, response];\n  } catch (e) {\n    var error = 'Invalid refresh token';\n    return [401, {\n      error: error\n    }];\n  }\n});","map":{"version":3,"sources":["C:/Users/Shree/Downloads/newproject/full-version/src/@fake-db/jwt/index.js"],"names":["mock","jwt","data","users","id","fullName","username","password","avatar","require","default","phone","role","ability","action","subject","extras","eCommerceCartItemsCount","email","jwtConfig","secret","refreshTokenSecret","expireTime","refreshTokenExpireTime","onPost","reply","request","JSON","parse","error","user","find","u","accessToken","sign","expiresIn","refreshToken","userData","response","e","length","isEmailAlreadyInUse","isUsernameAlreadyInUse","lastIndex","push","Object","assign","verify","newAccessToken","newRefreshToken"],"mappings":"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","sourcesContent":["import mock from '../mock'\nimport jwt from 'jsonwebtoken'\n\nconst data = {\n  users: [\n    {\n      id: 1,\n      fullName: 'John Doe',\n      username: 'johndoe',\n      password: 'admin',\n      avatar: require('@src/assets/images/portrait/small/avatar-s-11.jpg').default,\n      phone: \"9623568023\",\n      role: 'admin',\n      ability: [\n        {\n          action: 'manage',\n          subject: 'all'\n        }\n      ],\n      extras: {\n        eCommerceCartItemsCount: 5\n      }\n    },\n    {\n      id: 2,\n      fullName: 'Jane Doe',\n      username: 'janedoe',\n      password: 'client',\n      avatar: require('@src/assets/images/avatars/1-small.png').default,\n      email: 'client@demo.com',\n      role: 'client',\n      ability: [\n        {\n          action: 'read',\n          subject: 'ACL'\n        },\n        {\n          action: 'read',\n          subject: 'Auth'\n        }\n      ],\n      extras: {\n        eCommerceCartItemsCount: 5\n      }\n    }\n  ]\n}\n\n// ! These two secrets shall be in .env file and not in any other file\nconst jwtConfig = {\n  secret: 'dd5f3089-40c3-403d-af14-d0c228b05cb4',\n  refreshTokenSecret: '7c4c1c50-3230-45bf-9eae-c9b2e401c767',\n  expireTime: '10m',\n  refreshTokenExpireTime: '10m'\n}\n\nmock.onPost('/jwt/login').reply(request => {\n  const { email, password } = JSON.parse(request.data)\n\n  let error = {\n    email: ['Something went wrong']\n  }\n\n  const user = data.users.find(u => u.email === email && u.password === password)\n\n  if (user) {\n    try {\n      const accessToken = jwt.sign({ id: user.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n      const refreshToken = jwt.sign({ id: user.id }, jwtConfig.refreshTokenSecret, {\n        expiresIn: jwtConfig.refreshTokenExpireTime\n      })\n\n      const userData = { ...user }\n\n      delete userData.password\n\n      const response = {\n        userData,\n        accessToken,\n        refreshToken\n      }\n\n      return [200, response]\n    } catch (e) {\n      error = e\n    }\n  } else {\n    error = {\n      email: ['Email or Password is Invalid']\n    }\n  }\n\n  return [400, { error }]\n})\n\nmock.onPost('/jwt/register').reply(request => {\n  if (request.data.length > 0) {\n    const { email, password, username } = JSON.parse(request.data)\n    const isEmailAlreadyInUse = data.users.find(user => user.email === email)\n    const isUsernameAlreadyInUse = data.users.find(user => user.username === username)\n    const error = {\n      email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n      username: isUsernameAlreadyInUse ? 'This username is already in use.' : null\n    }\n\n    if (!error.username && !error.email) {\n      const userData = {\n        email,\n        password,\n        username,\n        fullName: '',\n        avatar: null,\n        role: 'admin',\n        ability: [\n          {\n            action: 'manage',\n            subject: 'all'\n          }\n        ]\n      }\n\n      // Add user id\n      const length = data.users.length\n      let lastIndex = 0\n      if (length) {\n        lastIndex = data.users[length - 1].id\n      }\n      userData.id = lastIndex + 1\n\n      data.users.push(userData)\n\n      const accessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expireTime })\n\n      const user = Object.assign({}, userData)\n      delete user['password']\n      const response = { user, accessToken }\n\n      return [200, response]\n    } else {\n      return [200, { error }]\n    }\n  }\n})\n\nmock.onPost('/jwt/refresh-token').reply(request => {\n  const { refreshToken } = JSON.parse(request.data)\n\n  try {\n    const { id } = jwt.verify(refreshToken, jwtConfig.refreshTokenSecret)\n\n    const userData = { ...data.users.find(user => user.id === id) }\n\n    const newAccessToken = jwt.sign({ id: userData.id }, jwtConfig.secret, { expiresIn: jwtConfig.expiresIn })\n    const newRefreshToken = jwt.sign({ id: userData.id }, jwtConfig.refreshTokenSecret, {\n      expiresIn: jwtConfig.refreshTokenExpireTime\n    })\n\n    delete userData.password\n    const response = {\n      userData,\n      accessToken: newAccessToken,\n      refreshToken: newRefreshToken\n    }\n\n    return [200, response]\n  } catch (e) {\n    const error = 'Invalid refresh token'\n    return [401, { error }]\n  }\n})\n"]},"metadata":{},"sourceType":"module"}