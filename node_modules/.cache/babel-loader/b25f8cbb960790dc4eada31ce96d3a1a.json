{"ast":null,"code":"import _toConsumableArray from\"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";//** React Imports\nimport{useState,useEffect}from'react';// ** Configs\nimport themeConfig from'@configs/themeConfig';export var useSkin=function useSkin(){// ** State\nvar _useState=useState(function(){try{// ** Get from local storage by key\nvar item=window.localStorage.getItem('skin');// ** Parse stored json or if none return initialValue\n// ** Parse stored json or if none return initialValue\nreturn item?JSON.parse(item):themeConfig.layout.skin;}catch(error){// ** If error also return initialValue\nconsole.log(error);return themeConfig.layout.skin;}}),_useState2=_slicedToArray(_useState,2),skin=_useState2[0],setSkin=_useState2[1];// ** Return a wrapped version of useState's setter function\nvar setValue=function setValue(value){try{// ** Allow value to be a function so we have same API as useState\nvar valueToStore=value instanceof Function?value(skin):value;// ** Set state\nsetSkin(valueToStore);// ** Save to local storage\nwindow.localStorage.setItem('skin',JSON.stringify(valueToStore));}catch(error){// ** A more advanced implementation would handle the error case\nconsole.log(error);}};useEffect(function(){var _element$classList;// ** Get Body Tag\nvar element=window.document.body;// ** Define classnames for skins\nvar classNames={dark:'dark-layout',bordered:'bordered-layout','semi-dark':'semi-dark-layout'};// ** Remove all classes from Body on mount\n(_element$classList=element.classList).remove.apply(_element$classList,_toConsumableArray(element.classList));// ** If skin is not light add skin class\nif(skin!=='light'){element.classList.add(classNames[skin]);}},[skin]);return[skin,setValue];};","map":{"version":3,"sources":["D:/nodejs/IMA/src/utility/hooks/useSkin.js"],"names":["useState","useEffect","themeConfig","useSkin","item","window","localStorage","getItem","JSON","parse","layout","skin","error","console","log","setSkin","setValue","value","valueToStore","Function","setItem","stringify","element","document","body","classNames","dark","bordered","classList","remove","add"],"mappings":"gRAAA;AACA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA;AACA,MAAOC,CAAAA,WAAP,KAAwB,sBAAxB,CAEA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAC3B;AACA,cAAwBH,QAAQ,CAAC,UAAM,CACrC,GAAI,CACF;AACA,GAAMI,CAAAA,IAAI,CAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAb,CACA;AAAA;AACA,MAAOH,CAAAA,IAAI,CAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,CAAsBF,WAAW,CAACQ,MAAZ,CAAmBC,IAApD,CACD,CAAC,MAAOC,KAAP,CAAc,CACd;AACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACA,MAAOV,CAAAA,WAAW,CAACQ,MAAZ,CAAmBC,IAA1B,CACD,CACF,CAX+B,CAAhC,wCAAOA,IAAP,eAAaI,OAAb,eAaA;AACA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,CAAI,CACxB,GAAI,CACF;AACA,GAAMC,CAAAA,YAAY,CAAGD,KAAK,WAAYE,CAAAA,QAAjB,CAA4BF,KAAK,CAACN,IAAD,CAAjC,CAA0CM,KAA/D,CACA;AACAF,OAAO,CAACG,YAAD,CAAP,CACA;AACAb,MAAM,CAACC,YAAP,CAAoBc,OAApB,CAA4B,MAA5B,CAAoCZ,IAAI,CAACa,SAAL,CAAeH,YAAf,CAApC,EACD,CAAC,MAAON,KAAP,CAAc,CACd;AACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACD,CACF,CAZD,CAcAX,SAAS,CAAC,UAAM,wBACd;AACA,GAAMqB,CAAAA,OAAO,CAAGjB,MAAM,CAACkB,QAAP,CAAgBC,IAAhC,CAEA;AACA,GAAMC,CAAAA,UAAU,CAAG,CACjBC,IAAI,CAAE,aADW,CAEjBC,QAAQ,CAAE,iBAFO,CAGjB,YAAa,kBAHI,CAAnB,CAMA;AACA,oBAAAL,OAAO,CAACM,SAAR,EAAkBC,MAAlB,6CAA4BP,OAAO,CAACM,SAApC,GAEA;AACA,GAAIjB,IAAI,GAAK,OAAb,CAAsB,CACpBW,OAAO,CAACM,SAAR,CAAkBE,GAAlB,CAAsBL,UAAU,CAACd,IAAD,CAAhC,EACD,CACF,CAlBQ,CAkBN,CAACA,IAAD,CAlBM,CAAT,CAoBA,MAAO,CAACA,IAAD,CAAOK,QAAP,CAAP,CACD,CAnDM","sourcesContent":["//** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** Configs\r\nimport themeConfig from '@configs/themeConfig'\r\n\r\nexport const useSkin = () => {\r\n  // ** State\r\n  const [skin, setSkin] = useState(() => {\r\n    try {\r\n      // ** Get from local storage by key\r\n      const item = window.localStorage.getItem('skin')\r\n      // ** Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : themeConfig.layout.skin\r\n    } catch (error) {\r\n      // ** If error also return initialValue\r\n      console.log(error)\r\n      return themeConfig.layout.skin\r\n    }\r\n  })\r\n\r\n  // ** Return a wrapped version of useState's setter function\r\n  const setValue = value => {\r\n    try {\r\n      // ** Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(skin) : value\r\n      // ** Set state\r\n      setSkin(valueToStore)\r\n      // ** Save to local storage\r\n      window.localStorage.setItem('skin', JSON.stringify(valueToStore))\r\n    } catch (error) {\r\n      // ** A more advanced implementation would handle the error case\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // ** Get Body Tag\r\n    const element = window.document.body\r\n\r\n    // ** Define classnames for skins\r\n    const classNames = {\r\n      dark: 'dark-layout',\r\n      bordered: 'bordered-layout',\r\n      'semi-dark': 'semi-dark-layout'\r\n    }\r\n\r\n    // ** Remove all classes from Body on mount\r\n    element.classList.remove(...element.classList)\r\n\r\n    // ** If skin is not light add skin class\r\n    if (skin !== 'light') {\r\n      element.classList.add(classNames[skin])\r\n    }\r\n  }, [skin])\r\n\r\n  return [skin, setValue]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}