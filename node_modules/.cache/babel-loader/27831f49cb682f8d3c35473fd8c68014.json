{"ast":null,"code":"import _slicedToArray from \"D:/nodejs/star/erpfrontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\n//** React Imports\nimport { useState, useEffect } from 'react'; // ** Configs\n\nimport themeConfig from '@configs/themeConfig';\nexport var useLayout = function useLayout() {\n  _s();\n\n  // ** States\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastLayout = _useState2[0],\n      setLastLayout = _useState2[1];\n\n  var _useState3 = useState(function () {\n    try {\n      return themeConfig.layout.type;\n    } catch (error) {\n      // ** If error return initialValue\n      console.log(error);\n      return themeConfig.layout.type;\n    }\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      layout = _useState4[0],\n      setLayout = _useState4[1]; // ** Return a wrapped version of useState's setter function\n\n\n  var setValue = function setValue(value) {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(layout) : value; // ** Set state\n\n      setLayout(valueToStore);\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  var handleLayout = function handleLayout() {\n    // ** If layout is horizontal & screen size is equals to or below 1200\n    if (layout === 'horizontal' && window.innerWidth <= 1200) {\n      setLayout('vertical');\n      setLastLayout('horizontal');\n    } // ** If lastLayout is horizontal & screen size is equals to or above 1200\n\n\n    if (lastLayout === 'horizontal' && window.innerWidth >= 1200) {\n      setLayout('horizontal');\n    }\n  }; // ** ComponentDidMount\n\n\n  useEffect(function () {\n    handleLayout();\n  }, []);\n  useEffect(function () {\n    // ** Window Resize Event\n    window.addEventListener('resize', handleLayout);\n  }, [layout, lastLayout]);\n  return [layout, setValue];\n};\n\n_s(useLayout, \"i/f7moHVmtD24dAU9fmg/x08O8U=\");","map":{"version":3,"sources":["D:/nodejs/star/erpfrontend/src/utility/hooks/useLayout.js"],"names":["useState","useEffect","themeConfig","useLayout","lastLayout","setLastLayout","layout","type","error","console","log","setLayout","setValue","value","valueToStore","Function","handleLayout","window","innerWidth","addEventListener"],"mappings":";;;;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAC7B;AACA,kBAAoCH,QAAQ,CAAC,IAAD,CAA5C;AAAA;AAAA,MAAOI,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA4BL,QAAQ,CAAC,YAAM;AACzC,QAAI;AACF,aAAOE,WAAW,CAACI,MAAZ,CAAmBC,IAA1B;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAON,WAAW,CAACI,MAAZ,CAAmBC,IAA1B;AACD;AACF,GARmC,CAApC;AAAA;AAAA,MAAOD,MAAP;AAAA,MAAeK,SAAf,iBAH6B,CAa7B;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxB,QAAI;AACF;AACA,UAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACP,MAAD,CAAjC,GAA4CO,KAAjE,CAFE,CAIF;;AACAF,MAAAA,SAAS,CAACG,YAAD,CAAT;AACD,KAND,CAME,OAAON,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAXD;;AAaA,MAAMQ,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB;AACA,QAAIV,MAAM,KAAK,YAAX,IAA2BW,MAAM,CAACC,UAAP,IAAqB,IAApD,EAA0D;AACxDP,MAAAA,SAAS,CAAC,UAAD,CAAT;AACAN,MAAAA,aAAa,CAAC,YAAD,CAAb;AACD,KALwB,CAMzB;;;AACA,QAAID,UAAU,KAAK,YAAf,IAA+Ba,MAAM,CAACC,UAAP,IAAqB,IAAxD,EAA8D;AAC5DP,MAAAA,SAAS,CAAC,YAAD,CAAT;AACD;AACF,GAVD,CA3B6B,CAuC7B;;;AACAV,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,YAAY;AACb,GAFQ,EAEN,EAFM,CAAT;AAIAf,EAAAA,SAAS,CAAC,YAAM;AACd;AACAgB,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,YAAlC;AACD,GAHQ,EAGN,CAACV,MAAD,EAASF,UAAT,CAHM,CAAT;AAKA,SAAO,CAACE,MAAD,EAASM,QAAT,CAAP;AACD,CAlDM;;GAAMT,S","sourcesContent":["//** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** Configs\r\nimport themeConfig from '@configs/themeConfig'\r\n\r\nexport const useLayout = () => {\r\n  // ** States\r\n  const [lastLayout, setLastLayout] = useState(null)\r\n  const [layout, setLayout] = useState(() => {\r\n    try {\r\n      return themeConfig.layout.type\r\n    } catch (error) {\r\n      // ** If error return initialValue\r\n      console.log(error)\r\n      return themeConfig.layout.type\r\n    }\r\n  })\r\n\r\n  // ** Return a wrapped version of useState's setter function\r\n  const setValue = value => {\r\n    try {\r\n      // ** Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(layout) : value\r\n\r\n      // ** Set state\r\n      setLayout(valueToStore)\r\n    } catch (error) {\r\n      // ** A more advanced implementation would handle the error case\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const handleLayout = () => {\r\n    // ** If layout is horizontal & screen size is equals to or below 1200\r\n    if (layout === 'horizontal' && window.innerWidth <= 1200) {\r\n      setLayout('vertical')\r\n      setLastLayout('horizontal')\r\n    }\r\n    // ** If lastLayout is horizontal & screen size is equals to or above 1200\r\n    if (lastLayout === 'horizontal' && window.innerWidth >= 1200) {\r\n      setLayout('horizontal')\r\n    }\r\n  }\r\n\r\n  // ** ComponentDidMount\r\n  useEffect(() => {\r\n    handleLayout()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // ** Window Resize Event\r\n    window.addEventListener('resize', handleLayout)\r\n  }, [layout, lastLayout])\r\n\r\n  return [layout, setValue]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}