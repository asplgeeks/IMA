{"ast":null,"code":"import _slicedToArray from\"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";//** React Imports\nimport{useState,useEffect}from'react';// ** Configs\nimport themeConfig from'@configs/themeConfig';export var useLayout=function useLayout(){// ** States\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),lastLayout=_useState2[0],setLastLayout=_useState2[1];var _useState3=useState(function(){try{return themeConfig.layout.type;}catch(error){// ** If error return initialValue\nconsole.log(error);return themeConfig.layout.type;}}),_useState4=_slicedToArray(_useState3,2),layout=_useState4[0],setLayout=_useState4[1];// ** Return a wrapped version of useState's setter function\nvar setValue=function setValue(value){try{// ** Allow value to be a function so we have same API as useState\nvar valueToStore=value instanceof Function?value(layout):value;// ** Set state\nsetLayout(valueToStore);}catch(error){// ** A more advanced implementation would handle the error case\nconsole.log(error);}};var handleLayout=function handleLayout(){// ** If layout is horizontal & screen size is equals to or below 1200\nif(layout==='horizontal'&&window.innerWidth<=1200){setLayout('vertical');setLastLayout('horizontal');}// ** If lastLayout is horizontal & screen size is equals to or above 1200\nif(lastLayout==='horizontal'&&window.innerWidth>=1200){setLayout('horizontal');}};// ** ComponentDidMount\nuseEffect(function(){handleLayout();},[]);useEffect(function(){// ** Window Resize Event\nwindow.addEventListener('resize',handleLayout);},[layout,lastLayout]);return[layout,setValue];};","map":{"version":3,"sources":["D:/nodejs/IMA/src/utility/hooks/useLayout.js"],"names":["useState","useEffect","themeConfig","useLayout","lastLayout","setLastLayout","layout","type","error","console","log","setLayout","setValue","value","valueToStore","Function","handleLayout","window","innerWidth","addEventListener"],"mappings":"oIAAA;AACA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA;AACA,MAAOC,CAAAA,WAAP,KAAwB,sBAAxB,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC7B;AACA,cAAoCH,QAAQ,CAAC,IAAD,CAA5C,wCAAOI,UAAP,eAAmBC,aAAnB,eACA,eAA4BL,QAAQ,CAAC,UAAM,CACzC,GAAI,CACF,MAAOE,CAAAA,WAAW,CAACI,MAAZ,CAAmBC,IAA1B,CACD,CAAC,MAAOC,KAAP,CAAc,CACd;AACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACA,MAAON,CAAAA,WAAW,CAACI,MAAZ,CAAmBC,IAA1B,CACD,CACF,CARmC,CAApC,yCAAOD,MAAP,eAAeK,SAAf,eAUA;AACA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,CAAI,CACxB,GAAI,CACF;AACA,GAAMC,CAAAA,YAAY,CAAGD,KAAK,WAAYE,CAAAA,QAAjB,CAA4BF,KAAK,CAACP,MAAD,CAAjC,CAA4CO,KAAjE,CAEA;AACAF,SAAS,CAACG,YAAD,CAAT,CACD,CAAC,MAAON,KAAP,CAAc,CACd;AACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACD,CACF,CAXD,CAaA,GAAMQ,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB;AACA,GAAIV,MAAM,GAAK,YAAX,EAA2BW,MAAM,CAACC,UAAP,EAAqB,IAApD,CAA0D,CACxDP,SAAS,CAAC,UAAD,CAAT,CACAN,aAAa,CAAC,YAAD,CAAb,CACD,CACD;AACA,GAAID,UAAU,GAAK,YAAf,EAA+Ba,MAAM,CAACC,UAAP,EAAqB,IAAxD,CAA8D,CAC5DP,SAAS,CAAC,YAAD,CAAT,CACD,CACF,CAVD,CAYA;AACAV,SAAS,CAAC,UAAM,CACde,YAAY,GACb,CAFQ,CAEN,EAFM,CAAT,CAIAf,SAAS,CAAC,UAAM,CACd;AACAgB,MAAM,CAACE,gBAAP,CAAwB,QAAxB,CAAkCH,YAAlC,EACD,CAHQ,CAGN,CAACV,MAAD,CAASF,UAAT,CAHM,CAAT,CAKA,MAAO,CAACE,MAAD,CAASM,QAAT,CAAP,CACD,CAlDM","sourcesContent":["//** React Imports\r\nimport { useState, useEffect } from 'react'\r\n\r\n// ** Configs\r\nimport themeConfig from '@configs/themeConfig'\r\n\r\nexport const useLayout = () => {\r\n  // ** States\r\n  const [lastLayout, setLastLayout] = useState(null)\r\n  const [layout, setLayout] = useState(() => {\r\n    try {\r\n      return themeConfig.layout.type\r\n    } catch (error) {\r\n      // ** If error return initialValue\r\n      console.log(error)\r\n      return themeConfig.layout.type\r\n    }\r\n  })\r\n\r\n  // ** Return a wrapped version of useState's setter function\r\n  const setValue = value => {\r\n    try {\r\n      // ** Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(layout) : value\r\n\r\n      // ** Set state\r\n      setLayout(valueToStore)\r\n    } catch (error) {\r\n      // ** A more advanced implementation would handle the error case\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const handleLayout = () => {\r\n    // ** If layout is horizontal & screen size is equals to or below 1200\r\n    if (layout === 'horizontal' && window.innerWidth <= 1200) {\r\n      setLayout('vertical')\r\n      setLastLayout('horizontal')\r\n    }\r\n    // ** If lastLayout is horizontal & screen size is equals to or above 1200\r\n    if (lastLayout === 'horizontal' && window.innerWidth >= 1200) {\r\n      setLayout('horizontal')\r\n    }\r\n  }\r\n\r\n  // ** ComponentDidMount\r\n  useEffect(() => {\r\n    handleLayout()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // ** Window Resize Event\r\n    window.addEventListener('resize', handleLayout)\r\n  }, [layout, lastLayout])\r\n\r\n  return [layout, setValue]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}