{"ast":null,"code":"/**\r\n * IE11-safe version of getCanonicalLocales since it's ES2016\r\n * @param locales locales\r\n */\nexport function getCanonicalLocales(locales) {\n  // IE11\n  var getCanonicalLocales = Intl.getCanonicalLocales;\n\n  if (typeof getCanonicalLocales === 'function') {\n    return getCanonicalLocales(locales);\n  } // NOTE: we must NOT call `supportedLocalesOf` of a formatjs polyfill, or their implementation\n  // will even eventually call this method recursively. Here we use `Intl.DateTimeFormat` since it\n  // is not polyfilled by `@formatjs`.\n  // TODO: Fix TypeScript type def for this bc undefined is just fine\n\n\n  return Intl.DateTimeFormat.supportedLocalesOf(locales);\n}","map":{"version":3,"sources":["../src/get-canonical-locales.ts"],"names":[],"mappings":"AAAA;;;AAGG;AACH,OAAM,SAAU,mBAAV,CAA8B,OAA9B,EAAyD;AAC7D;AACO,MAAA,mBAAA,GAAA,IAAA,CAAA,mBAAA;;AACP,MAAI,OAAO,mBAAP,KAA+B,UAAnC,EAA+C;AAC7C,WAAO,mBAAmB,CAAC,OAAD,CAA1B;AACD,GAL4D,CAM7D;AACA;AACA;AACA;;;AACA,SAAO,IAAI,CAAC,cAAL,CAAoB,kBAApB,CAAuC,OAAvC,CAAP;AACD","sourceRoot":"","sourcesContent":["/**\r\n * IE11-safe version of getCanonicalLocales since it's ES2016\r\n * @param locales locales\r\n */\r\nexport function getCanonicalLocales(locales) {\r\n    // IE11\r\n    var getCanonicalLocales = Intl.getCanonicalLocales;\r\n    if (typeof getCanonicalLocales === 'function') {\r\n        return getCanonicalLocales(locales);\r\n    }\r\n    // NOTE: we must NOT call `supportedLocalesOf` of a formatjs polyfill, or their implementation\r\n    // will even eventually call this method recursively. Here we use `Intl.DateTimeFormat` since it\r\n    // is not polyfilled by `@formatjs`.\r\n    // TODO: Fix TypeScript type def for this bc undefined is just fine\r\n    return Intl.DateTimeFormat.supportedLocalesOf(locales);\r\n}\r\n//# sourceMappingURL=get-canonical-locales.js.map"]},"metadata":{},"sourceType":"module"}