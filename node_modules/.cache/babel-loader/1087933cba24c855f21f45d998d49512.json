{"ast":null,"code":"/**\r\n * cuid.js\r\n * Collision-resistant UID generator for browsers and node.\r\n * Sequential for fast db lookups and recency sorting.\r\n * Safe for element IDs and server-side lookups.\r\n *\r\n * Extracted from CLCTR\r\n *\r\n * Copyright (c) Eric Elliott 2012\r\n * MIT License\r\n */\nvar fingerprint = require('./lib/fingerprint.js');\n\nvar pad = require('./lib/pad.js');\n\nvar getRandomValue = require('./lib/getRandomValue.js');\n\nvar c = 0,\n    blockSize = 4,\n    base = 36,\n    discreteValues = Math.pow(base, blockSize);\n\nfunction randomBlock() {\n  return pad((getRandomValue() * discreteValues << 0).toString(base), blockSize);\n}\n\nfunction safeCounter() {\n  c = c < discreteValues ? c : 0;\n  c++; // this is not subliminal\n\n  return c - 1;\n}\n\nfunction cuid() {\n  // Starting with a lowercase letter makes\n  // it HTML element ID friendly.\n  var letter = 'c',\n      // hard-coded allows for sequential access\n  // timestamp\n  // warning: this exposes the exact date and time\n  // that the uid was created.\n  timestamp = new Date().getTime().toString(base),\n      // Prevent same-machine collisions.\n  counter = pad(safeCounter().toString(base), blockSize),\n      // A few chars to generate distinct ids for different\n  // clients (so different computers are far less\n  // likely to generate the same id)\n  print = fingerprint(),\n      // Grab some more chars from Math.random()\n  random = randomBlock() + randomBlock();\n  return letter + timestamp + counter + print + random;\n}\n\ncuid.slug = function slug() {\n  var date = new Date().getTime().toString(36),\n      counter = safeCounter().toString(36).slice(-4),\n      print = fingerprint().slice(0, 1) + fingerprint().slice(-1),\n      random = randomBlock().slice(-2);\n  return date.slice(-2) + counter + print + random;\n};\n\ncuid.isCuid = function isCuid(stringToCheck) {\n  if (typeof stringToCheck !== 'string') return false;\n  if (stringToCheck.startsWith('c')) return true;\n  return false;\n};\n\ncuid.isSlug = function isSlug(stringToCheck) {\n  if (typeof stringToCheck !== 'string') return false;\n  var stringLength = stringToCheck.length;\n  if (stringLength >= 7 && stringLength <= 10) return true;\n  return false;\n};\n\ncuid.fingerprint = fingerprint;\nmodule.exports = cuid;","map":{"version":3,"sources":["D:/nodejs/star/erpfrontend/node_modules/cuid/index.js"],"names":["fingerprint","require","pad","getRandomValue","c","blockSize","base","discreteValues","Math","pow","randomBlock","toString","safeCounter","cuid","letter","timestamp","Date","getTime","counter","print","random","slug","date","slice","isCuid","stringToCheck","startsWith","isSlug","stringLength","length","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * cuid.js\r\n * Collision-resistant UID generator for browsers and node.\r\n * Sequential for fast db lookups and recency sorting.\r\n * Safe for element IDs and server-side lookups.\r\n *\r\n * Extracted from CLCTR\r\n *\r\n * Copyright (c) Eric Elliott 2012\r\n * MIT License\r\n */\r\n\r\nvar fingerprint = require('./lib/fingerprint.js');\r\nvar pad = require('./lib/pad.js');\r\nvar getRandomValue = require('./lib/getRandomValue.js');\r\n\r\nvar c = 0,\r\n  blockSize = 4,\r\n  base = 36,\r\n  discreteValues = Math.pow(base, blockSize);\r\n\r\nfunction randomBlock () {\r\n  return pad((getRandomValue() *\r\n    discreteValues << 0)\r\n    .toString(base), blockSize);\r\n}\r\n\r\nfunction safeCounter () {\r\n  c = c < discreteValues ? c : 0;\r\n  c++; // this is not subliminal\r\n  return c - 1;\r\n}\r\n\r\nfunction cuid () {\r\n  // Starting with a lowercase letter makes\r\n  // it HTML element ID friendly.\r\n  var letter = 'c', // hard-coded allows for sequential access\r\n\r\n    // timestamp\r\n    // warning: this exposes the exact date and time\r\n    // that the uid was created.\r\n    timestamp = (new Date().getTime()).toString(base),\r\n\r\n    // Prevent same-machine collisions.\r\n    counter = pad(safeCounter().toString(base), blockSize),\r\n\r\n    // A few chars to generate distinct ids for different\r\n    // clients (so different computers are far less\r\n    // likely to generate the same id)\r\n    print = fingerprint(),\r\n\r\n    // Grab some more chars from Math.random()\r\n    random = randomBlock() + randomBlock();\r\n\r\n  return letter + timestamp + counter + print + random;\r\n}\r\n\r\ncuid.slug = function slug () {\r\n  var date = new Date().getTime().toString(36),\r\n    counter = safeCounter().toString(36).slice(-4),\r\n    print = fingerprint().slice(0, 1) +\r\n      fingerprint().slice(-1),\r\n    random = randomBlock().slice(-2);\r\n\r\n  return date.slice(-2) +\r\n    counter + print + random;\r\n};\r\n\r\ncuid.isCuid = function isCuid (stringToCheck) {\r\n  if (typeof stringToCheck !== 'string') return false;\r\n  if (stringToCheck.startsWith('c')) return true;\r\n  return false;\r\n};\r\n\r\ncuid.isSlug = function isSlug (stringToCheck) {\r\n  if (typeof stringToCheck !== 'string') return false;\r\n  var stringLength = stringToCheck.length;\r\n  if (stringLength >= 7 && stringLength <= 10) return true;\r\n  return false;\r\n};\r\n\r\ncuid.fingerprint = fingerprint;\r\n\r\nmodule.exports = cuid;\r\n"]},"metadata":{},"sourceType":"script"}