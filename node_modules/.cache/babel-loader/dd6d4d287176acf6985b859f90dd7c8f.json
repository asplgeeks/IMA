{"ast":null,"code":"import _slicedToArray from \"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\n//** React Imports\nimport { useState } from 'react'; // ** Configs\n\nimport themeConfig from '@configs/themeConfig';\nexport var useRouterTransition = function useRouterTransition() {\n  _s();\n\n  // ** State\n  var _useState = useState(function () {\n    try {\n      return themeConfig.layout.routerTransition;\n    } catch (error) {\n      // ** If error return initialValue\n      console.log(error);\n      return themeConfig.layout.routerTransition;\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      transition = _useState2[0],\n      setTransition = _useState2[1]; // ** Return a wrapped version of useState's setter function\n\n\n  var setValue = function setValue(value) {\n    try {\n      // ** Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(transition) : value; // ** Set state\n\n      setTransition(valueToStore);\n    } catch (error) {\n      // ** A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [transition, setValue];\n};\n\n_s(useRouterTransition, \"3rFYlTFf8K0hoP4u1j/WvMownhM=\");","map":{"version":3,"sources":["D:/nodejs/IMA/src/utility/hooks/useRouterTransition.js"],"names":["useState","themeConfig","useRouterTransition","layout","routerTransition","error","console","log","transition","setTransition","setValue","value","valueToStore","Function"],"mappings":";;;;AAAA;AACA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AAEA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAAA;;AACvC;AACA,kBAAoCF,QAAQ,CAAC,YAAM;AACjD,QAAI;AACF,aAAOC,WAAW,CAACE,MAAZ,CAAmBC,gBAA1B;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOJ,WAAW,CAACE,MAAZ,CAAmBC,gBAA1B;AACD;AACF,GAR2C,CAA5C;AAAA;AAAA,MAAOI,UAAP;AAAA,MAAmBC,aAAnB,iBAFuC,CAYvC;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxB,QAAI;AACF;AACA,UAAMC,YAAY,GAAGD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,UAAD,CAAjC,GAAgDG,KAArE,CAFE,CAIF;;AACAF,MAAAA,aAAa,CAACG,YAAD,CAAb;AACD,KAND,CAME,OAAOP,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAXD;;AAaA,SAAO,CAACG,UAAD,EAAaE,QAAb,CAAP;AACD,CA3BM;;GAAMR,mB","sourcesContent":["//** React Imports\r\nimport { useState } from 'react'\r\n\r\n// ** Configs\r\nimport themeConfig from '@configs/themeConfig'\r\n\r\nexport const useRouterTransition = () => {\r\n  // ** State\r\n  const [transition, setTransition] = useState(() => {\r\n    try {\r\n      return themeConfig.layout.routerTransition\r\n    } catch (error) {\r\n      // ** If error return initialValue\r\n      console.log(error)\r\n      return themeConfig.layout.routerTransition\r\n    }\r\n  })\r\n\r\n  // ** Return a wrapped version of useState's setter function\r\n  const setValue = value => {\r\n    try {\r\n      // ** Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(transition) : value\r\n\r\n      // ** Set state\r\n      setTransition(valueToStore)\r\n    } catch (error) {\r\n      // ** A more advanced implementation would handle the error case\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  return [transition, setValue]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}