{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// ** React Imports\nimport { useContext } from 'react';\nimport { AbilityContext } from '@src/utility/context/Can';\n/**\r\n * Return which component to render based on it's data/context\r\n * @param {Object} item nav menu item\r\n */\n\nexport var resolveVerticalNavMenuItemComponent = function resolveVerticalNavMenuItemComponent(item) {\n  if (item.header) return 'VerticalNavMenuSectionHeader';\n  if (item.children) return 'VerticalNavMenuGroup';\n  return 'VerticalNavMenuLink';\n};\n/**\r\n * Return which component to render based on it's data/context\r\n * @param {Object} item nav menu item\r\n */\n\nexport var resolveHorizontalNavMenuItemComponent = function resolveHorizontalNavMenuItemComponent(item) {\n  if (item.children) return 'HorizontalNavMenuGroup';\n  return 'HorizontalNavMenuLink';\n};\n/**\r\n * Check if nav-link is active\r\n * @param {Object} link nav-link object\r\n */\n// export const isNavLinkActive = (link, currentURL, match) => {\n//   // return currentURL === link || (URLParams && Object.keys(URLParams).length && currentURLFilter === item.navLink)\n//   const getFirstObjProp = obj => obj[Object.keys(obj)[0]]\n//   return (\n//     currentURL === link ||\n//     (match !== null && match !== undefined && match.url === `${link}/${getFirstObjProp(match.params)}`)\n//   )\n// }\n\nexport var isNavLinkActive = function isNavLinkActive(link, currentURL, routerProps) {\n  return currentURL === link || routerProps && routerProps.meta && routerProps.meta.navLink && routerProps.meta.navLink === link; // return currentURL === link\n};\n/**\r\n * Check if nav group is\r\n * @param {Array} children Group children\r\n */\n// export const isNavGroupActive = (children, currentURL, match) => {\n//   return children.some(child => {\n//     // If child have children => It's group => Go deeper(recursive)\n//     if (child.children) {\n//       return isNavGroupActive(child.children, currentURL, match)\n//     }\n//     // else it's link => Check for matched Route\n//     return isNavLinkActive(child.navLink, currentURL, match)\n//   })\n// }\n\nexport var isNavGroupActive = function isNavGroupActive(children, currentURL, routerProps) {\n  return children.some(function (child) {\n    // If child have children => It's group => Go deeper(recursive)\n    if (child.children) {\n      return isNavGroupActive(child.children, currentURL, routerProps);\n    } // else it's link => Check for matched Route\n\n\n    return isNavLinkActive(child.navLink, currentURL, routerProps);\n  });\n};\n/**\r\n * Search for parent object\r\n * @param {Array} navigation Group children\r\n * @param {string} currentURL current URL\r\n */\n// export const search = (navigation, currentURL, match) => {\n//   let result\n//   navigation.some(child => {\n//     let children\n//     // If child have children => It's group => Go deeper(recursive)\n//     if (child.children && (children = search(child.children, currentURL, match))) {\n//       return (result = {\n//         id: child.id,\n//         children\n//       })\n//     }\n//     // else it's link => Check for matched Route\n//     if (isNavLinkActive(child.navLink, currentURL, match)) {\n//       return (result = {\n//         id: child.id\n//       })\n//     }\n//   })\n//   return result\n// }\n\nexport var search = function search(navigation, currentURL, routerProps) {\n  var result;\n  navigation.some(function (child) {\n    var children; // If child have children => It's group => Go deeper(recursive)\n\n    if (child.children && (children = search(child.children, currentURL, routerProps))) {\n      return result = {\n        id: child.id,\n        children: children\n      };\n    } // else it's link => Check for matched Route\n\n\n    if (isNavLinkActive(child.navLink, currentURL, routerProps)) {\n      return result = {\n        id: child.id\n      };\n    }\n  });\n  return result;\n};\n/**\r\n * Loop through nested object\r\n * @param {object} obj nested object\r\n */\n\nexport var getAllParents = function getAllParents(obj, match) {\n  var res = [];\n\n  var recurse = function recurse(obj, current) {\n    for (var key in obj) {\n      var value = obj[key];\n\n      if (value !== undefined) {\n        if (value && typeof value === 'object') {\n          recurse(value, key);\n        } else {\n          if (key === match) {\n            res.push(value);\n          }\n        }\n      }\n    }\n  };\n\n  recurse(obj);\n  return res;\n};\nexport var canViewMenuGroup = function canViewMenuGroup(item) {\n  _s();\n\n  var ability = useContext(AbilityContext); // ! This same logic is used in canViewHorizontalNavMenuGroup and canViewHorizontalNavMenuHeaderGroup. So make sure to update logic in them as well\n\n  var hasAnyVisibleChild = item.children && item.children.some(function (i) {\n    return ability.can(i.action, i.resource);\n  }); // ** If resource and action is defined in item => Return based on children visibility (Hide group if no child is visible)\n  // ** Else check for ability using provided resource and action along with checking if has any visible child\n\n  if (!(item.action && item.resource)) {\n    return hasAnyVisibleChild;\n  }\n\n  return ability.can(item.action, item.resource) && hasAnyVisibleChild;\n};\n\n_s(canViewMenuGroup, \"Mgx70MHFOjWkgzuKcjn1pYPEx8o=\");\n\nexport var canViewMenuItem = function canViewMenuItem(item) {\n  _s2();\n\n  var ability = useContext(AbilityContext);\n  return ability.can(item.action, item.resource);\n};\n\n_s2(canViewMenuItem, \"Mgx70MHFOjWkgzuKcjn1pYPEx8o=\");","map":{"version":3,"sources":["D:/nodejs/IMA/src/@core/layouts/utils.js"],"names":["useContext","AbilityContext","resolveVerticalNavMenuItemComponent","item","header","children","resolveHorizontalNavMenuItemComponent","isNavLinkActive","link","currentURL","routerProps","meta","navLink","isNavGroupActive","some","child","search","navigation","result","id","getAllParents","obj","match","res","recurse","current","key","value","undefined","push","canViewMenuGroup","ability","hasAnyVisibleChild","i","can","action","resource","canViewMenuItem"],"mappings":";;;AAAA;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,mCAAmC,GAAG,SAAtCA,mCAAsC,CAAAC,IAAI,EAAI;AACzD,MAAIA,IAAI,CAACC,MAAT,EAAiB,OAAO,8BAAP;AACjB,MAAID,IAAI,CAACE,QAAT,EAAmB,OAAO,sBAAP;AACnB,SAAO,qBAAP;AACD,CAJM;AAMP;AACA;AACA;AACA;;AACA,OAAO,IAAMC,qCAAqC,GAAG,SAAxCA,qCAAwC,CAAAH,IAAI,EAAI;AAC3D,MAAIA,IAAI,CAACE,QAAT,EAAmB,OAAO,wBAAP;AACnB,SAAO,uBAAP;AACD,CAHM;AAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,UAAP,EAAmBC,WAAnB,EAAmC;AAChE,SACED,UAAU,KAAKD,IAAf,IACCE,WAAW,IAAIA,WAAW,CAACC,IAA3B,IAAmCD,WAAW,CAACC,IAAZ,CAAiBC,OAApD,IAA+DF,WAAW,CAACC,IAAZ,CAAiBC,OAAjB,KAA6BJ,IAF/F,CADgE,CAKhE;AACD,CANM;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACR,QAAD,EAAWI,UAAX,EAAuBC,WAAvB,EAAuC;AACrE,SAAOL,QAAQ,CAACS,IAAT,CAAc,UAAAC,KAAK,EAAI;AAC5B;AACA,QAAIA,KAAK,CAACV,QAAV,EAAoB;AAClB,aAAOQ,gBAAgB,CAACE,KAAK,CAACV,QAAP,EAAiBI,UAAjB,EAA6BC,WAA7B,CAAvB;AACD,KAJ2B,CAK5B;;;AACA,WAAOH,eAAe,CAACQ,KAAK,CAACH,OAAP,EAAgBH,UAAhB,EAA4BC,WAA5B,CAAtB;AACD,GAPM,CAAP;AAQD,CATM;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMM,MAAM,GAAG,SAATA,MAAS,CAACC,UAAD,EAAaR,UAAb,EAAyBC,WAAzB,EAAyC;AAC7D,MAAIQ,MAAJ;AACAD,EAAAA,UAAU,CAACH,IAAX,CAAgB,UAAAC,KAAK,EAAI;AACvB,QAAIV,QAAJ,CADuB,CAEvB;;AACA,QAAIU,KAAK,CAACV,QAAN,KAAmBA,QAAQ,GAAGW,MAAM,CAACD,KAAK,CAACV,QAAP,EAAiBI,UAAjB,EAA6BC,WAA7B,CAApC,CAAJ,EAAoF;AAClF,aAAQQ,MAAM,GAAG;AACfC,QAAAA,EAAE,EAAEJ,KAAK,CAACI,EADK;AAEfd,QAAAA,QAAQ,EAARA;AAFe,OAAjB;AAID,KARsB,CAUvB;;;AACA,QAAIE,eAAe,CAACQ,KAAK,CAACH,OAAP,EAAgBH,UAAhB,EAA4BC,WAA5B,CAAnB,EAA6D;AAC3D,aAAQQ,MAAM,GAAG;AACfC,QAAAA,EAAE,EAAEJ,KAAK,CAACI;AADK,OAAjB;AAGD;AACF,GAhBD;AAiBA,SAAOD,MAAP;AACD,CApBM;AAsBP;AACA;AACA;AACA;;AACA,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,KAAN,EAAgB;AAC3C,MAAMC,GAAG,GAAG,EAAZ;;AACA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACH,GAAD,EAAMI,OAAN,EAAkB;AAChC,SAAK,IAAMC,GAAX,IAAkBL,GAAlB,EAAuB;AACrB,UAAMM,KAAK,GAAGN,GAAG,CAACK,GAAD,CAAjB;;AACA,UAAIC,KAAK,KAAKC,SAAd,EAAyB;AACvB,YAAID,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA9B,EAAwC;AACtCH,UAAAA,OAAO,CAACG,KAAD,EAAQD,GAAR,CAAP;AACD,SAFD,MAEO;AACL,cAAIA,GAAG,KAAKJ,KAAZ,EAAmB;AACjBC,YAAAA,GAAG,CAACM,IAAJ,CAASF,KAAT;AACD;AACF;AACF;AACF;AACF,GAbD;;AAcAH,EAAAA,OAAO,CAACH,GAAD,CAAP;AACA,SAAOE,GAAP;AACD,CAlBM;AAoBP,OAAO,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA3B,IAAI,EAAI;AAAA;;AACtC,MAAM4B,OAAO,GAAG/B,UAAU,CAACC,cAAD,CAA1B,CADsC,CAEtC;;AACA,MAAM+B,kBAAkB,GAAG7B,IAAI,CAACE,QAAL,IAAiBF,IAAI,CAACE,QAAL,CAAcS,IAAd,CAAmB,UAAAmB,CAAC;AAAA,WAAIF,OAAO,CAACG,GAAR,CAAYD,CAAC,CAACE,MAAd,EAAsBF,CAAC,CAACG,QAAxB,CAAJ;AAAA,GAApB,CAA5C,CAHsC,CAKtC;AACA;;AACA,MAAI,EAAEjC,IAAI,CAACgC,MAAL,IAAehC,IAAI,CAACiC,QAAtB,CAAJ,EAAqC;AACnC,WAAOJ,kBAAP;AACD;;AACD,SAAOD,OAAO,CAACG,GAAR,CAAY/B,IAAI,CAACgC,MAAjB,EAAyBhC,IAAI,CAACiC,QAA9B,KAA2CJ,kBAAlD;AACD,CAXM;;GAAMF,gB;;AAab,OAAO,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAAAlC,IAAI,EAAI;AAAA;;AACrC,MAAM4B,OAAO,GAAG/B,UAAU,CAACC,cAAD,CAA1B;AACA,SAAO8B,OAAO,CAACG,GAAR,CAAY/B,IAAI,CAACgC,MAAjB,EAAyBhC,IAAI,CAACiC,QAA9B,CAAP;AACD,CAHM;;IAAMC,e","sourcesContent":["// ** React Imports\r\nimport { useContext } from 'react'\r\nimport { AbilityContext } from '@src/utility/context/Can'\r\n\r\n/**\r\n * Return which component to render based on it's data/context\r\n * @param {Object} item nav menu item\r\n */\r\nexport const resolveVerticalNavMenuItemComponent = item => {\r\n  if (item.header) return 'VerticalNavMenuSectionHeader'\r\n  if (item.children) return 'VerticalNavMenuGroup'\r\n  return 'VerticalNavMenuLink'\r\n}\r\n\r\n/**\r\n * Return which component to render based on it's data/context\r\n * @param {Object} item nav menu item\r\n */\r\nexport const resolveHorizontalNavMenuItemComponent = item => {\r\n  if (item.children) return 'HorizontalNavMenuGroup'\r\n  return 'HorizontalNavMenuLink'\r\n}\r\n\r\n/**\r\n * Check if nav-link is active\r\n * @param {Object} link nav-link object\r\n */\r\n// export const isNavLinkActive = (link, currentURL, match) => {\r\n//   // return currentURL === link || (URLParams && Object.keys(URLParams).length && currentURLFilter === item.navLink)\r\n//   const getFirstObjProp = obj => obj[Object.keys(obj)[0]]\r\n//   return (\r\n//     currentURL === link ||\r\n//     (match !== null && match !== undefined && match.url === `${link}/${getFirstObjProp(match.params)}`)\r\n//   )\r\n// }\r\n\r\nexport const isNavLinkActive = (link, currentURL, routerProps) => {\r\n  return (\r\n    currentURL === link ||\r\n    (routerProps && routerProps.meta && routerProps.meta.navLink && routerProps.meta.navLink === link)\r\n  )\r\n  // return currentURL === link\r\n}\r\n\r\n/**\r\n * Check if nav group is\r\n * @param {Array} children Group children\r\n */\r\n// export const isNavGroupActive = (children, currentURL, match) => {\r\n//   return children.some(child => {\r\n//     // If child have children => It's group => Go deeper(recursive)\r\n//     if (child.children) {\r\n//       return isNavGroupActive(child.children, currentURL, match)\r\n//     }\r\n//     // else it's link => Check for matched Route\r\n//     return isNavLinkActive(child.navLink, currentURL, match)\r\n//   })\r\n// }\r\nexport const isNavGroupActive = (children, currentURL, routerProps) => {\r\n  return children.some(child => {\r\n    // If child have children => It's group => Go deeper(recursive)\r\n    if (child.children) {\r\n      return isNavGroupActive(child.children, currentURL, routerProps)\r\n    }\r\n    // else it's link => Check for matched Route\r\n    return isNavLinkActive(child.navLink, currentURL, routerProps)\r\n  })\r\n}\r\n\r\n/**\r\n * Search for parent object\r\n * @param {Array} navigation Group children\r\n * @param {string} currentURL current URL\r\n */\r\n// export const search = (navigation, currentURL, match) => {\r\n//   let result\r\n//   navigation.some(child => {\r\n//     let children\r\n//     // If child have children => It's group => Go deeper(recursive)\r\n//     if (child.children && (children = search(child.children, currentURL, match))) {\r\n//       return (result = {\r\n//         id: child.id,\r\n//         children\r\n//       })\r\n//     }\r\n\r\n//     // else it's link => Check for matched Route\r\n//     if (isNavLinkActive(child.navLink, currentURL, match)) {\r\n//       return (result = {\r\n//         id: child.id\r\n//       })\r\n//     }\r\n//   })\r\n//   return result\r\n// }\r\n\r\nexport const search = (navigation, currentURL, routerProps) => {\r\n  let result\r\n  navigation.some(child => {\r\n    let children\r\n    // If child have children => It's group => Go deeper(recursive)\r\n    if (child.children && (children = search(child.children, currentURL, routerProps))) {\r\n      return (result = {\r\n        id: child.id,\r\n        children\r\n      })\r\n    }\r\n\r\n    // else it's link => Check for matched Route\r\n    if (isNavLinkActive(child.navLink, currentURL, routerProps)) {\r\n      return (result = {\r\n        id: child.id\r\n      })\r\n    }\r\n  })\r\n  return result\r\n}\r\n\r\n/**\r\n * Loop through nested object\r\n * @param {object} obj nested object\r\n */\r\nexport const getAllParents = (obj, match) => {\r\n  const res = []\r\n  const recurse = (obj, current) => {\r\n    for (const key in obj) {\r\n      const value = obj[key]\r\n      if (value !== undefined) {\r\n        if (value && typeof value === 'object') {\r\n          recurse(value, key)\r\n        } else {\r\n          if (key === match) {\r\n            res.push(value)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  recurse(obj)\r\n  return res\r\n}\r\n\r\nexport const canViewMenuGroup = item => {\r\n  const ability = useContext(AbilityContext)\r\n  // ! This same logic is used in canViewHorizontalNavMenuGroup and canViewHorizontalNavMenuHeaderGroup. So make sure to update logic in them as well\r\n  const hasAnyVisibleChild = item.children && item.children.some(i => ability.can(i.action, i.resource))\r\n\r\n  // ** If resource and action is defined in item => Return based on children visibility (Hide group if no child is visible)\r\n  // ** Else check for ability using provided resource and action along with checking if has any visible child\r\n  if (!(item.action && item.resource)) {\r\n    return hasAnyVisibleChild\r\n  }\r\n  return ability.can(item.action, item.resource) && hasAnyVisibleChild\r\n}\r\n\r\nexport const canViewMenuItem = item => {\r\n  const ability = useContext(AbilityContext)\r\n  return ability.can(item.action, item.resource)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}