{"ast":null,"code":"import _objectSpread from \"D:/nodejs/IMA/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// ** Checks if an object is empty (returns boolean)\nexport var isObjEmpty = function isObjEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}; // ** Returns K format from a number\n\nexport var kFormatter = function kFormatter(num) {\n  return num > 999 ? \"\".concat((num / 1000).toFixed(1), \"k\") : num;\n}; // ** Converts HTML to string\n\nexport var htmlToString = function htmlToString(html) {\n  return html.replace(/<\\/?[^>]+(>|$)/g, '');\n}; // ** Checks if the passed date is today\n\nvar isToday = function isToday(date) {\n  var today = new Date();\n  return (\n    /* eslint-disable operator-linebreak */\n    date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear()\n    /* eslint-enable */\n\n  );\n};\n/**\r\n ** Format and return date in Humanize format\r\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\r\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\r\n * @param {String} value date to format\r\n * @param {Object} formatting Intl object to format with\r\n */\n\n\nexport var formatDate = function formatDate(value) {\n  var formatting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric'\n  };\n  if (!value) return value;\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\n}; // ** Returns short month of passed date\n\nexport var formatDateToMonthShort = function formatDateToMonthShort(value) {\n  var toTimeForCurrentDay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var date = new Date(value);\n  var formatting = {\n    month: 'short',\n    day: 'numeric'\n  };\n\n  if (toTimeForCurrentDay && isToday(date)) {\n    formatting = {\n      hour: 'numeric',\n      minute: 'numeric'\n    };\n  }\n\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value));\n};\n/**\r\n ** Return if user is logged in\r\n ** This is completely up to you and how you want to store the token in your frontend application\r\n *  ? e.g. If you are using cookies to store the application please update this function\r\n */\n\nvar demo = {\n  name: \"info\",\n  pass: \"demo\"\n};\nexport var isUserLoggedIn = function isUserLoggedIn() {\n  return demo;\n}; //{name:\"demo\", sads:\"asdad\"} //localStorage.getItem('userData')\n\nexport var getUserData = function getUserData() {\n  return JSON.parse(demo);\n};\n/**\r\n ** This function is used for demo purpose route navigation\r\n ** In real app you won't need this function because your app will navigate to same route for each users regardless of ability\r\n ** Please note role field is just for showing purpose it's not used by anything in frontend\r\n ** We are checking role just for ease\r\n * ? NOTE: If you have different pages to navigate based on user ability then this function can be useful. However, you need to update it.\r\n * @param {String} userRole Role of user\r\n */\n\nexport var getHomeRouteForLoggedInUser = function getHomeRouteForLoggedInUser(userRole) {\n  if (userRole === '123123') return '/';\n  if (userRole === 'client') return '/access-control';\n  return '/login';\n}; // ** React Select Theme Colors\n\nexport var selectThemeColors = function selectThemeColors(theme) {\n  return _objectSpread(_objectSpread({}, theme), {}, {\n    colors: _objectSpread(_objectSpread({}, theme.colors), {}, {\n      primary25: '#7367f01a',\n      // for option hover bg-color\n      primary: '#7367f0',\n      // for selected option bg-color\n      neutral10: '#7367f0',\n      // for tags bg-color\n      neutral20: '#ededed',\n      // for input border-color\n      neutral30: '#ededed' // for input hover border-color\n\n    })\n  });\n};","map":{"version":3,"sources":["D:/nodejs/IMA/src/utility/Utils.js"],"names":["isObjEmpty","obj","Object","keys","length","kFormatter","num","toFixed","htmlToString","html","replace","isToday","date","today","Date","getDate","getMonth","getFullYear","formatDate","value","formatting","month","day","year","Intl","DateTimeFormat","format","formatDateToMonthShort","toTimeForCurrentDay","hour","minute","demo","name","pass","isUserLoggedIn","getUserData","JSON","parse","getHomeRouteForLoggedInUser","userRole","selectThemeColors","theme","colors","primary25","primary","neutral10","neutral20","neutral30"],"mappings":"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","sourcesContent":["// ** Checks if an object is empty (returns boolean)\r\nexport const isObjEmpty = obj => Object.keys(obj).length === 0\r\n\r\n// ** Returns K format from a number\r\nexport const kFormatter = num => (num > 999 ? `${(num / 1000).toFixed(1)}k` : num)\r\n\r\n// ** Converts HTML to string\r\nexport const htmlToString = html => html.replace(/<\\/?[^>]+(>|$)/g, '')\r\n\r\n// ** Checks if the passed date is today\r\nconst isToday = date => {\r\n  const today = new Date()\r\n  return (\r\n    /* eslint-disable operator-linebreak */\r\n    date.getDate() === today.getDate() &&\r\n    date.getMonth() === today.getMonth() &&\r\n    date.getFullYear() === today.getFullYear()\r\n    /* eslint-enable */\r\n  )\r\n}\r\n\r\n/**\r\n ** Format and return date in Humanize format\r\n ** Intl docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/format\r\n ** Intl Constructor: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\r\n * @param {String} value date to format\r\n * @param {Object} formatting Intl object to format with\r\n */\r\nexport const formatDate = (value, formatting = { month: 'short', day: 'numeric', year: 'numeric' }) => {\r\n  if (!value) return value\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\r\n}\r\n\r\n// ** Returns short month of passed date\r\nexport const formatDateToMonthShort = (value, toTimeForCurrentDay = true) => {\r\n  const date = new Date(value)\r\n  let formatting = { month: 'short', day: 'numeric' }\r\n\r\n  if (toTimeForCurrentDay && isToday(date)) {\r\n    formatting = { hour: 'numeric', minute: 'numeric' }\r\n  }\r\n\r\n  return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\r\n}\r\n\r\n/**\r\n ** Return if user is logged in\r\n ** This is completely up to you and how you want to store the token in your frontend application\r\n *  ? e.g. If you are using cookies to store the application please update this function\r\n */\r\nlet demo = {name:\"info\", pass:\"demo\"}\r\nexport const isUserLoggedIn = () =>demo //{name:\"demo\", sads:\"asdad\"} //localStorage.getItem('userData')\r\nexport const getUserData = () => JSON.parse(demo)\r\n\r\n/**\r\n ** This function is used for demo purpose route navigation\r\n ** In real app you won't need this function because your app will navigate to same route for each users regardless of ability\r\n ** Please note role field is just for showing purpose it's not used by anything in frontend\r\n ** We are checking role just for ease\r\n * ? NOTE: If you have different pages to navigate based on user ability then this function can be useful. However, you need to update it.\r\n * @param {String} userRole Role of user\r\n */\r\nexport const getHomeRouteForLoggedInUser = userRole => {\r\n  if (userRole === '123123') return '/'\r\n  if (userRole === 'client') return '/access-control'\r\n  return '/login'\r\n}\r\n\r\n// ** React Select Theme Colors\r\nexport const selectThemeColors = theme => ({\r\n  ...theme,\r\n  colors: {\r\n    ...theme.colors,\r\n    primary25: '#7367f01a', // for option hover bg-color\r\n    primary: '#7367f0', // for selected option bg-color\r\n    neutral10: '#7367f0', // for tags bg-color\r\n    neutral20: '#ededed', // for input border-color\r\n    neutral30: '#ededed' // for input hover border-color\r\n  }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}